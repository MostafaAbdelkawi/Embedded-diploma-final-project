
Final_MT_Project_CNTRL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000300c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000300c  000030a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080007a  0080007a  000030ba  2**0
                  ALLOC
  3 .stab         00002d78  00000000  00000000  000030bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016d7  00000000  00000000  00005e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000750b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000764b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000077bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009404  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a2ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b09c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b489  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__vector_3>
      10:	0c 94 16 14 	jmp	0x282c	; 0x282c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__vector_8>
      24:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <main>
      8a:	0c 94 04 18 	jmp	0x3008	; 0x3008 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <buzzerOn>:
#include "Buzzer.h"




void buzzerOn(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	DIO_WriteChannel(BUZZER_CHANNEL,1);
     b4e:	88 e0       	ldi	r24, 0x08	; 8
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <DIO_WriteChannel>

}
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <buzzerOff>:

void buzzerOff(void){
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62

	DIO_WriteChannel(BUZZER_CHANNEL,0);
     b64:	88 e0       	ldi	r24, 0x08	; 8
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <DIO_WriteChannel>

}
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <decimaltoOctal>:
 */

#include "DIO.h"

uint8 decimaltoOctal(uint8 deciNum)
{
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	00 d0       	rcall	.+0      	; 0xb78 <decimaltoOctal+0x6>
     b78:	00 d0       	rcall	.+0      	; 0xb7a <decimaltoOctal+0x8>
     b7a:	0f 92       	push	r0
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	8d 83       	std	Y+5, r24	; 0x05

    // initializations
    uint8 octalNum = 0, countval = 1;
     b82:	1c 82       	std	Y+4, r1	; 0x04
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	2b c0       	rjmp	.+86     	; 0xbe0 <decimaltoOctal+0x6e>


    while (deciNum != 0) {

        // decimals remainder is calculated
        int remainder = deciNum % 8;
     b8a:	8d 81       	ldd	r24, Y+5	; 0x05
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	87 70       	andi	r24, 0x07	; 7
     b92:	90 70       	andi	r25, 0x00	; 0
     b94:	9a 83       	std	Y+2, r25	; 0x02
     b96:	89 83       	std	Y+1, r24	; 0x01

        // storing the octalvalue
        octalNum += remainder * countval;
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	9a 81       	ldd	r25, Y+2	; 0x02
     ba2:	ac 01       	movw	r20, r24
     ba4:	24 9f       	mul	r18, r20
     ba6:	c0 01       	movw	r24, r0
     ba8:	25 9f       	mul	r18, r21
     baa:	90 0d       	add	r25, r0
     bac:	34 9f       	mul	r19, r20
     bae:	90 0d       	add	r25, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	98 2f       	mov	r25, r24
     bb4:	8c 81       	ldd	r24, Y+4	; 0x04
     bb6:	89 0f       	add	r24, r25
     bb8:	8c 83       	std	Y+4, r24	; 0x04

        // storing exponential value
        countval = countval * 10;
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	88 2f       	mov	r24, r24
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	9c 01       	movw	r18, r24
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	c9 01       	movw	r24, r18
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	82 0f       	add	r24, r18
     bd2:	93 1f       	adc	r25, r19
     bd4:	8b 83       	std	Y+3, r24	; 0x03
        deciNum /= 8;
     bd6:	8d 81       	ldd	r24, Y+5	; 0x05
     bd8:	86 95       	lsr	r24
     bda:	86 95       	lsr	r24
     bdc:	86 95       	lsr	r24
     bde:	8d 83       	std	Y+5, r24	; 0x05

    // initializations
    uint8 octalNum = 0, countval = 1;


    while (deciNum != 0) {
     be0:	8d 81       	ldd	r24, Y+5	; 0x05
     be2:	88 23       	and	r24, r24
     be4:	91 f6       	brne	.-92     	; 0xb8a <decimaltoOctal+0x18>

        // storing exponential value
        countval = countval * 10;
        deciNum /= 8;
    }
    return octalNum;
     be6:	8c 81       	ldd	r24, Y+4	; 0x04
}
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <DIO_WriteChannel>:

uint8 DIO_WriteChannel(uint8 channelNumber,bool level){
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	2e 97       	sbiw	r28, 0x0e	; 14
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	8b 83       	std	Y+3, r24	; 0x03
     c0e:	6c 83       	std	Y+4, r22	; 0x04
	// switch case with multiple entries cause same result i.e no break
	// OR
	//Conceder using the octal numbering system

	uint8 Octal;
	uint8 error = 0;
     c10:	19 82       	std	Y+1, r1	; 0x01
	Octal = decimaltoOctal(channelNumber);
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	0e 94 b9 05 	call	0xb72	; 0xb72 <decimaltoOctal>
     c18:	8a 83       	std	Y+2, r24	; 0x02
	switch((Octal/10)){
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	9a e0       	ldi	r25, 0x0A	; 10
     c1e:	69 2f       	mov	r22, r25
     c20:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	3e 87       	std	Y+14, r19	; 0x0e
     c2a:	2d 87       	std	Y+13, r18	; 0x0d
     c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	91 05       	cpc	r25, r1
     c34:	09 f4       	brne	.+2      	; 0xc38 <DIO_WriteChannel+0x40>
     c36:	87 c0       	rjmp	.+270    	; 0xd46 <DIO_WriteChannel+0x14e>
     c38:	2d 85       	ldd	r18, Y+13	; 0x0d
     c3a:	3e 85       	ldd	r19, Y+14	; 0x0e
     c3c:	22 30       	cpi	r18, 0x02	; 2
     c3e:	31 05       	cpc	r19, r1
     c40:	2c f4       	brge	.+10     	; 0xc4c <DIO_WriteChannel+0x54>
     c42:	8d 85       	ldd	r24, Y+13	; 0x0d
     c44:	9e 85       	ldd	r25, Y+14	; 0x0e
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	71 f0       	breq	.+28     	; 0xc66 <DIO_WriteChannel+0x6e>
     c4a:	cd c1       	rjmp	.+922    	; 0xfe6 <DIO_WriteChannel+0x3ee>
     c4c:	2d 85       	ldd	r18, Y+13	; 0x0d
     c4e:	3e 85       	ldd	r19, Y+14	; 0x0e
     c50:	22 30       	cpi	r18, 0x02	; 2
     c52:	31 05       	cpc	r19, r1
     c54:	09 f4       	brne	.+2      	; 0xc58 <DIO_WriteChannel+0x60>
     c56:	e7 c0       	rjmp	.+462    	; 0xe26 <DIO_WriteChannel+0x22e>
     c58:	8d 85       	ldd	r24, Y+13	; 0x0d
     c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c5c:	83 30       	cpi	r24, 0x03	; 3
     c5e:	91 05       	cpc	r25, r1
     c60:	09 f4       	brne	.+2      	; 0xc64 <DIO_WriteChannel+0x6c>
     c62:	51 c1       	rjmp	.+674    	; 0xf06 <DIO_WriteChannel+0x30e>
     c64:	c0 c1       	rjmp	.+896    	; 0xfe6 <DIO_WriteChannel+0x3ee>


	case 0 :
		switch(level){
     c66:	8c 81       	ldd	r24, Y+4	; 0x04
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	3c 87       	std	Y+12, r19	; 0x0c
     c6e:	2b 87       	std	Y+11, r18	; 0x0b
     c70:	8b 85       	ldd	r24, Y+11	; 0x0b
     c72:	9c 85       	ldd	r25, Y+12	; 0x0c
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	31 f0       	breq	.+12     	; 0xc84 <DIO_WriteChannel+0x8c>
     c78:	2b 85       	ldd	r18, Y+11	; 0x0b
     c7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     c7c:	21 30       	cpi	r18, 0x01	; 1
     c7e:	31 05       	cpc	r19, r1
     c80:	91 f1       	breq	.+100    	; 0xce6 <DIO_WriteChannel+0xee>
     c82:	b3 c1       	rjmp	.+870    	; 0xfea <DIO_WriteChannel+0x3f2>
		case 0 :
			SET_BIT(DDRA,(Octal%10));
     c84:	aa e3       	ldi	r26, 0x3A	; 58
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	ea e3       	ldi	r30, 0x3A	; 58
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	48 2f       	mov	r20, r24
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	9a e0       	ldi	r25, 0x0A	; 10
     c94:	69 2f       	mov	r22, r25
     c96:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     c9a:	89 2f       	mov	r24, r25
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <DIO_WriteChannel+0xb2>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	2a 95       	dec	r18
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <DIO_WriteChannel+0xae>
     cae:	84 2b       	or	r24, r20
     cb0:	8c 93       	st	X, r24
			CLEAR_BIT(PORTA,(Octal%10));
     cb2:	ab e3       	ldi	r26, 0x3B	; 59
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	eb e3       	ldi	r30, 0x3B	; 59
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	48 2f       	mov	r20, r24
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	9a e0       	ldi	r25, 0x0A	; 10
     cc2:	69 2f       	mov	r22, r25
     cc4:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     cc8:	89 2f       	mov	r24, r25
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <DIO_WriteChannel+0xe2>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <DIO_WriteChannel+0xde>
     cde:	80 95       	com	r24
     ce0:	84 23       	and	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	82 c1       	rjmp	.+772    	; 0xfea <DIO_WriteChannel+0x3f2>
			break;
		case 1 :
			SET_BIT(DDRA,(Octal%10));
     ce6:	aa e3       	ldi	r26, 0x3A	; 58
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	ea e3       	ldi	r30, 0x3A	; 58
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	9a e0       	ldi	r25, 0x0A	; 10
     cf6:	69 2f       	mov	r22, r25
     cf8:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     cfc:	89 2f       	mov	r24, r25
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <DIO_WriteChannel+0x114>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	2a 95       	dec	r18
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <DIO_WriteChannel+0x110>
     d10:	84 2b       	or	r24, r20
     d12:	8c 93       	st	X, r24
			SET_BIT(PORTA,(Octal%10));
     d14:	ab e3       	ldi	r26, 0x3B	; 59
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	eb e3       	ldi	r30, 0x3B	; 59
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	9a e0       	ldi	r25, 0x0A	; 10
     d24:	69 2f       	mov	r22, r25
     d26:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     d2a:	89 2f       	mov	r24, r25
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_WriteChannel+0x144>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_WriteChannel+0x140>
     d40:	84 2b       	or	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	52 c1       	rjmp	.+676    	; 0xfea <DIO_WriteChannel+0x3f2>
			break;
		}
		break;
	case 1 :
		switch(level){
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	3a 87       	std	Y+10, r19	; 0x0a
     d4e:	29 87       	std	Y+9, r18	; 0x09
     d50:	89 85       	ldd	r24, Y+9	; 0x09
     d52:	9a 85       	ldd	r25, Y+10	; 0x0a
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	31 f0       	breq	.+12     	; 0xd64 <DIO_WriteChannel+0x16c>
     d58:	29 85       	ldd	r18, Y+9	; 0x09
     d5a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d5c:	21 30       	cpi	r18, 0x01	; 1
     d5e:	31 05       	cpc	r19, r1
     d60:	91 f1       	breq	.+100    	; 0xdc6 <DIO_WriteChannel+0x1ce>
     d62:	43 c1       	rjmp	.+646    	; 0xfea <DIO_WriteChannel+0x3f2>
		case 0 :
			SET_BIT(DDRB,(Octal%10));
     d64:	a7 e3       	ldi	r26, 0x37	; 55
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e3       	ldi	r30, 0x37	; 55
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	9a e0       	ldi	r25, 0x0A	; 10
     d74:	69 2f       	mov	r22, r25
     d76:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     d7a:	89 2f       	mov	r24, r25
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <DIO_WriteChannel+0x192>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	2a 95       	dec	r18
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <DIO_WriteChannel+0x18e>
     d8e:	84 2b       	or	r24, r20
     d90:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB,(Octal%10));
     d92:	a8 e3       	ldi	r26, 0x38	; 56
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e8 e3       	ldi	r30, 0x38	; 56
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	9a e0       	ldi	r25, 0x0A	; 10
     da2:	69 2f       	mov	r22, r25
     da4:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     da8:	89 2f       	mov	r24, r25
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_WriteChannel+0x1c2>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_WriteChannel+0x1be>
     dbe:	80 95       	com	r24
     dc0:	84 23       	and	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	12 c1       	rjmp	.+548    	; 0xfea <DIO_WriteChannel+0x3f2>
			break;
		case 1 :
			SET_BIT(DDRB,(Octal%10));
     dc6:	a7 e3       	ldi	r26, 0x37	; 55
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e7 e3       	ldi	r30, 0x37	; 55
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	9a e0       	ldi	r25, 0x0A	; 10
     dd6:	69 2f       	mov	r22, r25
     dd8:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     ddc:	89 2f       	mov	r24, r25
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_WriteChannel+0x1f4>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	2a 95       	dec	r18
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_WriteChannel+0x1f0>
     df0:	84 2b       	or	r24, r20
     df2:	8c 93       	st	X, r24
			SET_BIT(PORTB,(Octal%10));
     df4:	a8 e3       	ldi	r26, 0x38	; 56
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e8 e3       	ldi	r30, 0x38	; 56
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	9a e0       	ldi	r25, 0x0A	; 10
     e04:	69 2f       	mov	r22, r25
     e06:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     e0a:	89 2f       	mov	r24, r25
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_WriteChannel+0x224>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_WriteChannel+0x220>
     e20:	84 2b       	or	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	e2 c0       	rjmp	.+452    	; 0xfea <DIO_WriteChannel+0x3f2>
			break;
		}
		break;
	case 2 :
		switch(level){
     e26:	8c 81       	ldd	r24, Y+4	; 0x04
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	38 87       	std	Y+8, r19	; 0x08
     e2e:	2f 83       	std	Y+7, r18	; 0x07
     e30:	8f 81       	ldd	r24, Y+7	; 0x07
     e32:	98 85       	ldd	r25, Y+8	; 0x08
     e34:	00 97       	sbiw	r24, 0x00	; 0
     e36:	31 f0       	breq	.+12     	; 0xe44 <DIO_WriteChannel+0x24c>
     e38:	2f 81       	ldd	r18, Y+7	; 0x07
     e3a:	38 85       	ldd	r19, Y+8	; 0x08
     e3c:	21 30       	cpi	r18, 0x01	; 1
     e3e:	31 05       	cpc	r19, r1
     e40:	91 f1       	breq	.+100    	; 0xea6 <DIO_WriteChannel+0x2ae>
     e42:	d3 c0       	rjmp	.+422    	; 0xfea <DIO_WriteChannel+0x3f2>
		case 0 :
			SET_BIT(DDRC,(Octal%10));
     e44:	a4 e3       	ldi	r26, 0x34	; 52
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e4 e3       	ldi	r30, 0x34	; 52
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	9a e0       	ldi	r25, 0x0A	; 10
     e54:	69 2f       	mov	r22, r25
     e56:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     e5a:	89 2f       	mov	r24, r25
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_WriteChannel+0x272>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	2a 95       	dec	r18
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <DIO_WriteChannel+0x26e>
     e6e:	84 2b       	or	r24, r20
     e70:	8c 93       	st	X, r24
			CLEAR_BIT(PORTC,(Octal%10));
     e72:	a5 e3       	ldi	r26, 0x35	; 53
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e5 e3       	ldi	r30, 0x35	; 53
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	9a e0       	ldi	r25, 0x0A	; 10
     e82:	69 2f       	mov	r22, r25
     e84:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     e88:	89 2f       	mov	r24, r25
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_WriteChannel+0x2a2>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_WriteChannel+0x29e>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	a2 c0       	rjmp	.+324    	; 0xfea <DIO_WriteChannel+0x3f2>
			break;
		case 1 :
			SET_BIT(DDRC,(Octal%10));
     ea6:	a4 e3       	ldi	r26, 0x34	; 52
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e4 e3       	ldi	r30, 0x34	; 52
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	9a e0       	ldi	r25, 0x0A	; 10
     eb6:	69 2f       	mov	r22, r25
     eb8:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     ebc:	89 2f       	mov	r24, r25
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_WriteChannel+0x2d4>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	2a 95       	dec	r18
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_WriteChannel+0x2d0>
     ed0:	84 2b       	or	r24, r20
     ed2:	8c 93       	st	X, r24
			SET_BIT(PORTC,(Octal%10));
     ed4:	a5 e3       	ldi	r26, 0x35	; 53
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e5 e3       	ldi	r30, 0x35	; 53
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	9a e0       	ldi	r25, 0x0A	; 10
     ee4:	69 2f       	mov	r22, r25
     ee6:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     eea:	89 2f       	mov	r24, r25
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_WriteChannel+0x304>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_WriteChannel+0x300>
     f00:	84 2b       	or	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	72 c0       	rjmp	.+228    	; 0xfea <DIO_WriteChannel+0x3f2>
			break;
		}
		break;
	case 3 :

		switch(level){
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	3e 83       	std	Y+6, r19	; 0x06
     f0e:	2d 83       	std	Y+5, r18	; 0x05
     f10:	8d 81       	ldd	r24, Y+5	; 0x05
     f12:	9e 81       	ldd	r25, Y+6	; 0x06
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	31 f0       	breq	.+12     	; 0xf24 <DIO_WriteChannel+0x32c>
     f18:	2d 81       	ldd	r18, Y+5	; 0x05
     f1a:	3e 81       	ldd	r19, Y+6	; 0x06
     f1c:	21 30       	cpi	r18, 0x01	; 1
     f1e:	31 05       	cpc	r19, r1
     f20:	91 f1       	breq	.+100    	; 0xf86 <DIO_WriteChannel+0x38e>
     f22:	63 c0       	rjmp	.+198    	; 0xfea <DIO_WriteChannel+0x3f2>
		case 0 :
			SET_BIT(DDRD,(Octal%10));
     f24:	a1 e3       	ldi	r26, 0x31	; 49
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e1 e3       	ldi	r30, 0x31	; 49
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	48 2f       	mov	r20, r24
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	9a e0       	ldi	r25, 0x0A	; 10
     f34:	69 2f       	mov	r22, r25
     f36:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     f3a:	89 2f       	mov	r24, r25
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_WriteChannel+0x352>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	2a 95       	dec	r18
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_WriteChannel+0x34e>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
			CLEAR_BIT(PORTD,(Octal%10));
     f52:	a2 e3       	ldi	r26, 0x32	; 50
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e2 e3       	ldi	r30, 0x32	; 50
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9a e0       	ldi	r25, 0x0A	; 10
     f62:	69 2f       	mov	r22, r25
     f64:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     f68:	89 2f       	mov	r24, r25
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_WriteChannel+0x382>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <DIO_WriteChannel+0x37e>
     f7e:	80 95       	com	r24
     f80:	84 23       	and	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	32 c0       	rjmp	.+100    	; 0xfea <DIO_WriteChannel+0x3f2>
			break;
		case 1 :
			SET_BIT(DDRD,(Octal%10));
     f86:	a1 e3       	ldi	r26, 0x31	; 49
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e1 e3       	ldi	r30, 0x31	; 49
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	9a e0       	ldi	r25, 0x0A	; 10
     f96:	69 2f       	mov	r22, r25
     f98:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     f9c:	89 2f       	mov	r24, r25
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_WriteChannel+0x3b4>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	2a 95       	dec	r18
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_WriteChannel+0x3b0>
     fb0:	84 2b       	or	r24, r20
     fb2:	8c 93       	st	X, r24
			SET_BIT(PORTD,(Octal%10));
     fb4:	a2 e3       	ldi	r26, 0x32	; 50
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e2 e3       	ldi	r30, 0x32	; 50
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	9a e0       	ldi	r25, 0x0A	; 10
     fc4:	69 2f       	mov	r22, r25
     fc6:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
     fca:	89 2f       	mov	r24, r25
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_WriteChannel+0x3e4>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_WriteChannel+0x3e0>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_WriteChannel+0x3f2>
			break;
		}
		break;

	default :   /*Return 1 indicating a wrong channel number */
		error = 1;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	89 83       	std	Y+1, r24	; 0x01

	}

	return error;	/* correct channel number  */
     fea:	89 81       	ldd	r24, Y+1	; 0x01

}
     fec:	2e 96       	adiw	r28, 0x0e	; 14
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <DIO_ReadChannel>:

uint8 DIO_ReadChannel(uint8 channelNumber){
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <DIO_ReadChannel+0x6>
    1004:	00 d0       	rcall	.+0      	; 0x1006 <DIO_ReadChannel+0x8>
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	8b 83       	std	Y+3, r24	; 0x03
	// switch case with multiple entries cause same result i.e no break
	//Conceder using the octal numbering system

	uint8 Octal;
	uint8 pinState;
	Octal = decimaltoOctal(channelNumber);
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	0e 94 b9 05 	call	0xb72	; 0xb72 <decimaltoOctal>
    1014:	8a 83       	std	Y+2, r24	; 0x02
		switch((Octal/10)){
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	9a e0       	ldi	r25, 0x0A	; 10
    101a:	69 2f       	mov	r22, r25
    101c:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3d 83       	std	Y+5, r19	; 0x05
    1026:	2c 83       	std	Y+4, r18	; 0x04
    1028:	4c 81       	ldd	r20, Y+4	; 0x04
    102a:	5d 81       	ldd	r21, Y+5	; 0x05
    102c:	41 30       	cpi	r20, 0x01	; 1
    102e:	51 05       	cpc	r21, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <DIO_ReadChannel+0x36>
    1032:	4d c0       	rjmp	.+154    	; 0x10ce <DIO_ReadChannel+0xd0>
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	9d 81       	ldd	r25, Y+5	; 0x05
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	91 05       	cpc	r25, r1
    103c:	34 f4       	brge	.+12     	; 0x104a <DIO_ReadChannel+0x4c>
    103e:	2c 81       	ldd	r18, Y+4	; 0x04
    1040:	3d 81       	ldd	r19, Y+5	; 0x05
    1042:	21 15       	cp	r18, r1
    1044:	31 05       	cpc	r19, r1
    1046:	71 f0       	breq	.+28     	; 0x1064 <DIO_ReadChannel+0x66>
    1048:	e1 c0       	rjmp	.+450    	; 0x120c <DIO_ReadChannel+0x20e>
    104a:	4c 81       	ldd	r20, Y+4	; 0x04
    104c:	5d 81       	ldd	r21, Y+5	; 0x05
    104e:	42 30       	cpi	r20, 0x02	; 2
    1050:	51 05       	cpc	r21, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <DIO_ReadChannel+0x58>
    1054:	71 c0       	rjmp	.+226    	; 0x1138 <DIO_ReadChannel+0x13a>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	91 05       	cpc	r25, r1
    105e:	09 f4       	brne	.+2      	; 0x1062 <DIO_ReadChannel+0x64>
    1060:	a0 c0       	rjmp	.+320    	; 0x11a2 <DIO_ReadChannel+0x1a4>
    1062:	d4 c0       	rjmp	.+424    	; 0x120c <DIO_ReadChannel+0x20e>


		case 0 :

			CLEAR_BIT(DDRA,(Octal%10)); // make the pin INPUT
    1064:	aa e3       	ldi	r26, 0x3A	; 58
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ea e3       	ldi	r30, 0x3A	; 58
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	9a e0       	ldi	r25, 0x0A	; 10
    1074:	69 2f       	mov	r22, r25
    1076:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
    107a:	89 2f       	mov	r24, r25
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_ReadChannel+0x8c>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	2a 95       	dec	r18
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_ReadChannel+0x88>
    108e:	80 95       	com	r24
    1090:	84 23       	and	r24, r20
    1092:	8c 93       	st	X, r24
			if(BIT_IS_CLEAR(PINA,(Octal%10))){
    1094:	e9 e3       	ldi	r30, 0x39	; 57
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	9a e0       	ldi	r25, 0x0A	; 10
    10a2:	69 2f       	mov	r22, r25
    10a4:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
    10a8:	89 2f       	mov	r24, r25
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_ReadChannel+0xb8>
    10b2:	55 95       	asr	r21
    10b4:	47 95       	ror	r20
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_ReadChannel+0xb4>
    10ba:	ca 01       	movw	r24, r20
    10bc:	81 70       	andi	r24, 0x01	; 1
    10be:	90 70       	andi	r25, 0x00	; 0
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	11 f4       	brne	.+4      	; 0x10c8 <DIO_ReadChannel+0xca>
				pinState = 0;
    10c4:	19 82       	std	Y+1, r1	; 0x01
    10c6:	a4 c0       	rjmp	.+328    	; 0x1210 <DIO_ReadChannel+0x212>
			}else {
				pinState = 1;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	a1 c0       	rjmp	.+322    	; 0x1210 <DIO_ReadChannel+0x212>
			}
			break;
		case 1 :

			CLEAR_BIT(DDRB,(Octal%10)); // make the pin INPUT
    10ce:	a7 e3       	ldi	r26, 0x37	; 55
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e7 e3       	ldi	r30, 0x37	; 55
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	9a e0       	ldi	r25, 0x0A	; 10
    10de:	69 2f       	mov	r22, r25
    10e0:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
    10e4:	89 2f       	mov	r24, r25
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_ReadChannel+0xf6>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	2a 95       	dec	r18
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_ReadChannel+0xf2>
    10f8:	80 95       	com	r24
    10fa:	84 23       	and	r24, r20
    10fc:	8c 93       	st	X, r24
			if(BIT_IS_CLEAR(PINB,(Octal%10))){
    10fe:	e6 e3       	ldi	r30, 0x36	; 54
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	9a e0       	ldi	r25, 0x0A	; 10
    110c:	69 2f       	mov	r22, r25
    110e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
    1112:	89 2f       	mov	r24, r25
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a9 01       	movw	r20, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_ReadChannel+0x122>
    111c:	55 95       	asr	r21
    111e:	47 95       	ror	r20
    1120:	8a 95       	dec	r24
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_ReadChannel+0x11e>
    1124:	ca 01       	movw	r24, r20
    1126:	81 70       	andi	r24, 0x01	; 1
    1128:	90 70       	andi	r25, 0x00	; 0
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	11 f4       	brne	.+4      	; 0x1132 <DIO_ReadChannel+0x134>
				pinState = 0;
    112e:	19 82       	std	Y+1, r1	; 0x01
    1130:	6f c0       	rjmp	.+222    	; 0x1210 <DIO_ReadChannel+0x212>
			}else {
				pinState = 1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	6c c0       	rjmp	.+216    	; 0x1210 <DIO_ReadChannel+0x212>
			}

			break;
		case 2 :

			CLEAR_BIT(DDRC,(Octal%10)); // make the pin INPUT
    1138:	a4 e3       	ldi	r26, 0x34	; 52
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e4 e3       	ldi	r30, 0x34	; 52
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	9a e0       	ldi	r25, 0x0A	; 10
    1148:	69 2f       	mov	r22, r25
    114a:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
    114e:	89 2f       	mov	r24, r25
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_ReadChannel+0x160>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	2a 95       	dec	r18
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_ReadChannel+0x15c>
    1162:	80 95       	com	r24
    1164:	84 23       	and	r24, r20
    1166:	8c 93       	st	X, r24
			if(BIT_IS_CLEAR(PINC,(Octal%10))){
    1168:	e3 e3       	ldi	r30, 0x33	; 51
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	9a e0       	ldi	r25, 0x0A	; 10
    1176:	69 2f       	mov	r22, r25
    1178:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
    117c:	89 2f       	mov	r24, r25
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	a9 01       	movw	r20, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_ReadChannel+0x18c>
    1186:	55 95       	asr	r21
    1188:	47 95       	ror	r20
    118a:	8a 95       	dec	r24
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_ReadChannel+0x188>
    118e:	ca 01       	movw	r24, r20
    1190:	81 70       	andi	r24, 0x01	; 1
    1192:	90 70       	andi	r25, 0x00	; 0
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	11 f4       	brne	.+4      	; 0x119c <DIO_ReadChannel+0x19e>
				pinState = 0;
    1198:	19 82       	std	Y+1, r1	; 0x01
    119a:	3a c0       	rjmp	.+116    	; 0x1210 <DIO_ReadChannel+0x212>
			}else {
				pinState = 1;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	37 c0       	rjmp	.+110    	; 0x1210 <DIO_ReadChannel+0x212>
			}
			break;
		case 3 :

			CLEAR_BIT(DDRD,(Octal%10)); // make the pin INPUT
    11a2:	a1 e3       	ldi	r26, 0x31	; 49
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e1 e3       	ldi	r30, 0x31	; 49
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	9a e0       	ldi	r25, 0x0A	; 10
    11b2:	69 2f       	mov	r22, r25
    11b4:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
    11b8:	89 2f       	mov	r24, r25
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_ReadChannel+0x1ca>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	2a 95       	dec	r18
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_ReadChannel+0x1c6>
    11cc:	80 95       	com	r24
    11ce:	84 23       	and	r24, r20
    11d0:	8c 93       	st	X, r24
			if(BIT_IS_CLEAR(PIND,(Octal%10))){
    11d2:	e0 e3       	ldi	r30, 0x30	; 48
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	9a e0       	ldi	r25, 0x0A	; 10
    11e0:	69 2f       	mov	r22, r25
    11e2:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodqi4>
    11e6:	89 2f       	mov	r24, r25
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	a9 01       	movw	r20, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_ReadChannel+0x1f6>
    11f0:	55 95       	asr	r21
    11f2:	47 95       	ror	r20
    11f4:	8a 95       	dec	r24
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_ReadChannel+0x1f2>
    11f8:	ca 01       	movw	r24, r20
    11fa:	81 70       	andi	r24, 0x01	; 1
    11fc:	90 70       	andi	r25, 0x00	; 0
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	11 f4       	brne	.+4      	; 0x1206 <DIO_ReadChannel+0x208>
				pinState = 0;
    1202:	19 82       	std	Y+1, r1	; 0x01
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <DIO_ReadChannel+0x212>
			}else {
				pinState = 1;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_ReadChannel+0x212>
			}

			break;

		default :   /*Return 3 indicating a wrong channel number */
			pinState = 3;
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	89 83       	std	Y+1, r24	; 0x01

		}



	return pinState;
    1210:	89 81       	ldd	r24, Y+1	; 0x01
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <EEPROM_write>:
 */


#include "eeprom.h"

void EEPROM_write(uint16 address, uint8 data){
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <EEPROM_write+0x6>
    1228:	0f 92       	push	r0
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	9a 83       	std	Y+2, r25	; 0x02
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	6b 83       	std	Y+3, r22	; 0x03

	I2C_start();
    1234:	0e 94 97 09 	call	0x132e	; 0x132e <I2C_start>

    I2C_sendData((uint8)(0xA0 | ((address & 0x0700)>>7)));
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	9a 81       	ldd	r25, Y+2	; 0x02
    123c:	80 70       	andi	r24, 0x00	; 0
    123e:	97 70       	andi	r25, 0x07	; 7
    1240:	88 0f       	add	r24, r24
    1242:	89 2f       	mov	r24, r25
    1244:	88 1f       	adc	r24, r24
    1246:	99 0b       	sbc	r25, r25
    1248:	91 95       	neg	r25
    124a:	80 6a       	ori	r24, 0xA0	; 160
    124c:	0e 94 a7 09 	call	0x134e	; 0x134e <I2C_sendData>

    I2C_sendData((uint8)(address));
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	0e 94 a7 09 	call	0x134e	; 0x134e <I2C_sendData>

    I2C_sendData(data);
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	0e 94 a7 09 	call	0x134e	; 0x134e <I2C_sendData>

    I2C_stop();
    125c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <I2C_stop>

}
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <EEPROM_read>:


void EEPROM_read(uint16 address,uint8 *data){
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	00 d0       	rcall	.+0      	; 0x1272 <EEPROM_read+0x6>
    1272:	00 d0       	rcall	.+0      	; 0x1274 <EEPROM_read+0x8>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	7c 83       	std	Y+4, r23	; 0x04
    127e:	6b 83       	std	Y+3, r22	; 0x03


	I2C_start();
    1280:	0e 94 97 09 	call	0x132e	; 0x132e <I2C_start>

    I2C_sendData((uint8)((0xA0) | ((address & 0x0700)>>7)));
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
    1288:	80 70       	andi	r24, 0x00	; 0
    128a:	97 70       	andi	r25, 0x07	; 7
    128c:	88 0f       	add	r24, r24
    128e:	89 2f       	mov	r24, r25
    1290:	88 1f       	adc	r24, r24
    1292:	99 0b       	sbc	r25, r25
    1294:	91 95       	neg	r25
    1296:	80 6a       	ori	r24, 0xA0	; 160
    1298:	0e 94 a7 09 	call	0x134e	; 0x134e <I2C_sendData>

    I2C_sendData((uint8)(address));
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	0e 94 a7 09 	call	0x134e	; 0x134e <I2C_sendData>

	I2C_start();
    12a2:	0e 94 97 09 	call	0x132e	; 0x132e <I2C_start>

	I2C_sendData((uint8)((0xA0) | ((address & 0x0700)>>7) | 1));
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	9a 81       	ldd	r25, Y+2	; 0x02
    12aa:	80 70       	andi	r24, 0x00	; 0
    12ac:	97 70       	andi	r25, 0x07	; 7
    12ae:	88 0f       	add	r24, r24
    12b0:	89 2f       	mov	r24, r25
    12b2:	88 1f       	adc	r24, r24
    12b4:	99 0b       	sbc	r25, r25
    12b6:	91 95       	neg	r25
    12b8:	81 6a       	ori	r24, 0xA1	; 161
    12ba:	0e 94 a7 09 	call	0x134e	; 0x134e <I2C_sendData>

	*data = I2C_receiveData(NACK /*,data*/);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 be 09 	call	0x137c	; 0x137c <I2C_receiveData>
    12c4:	eb 81       	ldd	r30, Y+3	; 0x03
    12c6:	fc 81       	ldd	r31, Y+4	; 0x04
    12c8:	80 83       	st	Z, r24

    I2C_stop();
    12ca:	0e 94 f6 09 	call	0x13ec	; 0x13ec <I2C_stop>


}
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <I2C_init>:
 *      Author: Mostafa
 */

#include "I2C.h"

void I2C_init(const I2C_configType * I2C_Config_Ptr){
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <I2C_init+0x6>
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	89 83       	std	Y+1, r24	; 0x01



	TWBR = I2C_Config_Ptr->bitRate;   // set the bit rate
    12ea:	a0 e2       	ldi	r26, 0x20	; 32
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e9 81       	ldd	r30, Y+1	; 0x01
    12f0:	fa 81       	ldd	r31, Y+2	; 0x02
    12f2:	81 81       	ldd	r24, Z+1	; 0x01
    12f4:	8c 93       	st	X, r24

	TWSR = I2C_Config_Ptr->prescaler;     // TWI Bit Rate Prescaler
    12f6:	a1 e2       	ldi	r26, 0x21	; 33
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e9 81       	ldd	r30, Y+1	; 0x01
    12fc:	fa 81       	ldd	r31, Y+2	; 0x02
    12fe:	80 81       	ld	r24, Z
    1300:	8c 93       	st	X, r24

	TWAR = I2C_Config_Ptr->slaveModeAddress;  // Slave mode address
    1302:	a2 e2       	ldi	r26, 0x22	; 34
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e9 81       	ldd	r30, Y+1	; 0x01
    1308:	fa 81       	ldd	r31, Y+2	; 0x02
    130a:	82 81       	ldd	r24, Z+2	; 0x02
    130c:	8c 93       	st	X, r24

	TWCR = (1<<TWEN);    // enable ack and enable the module
    130e:	e6 e5       	ldi	r30, 0x56	; 86
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	84 e0       	ldi	r24, 0x04	; 4
    1314:	80 83       	st	Z, r24

	PORTC |= (1<<PC0)|(1<<PC1);  // activate internal pull up on
    1316:	a5 e3       	ldi	r26, 0x35	; 53
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e5 e3       	ldi	r30, 0x35	; 53
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	83 60       	ori	r24, 0x03	; 3
    1322:	8c 93       	st	X, r24


}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <I2C_start>:

void I2C_start(void){
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send START condition
    1336:	e6 e5       	ldi	r30, 0x56	; 86
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	84 ea       	ldi	r24, 0xA4	; 164
    133c:	80 83       	st	Z, r24

	/*Wait for TWINT Flag set. This indicates that the START condition has been transmitted */
	while (BIT_IS_CLEAR(TWCR,TWINT));
    133e:	e6 e5       	ldi	r30, 0x56	; 86
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	88 23       	and	r24, r24
    1346:	dc f7       	brge	.-10     	; 0x133e <I2C_start+0x10>


}
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <I2C_sendData>:

void I2C_sendData(uint8 data){
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	0f 92       	push	r0
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	89 83       	std	Y+1, r24	; 0x01


	TWDR = data;
    135a:	e3 e2       	ldi	r30, 0x23	; 35
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	80 83       	st	Z, r24

	TWCR = (1<<TWINT) | (1<<TWEN);
    1362:	e6 e5       	ldi	r30, 0x56	; 86
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	84 e8       	ldi	r24, 0x84	; 132
    1368:	80 83       	st	Z, r24

	/*Wait for TWINT Flag set. This indicates that the data has been transmitted
	 * and ACK/NACK has been received
	 */
	while (BIT_IS_CLEAR(TWCR,TWINT));
    136a:	e6 e5       	ldi	r30, 0x56	; 86
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	88 23       	and	r24, r24
    1372:	dc f7       	brge	.-10     	; 0x136a <I2C_sendData+0x1c>


}
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <I2C_receiveData>:

uint8 I2C_receiveData(I2C_ACKorNACK ack/*,uint8 *data*/){
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <I2C_receiveData+0x6>
    1382:	0f 92       	push	r0
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	89 83       	std	Y+1, r24	; 0x01



	/*select receive with ACK or NACK based on user selection*/
	switch (ack){
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	3b 83       	std	Y+3, r19	; 0x03
    1392:	2a 83       	std	Y+2, r18	; 0x02
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	9b 81       	ldd	r25, Y+3	; 0x03
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	31 f0       	breq	.+12     	; 0x13a8 <I2C_receiveData+0x2c>
    139c:	2a 81       	ldd	r18, Y+2	; 0x02
    139e:	3b 81       	ldd	r19, Y+3	; 0x03
    13a0:	21 30       	cpi	r18, 0x01	; 1
    13a2:	31 05       	cpc	r19, r1
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <I2C_receiveData+0x36>
    13a6:	09 c0       	rjmp	.+18     	; 0x13ba <I2C_receiveData+0x3e>
		case NACK :
			TWCR = (1 << TWINT) | (1 << TWEN);
    13a8:	e6 e5       	ldi	r30, 0x56	; 86
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	84 e8       	ldi	r24, 0x84	; 132
    13ae:	80 83       	st	Z, r24
    13b0:	04 c0       	rjmp	.+8      	; 0x13ba <I2C_receiveData+0x3e>
			break;
		case ACK :

			TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    13b2:	e6 e5       	ldi	r30, 0x56	; 86
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	84 ec       	ldi	r24, 0xC4	; 196
    13b8:	80 83       	st	Z, r24
			break;
	}

    /* Wait until data received successfully */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    13ba:	e6 e5       	ldi	r30, 0x56	; 86
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	88 23       	and	r24, r24
    13c2:	dc f7       	brge	.-10     	; 0x13ba <I2C_receiveData+0x3e>

    /* Read Data */
  //  *data = TWDR;
    return TWDR;
    13c4:	e3 e2       	ldi	r30, 0x23	; 35
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z

}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <I2C_getStatus>:

uint8 I2C_getStatus(void){
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62

	/* status bits are the MS 5 bits , we have to mask the prescaler bits */
    return (TWSR & 0xF8);
    13de:	e1 e2       	ldi	r30, 0x21	; 33
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	88 7f       	andi	r24, 0xF8	; 248
}
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <I2C_stop>:


void I2C_stop(void){
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    13f4:	e6 e5       	ldi	r30, 0x56	; 86
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	84 e9       	ldi	r24, 0x94	; 148
    13fa:	80 83       	st	Z, r24

}
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <I2C_MTR_Seq>:



uint8 I2C_MTR_Seq(uint8 *data,uint8 SLA,I2C_RW R_W){
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	2f 97       	sbiw	r28, 0x0f	; 15
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	9c 83       	std	Y+4, r25	; 0x04
    1418:	8b 83       	std	Y+3, r24	; 0x03
    141a:	6d 83       	std	Y+5, r22	; 0x05
    141c:	4e 83       	std	Y+6, r20	; 0x06

	uint8 SLA_R = (SLA<<1) |(0x01);
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	81 60       	ori	r24, 0x01	; 1
    142a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 SLA_W =(SLA<<1) & (0xFE) ;
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	89 83       	std	Y+1, r24	; 0x01

	/* Start bit */
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1438:	e6 e5       	ldi	r30, 0x56	; 86
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	84 ea       	ldi	r24, 0xA4	; 164
    143e:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));
    1440:	e6 e5       	ldi	r30, 0x56	; 86
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	88 23       	and	r24, r24
    1448:	dc f7       	brge	.-10     	; 0x1440 <I2C_MTR_Seq+0x3e>
	if ((TWSR & 0xF8) != START){
    144a:	e1 e2       	ldi	r30, 0x21	; 33
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	88 7f       	andi	r24, 0xF8	; 248
    1456:	90 70       	andi	r25, 0x00	; 0
    1458:	88 30       	cpi	r24, 0x08	; 8
    145a:	91 05       	cpc	r25, r1
    145c:	19 f0       	breq	.+6      	; 0x1464 <I2C_MTR_Seq+0x62>

	return 1;
    145e:	21 e0       	ldi	r18, 0x01	; 1
    1460:	2f 87       	std	Y+15, r18	; 0x0f
    1462:	b0 c0       	rjmp	.+352    	; 0x15c4 <I2C_MTR_Seq+0x1c2>

	}

	/*send the address to the bus*/
	switch(R_W){
    1464:	8e 81       	ldd	r24, Y+6	; 0x06
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	3e 87       	std	Y+14, r19	; 0x0e
    146c:	2d 87       	std	Y+13, r18	; 0x0d
    146e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1470:	9e 85       	ldd	r25, Y+14	; 0x0e
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	51 f0       	breq	.+20     	; 0x148a <I2C_MTR_Seq+0x88>
    1476:	2d 85       	ldd	r18, Y+13	; 0x0d
    1478:	3e 85       	ldd	r19, Y+14	; 0x0e
    147a:	21 30       	cpi	r18, 0x01	; 1
    147c:	31 05       	cpc	r19, r1
    147e:	49 f4       	brne	.+18     	; 0x1492 <I2C_MTR_Seq+0x90>
	case R:
		TWDR = SLA_R;
    1480:	e3 e2       	ldi	r30, 0x23	; 35
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	80 83       	st	Z, r24
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <I2C_MTR_Seq+0x90>
		break;
	case W:
		TWDR = SLA_W;
    148a:	e3 e2       	ldi	r30, 0x23	; 35
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	80 83       	st	Z, r24
		break;
	}

	TWCR = (1<<TWINT) | (1<<TWEN);
    1492:	e6 e5       	ldi	r30, 0x56	; 86
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	84 e8       	ldi	r24, 0x84	; 132
    1498:	80 83       	st	Z, r24

	while (!(TWCR & (1<<TWINT)));
    149a:	e6 e5       	ldi	r30, 0x56	; 86
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	88 23       	and	r24, r24
    14a2:	dc f7       	brge	.-10     	; 0x149a <I2C_MTR_Seq+0x98>

	switch(R_W){
    14a4:	8e 81       	ldd	r24, Y+6	; 0x06
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	3c 87       	std	Y+12, r19	; 0x0c
    14ac:	2b 87       	std	Y+11, r18	; 0x0b
    14ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	91 f0       	breq	.+36     	; 0x14da <I2C_MTR_Seq+0xd8>
    14b6:	2b 85       	ldd	r18, Y+11	; 0x0b
    14b8:	3c 85       	ldd	r19, Y+12	; 0x0c
    14ba:	21 30       	cpi	r18, 0x01	; 1
    14bc:	31 05       	cpc	r19, r1
    14be:	d1 f4       	brne	.+52     	; 0x14f4 <I2C_MTR_Seq+0xf2>
	case R:
		if ((TWSR & 0xF8) != MR_SLA_R_ACK){
    14c0:	e1 e2       	ldi	r30, 0x21	; 33
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	88 7f       	andi	r24, 0xF8	; 248
    14cc:	90 70       	andi	r25, 0x00	; 0
    14ce:	80 34       	cpi	r24, 0x40	; 64
    14d0:	91 05       	cpc	r25, r1
    14d2:	81 f0       	breq	.+32     	; 0x14f4 <I2C_MTR_Seq+0xf2>
			return 1;
    14d4:	31 e0       	ldi	r19, 0x01	; 1
    14d6:	3f 87       	std	Y+15, r19	; 0x0f
    14d8:	75 c0       	rjmp	.+234    	; 0x15c4 <I2C_MTR_Seq+0x1c2>
		}

		break;
	case W:
		if ((TWSR & 0xF8) != MT_SLA_W_ACK){
    14da:	e1 e2       	ldi	r30, 0x21	; 33
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	88 7f       	andi	r24, 0xF8	; 248
    14e6:	90 70       	andi	r25, 0x00	; 0
    14e8:	88 31       	cpi	r24, 0x18	; 24
    14ea:	91 05       	cpc	r25, r1
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <I2C_MTR_Seq+0xf2>
			return 1;
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	8f 87       	std	Y+15, r24	; 0x0f
    14f2:	68 c0       	rjmp	.+208    	; 0x15c4 <I2C_MTR_Seq+0x1c2>
		break;
	}


	/* send or get  the data on the bus */
	switch(R_W){
    14f4:	8e 81       	ldd	r24, Y+6	; 0x06
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	3a 87       	std	Y+10, r19	; 0x0a
    14fc:	29 87       	std	Y+9, r18	; 0x09
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	61 f0       	breq	.+24     	; 0x151e <I2C_MTR_Seq+0x11c>
    1506:	29 85       	ldd	r18, Y+9	; 0x09
    1508:	3a 85       	ldd	r19, Y+10	; 0x0a
    150a:	21 30       	cpi	r18, 0x01	; 1
    150c:	31 05       	cpc	r19, r1
    150e:	69 f4       	brne	.+26     	; 0x152a <I2C_MTR_Seq+0x128>
	case R:
		*data = TWDR;
    1510:	e3 e2       	ldi	r30, 0x23	; 35
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	eb 81       	ldd	r30, Y+3	; 0x03
    1518:	fc 81       	ldd	r31, Y+4	; 0x04
    151a:	80 83       	st	Z, r24
    151c:	06 c0       	rjmp	.+12     	; 0x152a <I2C_MTR_Seq+0x128>
		break;
	case W:
		TWDR = *data;
    151e:	e3 e2       	ldi	r30, 0x23	; 35
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	ab 81       	ldd	r26, Y+3	; 0x03
    1524:	bc 81       	ldd	r27, Y+4	; 0x04
    1526:	8c 91       	ld	r24, X
    1528:	80 83       	st	Z, r24
		break;
	}

	TWCR = (1<<TWINT) | (1<<TWEN);
    152a:	e6 e5       	ldi	r30, 0x56	; 86
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	84 e8       	ldi	r24, 0x84	; 132
    1530:	80 83       	st	Z, r24

	while (!(TWCR & (1<<TWINT)));
    1532:	e6 e5       	ldi	r30, 0x56	; 86
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	88 23       	and	r24, r24
    153a:	dc f7       	brge	.-10     	; 0x1532 <I2C_MTR_Seq+0x130>

	switch(R_W){
    153c:	8e 81       	ldd	r24, Y+6	; 0x06
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	38 87       	std	Y+8, r19	; 0x08
    1544:	2f 83       	std	Y+7, r18	; 0x07
    1546:	8f 81       	ldd	r24, Y+7	; 0x07
    1548:	98 85       	ldd	r25, Y+8	; 0x08
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	91 f0       	breq	.+36     	; 0x1572 <I2C_MTR_Seq+0x170>
    154e:	2f 81       	ldd	r18, Y+7	; 0x07
    1550:	38 85       	ldd	r19, Y+8	; 0x08
    1552:	21 30       	cpi	r18, 0x01	; 1
    1554:	31 05       	cpc	r19, r1
    1556:	d1 f4       	brne	.+52     	; 0x158c <I2C_MTR_Seq+0x18a>
	case R:
		if ((TWSR & 0xF8) != MR_DATA_ACK){
    1558:	e1 e2       	ldi	r30, 0x21	; 33
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	88 2f       	mov	r24, r24
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	88 7f       	andi	r24, 0xF8	; 248
    1564:	90 70       	andi	r25, 0x00	; 0
    1566:	80 35       	cpi	r24, 0x50	; 80
    1568:	91 05       	cpc	r25, r1
    156a:	81 f0       	breq	.+32     	; 0x158c <I2C_MTR_Seq+0x18a>
			return 1;
    156c:	31 e0       	ldi	r19, 0x01	; 1
    156e:	3f 87       	std	Y+15, r19	; 0x0f
    1570:	29 c0       	rjmp	.+82     	; 0x15c4 <I2C_MTR_Seq+0x1c2>
		}
		break;
	case W:
		if ((TWSR & 0xF8) != MT_DATA_ACK){
    1572:	e1 e2       	ldi	r30, 0x21	; 33
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	88 7f       	andi	r24, 0xF8	; 248
    157e:	90 70       	andi	r25, 0x00	; 0
    1580:	88 32       	cpi	r24, 0x28	; 40
    1582:	91 05       	cpc	r25, r1
    1584:	19 f0       	breq	.+6      	; 0x158c <I2C_MTR_Seq+0x18a>
			return 1;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	8f 87       	std	Y+15, r24	; 0x0f
    158a:	1c c0       	rjmp	.+56     	; 0x15c4 <I2C_MTR_Seq+0x1c2>
		}
		break;
	}

	switch(R_W){
    158c:	8e 81       	ldd	r24, Y+6	; 0x06
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	91 05       	cpc	r25, r1
    1596:	89 f4       	brne	.+34     	; 0x15ba <I2C_MTR_Seq+0x1b8>
	case R:
		TWCR = (1 << TWINT) | (1 << TWEN);
    1598:	e6 e5       	ldi	r30, 0x56	; 86
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	84 e8       	ldi	r24, 0x84	; 132
    159e:	80 83       	st	Z, r24
		if ((TWSR & 0xF8) != MR_DATA_NACK){
    15a0:	e1 e2       	ldi	r30, 0x21	; 33
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	88 7f       	andi	r24, 0xF8	; 248
    15ac:	90 70       	andi	r25, 0x00	; 0
    15ae:	88 35       	cpi	r24, 0x58	; 88
    15b0:	91 05       	cpc	r25, r1
    15b2:	19 f0       	breq	.+6      	; 0x15ba <I2C_MTR_Seq+0x1b8>
			return 1;
    15b4:	91 e0       	ldi	r25, 0x01	; 1
    15b6:	9f 87       	std	Y+15, r25	; 0x0f
    15b8:	05 c0       	rjmp	.+10     	; 0x15c4 <I2C_MTR_Seq+0x1c2>
		break;

	}

	/*stop bit*/
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    15ba:	e6 e5       	ldi	r30, 0x56	; 86
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	84 e9       	ldi	r24, 0x94	; 148
    15c0:	80 83       	st	Z, r24


	return 0;
    15c2:	1f 86       	std	Y+15, r1	; 0x0f
    15c4:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    15c6:	2f 96       	adiw	r28, 0x0f	; 15
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <main>:
#include "motor.h"

#include "Main_CNTRL.h"


int main(void){
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	ce 59       	subi	r28, 0x9E	; 158
    15e6:	d0 40       	sbci	r29, 0x00	; 0
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61

	/*UART configuration*/
	/*parity type ,number of stop bits , data length , buad rate*/
	UART_configType UART_config ={Even_Parity,_2bit,_8bit,115200};
    15f2:	ce 01       	movw	r24, r28
    15f4:	8d 58       	subi	r24, 0x8D	; 141
    15f6:	9f 4f       	sbci	r25, 0xFF	; 255
    15f8:	c0 57       	subi	r28, 0x70	; 112
    15fa:	df 4f       	sbci	r29, 0xFF	; 255
    15fc:	99 83       	std	Y+1, r25	; 0x01
    15fe:	88 83       	st	Y, r24
    1600:	c0 59       	subi	r28, 0x90	; 144
    1602:	d0 40       	sbci	r29, 0x00	; 0
    1604:	22 e7       	ldi	r18, 0x72	; 114
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	ce 56       	subi	r28, 0x6E	; 110
    160a:	df 4f       	sbci	r29, 0xFF	; 255
    160c:	39 83       	std	Y+1, r19	; 0x01
    160e:	28 83       	st	Y, r18
    1610:	c2 59       	subi	r28, 0x92	; 146
    1612:	d0 40       	sbci	r29, 0x00	; 0
    1614:	37 e0       	ldi	r19, 0x07	; 7
    1616:	cc 56       	subi	r28, 0x6C	; 108
    1618:	df 4f       	sbci	r29, 0xFF	; 255
    161a:	38 83       	st	Y, r19
    161c:	c4 59       	subi	r28, 0x94	; 148
    161e:	d0 40       	sbci	r29, 0x00	; 0
    1620:	ce 56       	subi	r28, 0x6E	; 110
    1622:	df 4f       	sbci	r29, 0xFF	; 255
    1624:	a8 81       	ld	r26, Y
    1626:	b9 81       	ldd	r27, Y+1	; 0x01
    1628:	c2 59       	subi	r28, 0x92	; 146
    162a:	d0 40       	sbci	r29, 0x00	; 0
    162c:	0c 90       	ld	r0, X
    162e:	ce 56       	subi	r28, 0x6E	; 110
    1630:	df 4f       	sbci	r29, 0xFF	; 255
    1632:	e8 81       	ld	r30, Y
    1634:	f9 81       	ldd	r31, Y+1	; 0x01
    1636:	c2 59       	subi	r28, 0x92	; 146
    1638:	d0 40       	sbci	r29, 0x00	; 0
    163a:	31 96       	adiw	r30, 0x01	; 1
    163c:	ce 56       	subi	r28, 0x6E	; 110
    163e:	df 4f       	sbci	r29, 0xFF	; 255
    1640:	f9 83       	std	Y+1, r31	; 0x01
    1642:	e8 83       	st	Y, r30
    1644:	c2 59       	subi	r28, 0x92	; 146
    1646:	d0 40       	sbci	r29, 0x00	; 0
    1648:	c0 57       	subi	r28, 0x70	; 112
    164a:	df 4f       	sbci	r29, 0xFF	; 255
    164c:	a8 81       	ld	r26, Y
    164e:	b9 81       	ldd	r27, Y+1	; 0x01
    1650:	c0 59       	subi	r28, 0x90	; 144
    1652:	d0 40       	sbci	r29, 0x00	; 0
    1654:	0c 92       	st	X, r0
    1656:	c0 57       	subi	r28, 0x70	; 112
    1658:	df 4f       	sbci	r29, 0xFF	; 255
    165a:	e8 81       	ld	r30, Y
    165c:	f9 81       	ldd	r31, Y+1	; 0x01
    165e:	c0 59       	subi	r28, 0x90	; 144
    1660:	d0 40       	sbci	r29, 0x00	; 0
    1662:	31 96       	adiw	r30, 0x01	; 1
    1664:	c0 57       	subi	r28, 0x70	; 112
    1666:	df 4f       	sbci	r29, 0xFF	; 255
    1668:	f9 83       	std	Y+1, r31	; 0x01
    166a:	e8 83       	st	Y, r30
    166c:	c0 59       	subi	r28, 0x90	; 144
    166e:	d0 40       	sbci	r29, 0x00	; 0
    1670:	cc 56       	subi	r28, 0x6C	; 108
    1672:	df 4f       	sbci	r29, 0xFF	; 255
    1674:	f8 81       	ld	r31, Y
    1676:	c4 59       	subi	r28, 0x94	; 148
    1678:	d0 40       	sbci	r29, 0x00	; 0
    167a:	f1 50       	subi	r31, 0x01	; 1
    167c:	cc 56       	subi	r28, 0x6C	; 108
    167e:	df 4f       	sbci	r29, 0xFF	; 255
    1680:	f8 83       	st	Y, r31
    1682:	c4 59       	subi	r28, 0x94	; 148
    1684:	d0 40       	sbci	r29, 0x00	; 0
    1686:	cc 56       	subi	r28, 0x6C	; 108
    1688:	df 4f       	sbci	r29, 0xFF	; 255
    168a:	28 81       	ld	r18, Y
    168c:	c4 59       	subi	r28, 0x94	; 148
    168e:	d0 40       	sbci	r29, 0x00	; 0
    1690:	22 23       	and	r18, r18
    1692:	31 f6       	brne	.-116    	; 0x1620 <main+0x48>
	UART_init(&UART_config);
    1694:	ce 01       	movw	r24, r28
    1696:	8d 58       	subi	r24, 0x8D	; 141
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <UART_init>

	/*I2C configuration*/
	/* prescaler , bit rate register , slave mode address*/
	I2C_configType I2C_config = {_1_I2C,2,0x05};   // for the EEPROM
    169e:	ce 01       	movw	r24, r28
    16a0:	86 58       	subi	r24, 0x86	; 134
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	cb 56       	subi	r28, 0x6B	; 107
    16a6:	df 4f       	sbci	r29, 0xFF	; 255
    16a8:	99 83       	std	Y+1, r25	; 0x01
    16aa:	88 83       	st	Y, r24
    16ac:	c5 59       	subi	r28, 0x95	; 149
    16ae:	d0 40       	sbci	r29, 0x00	; 0
    16b0:	8f e6       	ldi	r24, 0x6F	; 111
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	c9 56       	subi	r28, 0x69	; 105
    16b6:	df 4f       	sbci	r29, 0xFF	; 255
    16b8:	99 83       	std	Y+1, r25	; 0x01
    16ba:	88 83       	st	Y, r24
    16bc:	c7 59       	subi	r28, 0x97	; 151
    16be:	d0 40       	sbci	r29, 0x00	; 0
    16c0:	93 e0       	ldi	r25, 0x03	; 3
    16c2:	c7 56       	subi	r28, 0x67	; 103
    16c4:	df 4f       	sbci	r29, 0xFF	; 255
    16c6:	98 83       	st	Y, r25
    16c8:	c9 59       	subi	r28, 0x99	; 153
    16ca:	d0 40       	sbci	r29, 0x00	; 0
    16cc:	c9 56       	subi	r28, 0x69	; 105
    16ce:	df 4f       	sbci	r29, 0xFF	; 255
    16d0:	a8 81       	ld	r26, Y
    16d2:	b9 81       	ldd	r27, Y+1	; 0x01
    16d4:	c7 59       	subi	r28, 0x97	; 151
    16d6:	d0 40       	sbci	r29, 0x00	; 0
    16d8:	0c 90       	ld	r0, X
    16da:	c9 56       	subi	r28, 0x69	; 105
    16dc:	df 4f       	sbci	r29, 0xFF	; 255
    16de:	e8 81       	ld	r30, Y
    16e0:	f9 81       	ldd	r31, Y+1	; 0x01
    16e2:	c7 59       	subi	r28, 0x97	; 151
    16e4:	d0 40       	sbci	r29, 0x00	; 0
    16e6:	31 96       	adiw	r30, 0x01	; 1
    16e8:	c9 56       	subi	r28, 0x69	; 105
    16ea:	df 4f       	sbci	r29, 0xFF	; 255
    16ec:	f9 83       	std	Y+1, r31	; 0x01
    16ee:	e8 83       	st	Y, r30
    16f0:	c7 59       	subi	r28, 0x97	; 151
    16f2:	d0 40       	sbci	r29, 0x00	; 0
    16f4:	cb 56       	subi	r28, 0x6B	; 107
    16f6:	df 4f       	sbci	r29, 0xFF	; 255
    16f8:	a8 81       	ld	r26, Y
    16fa:	b9 81       	ldd	r27, Y+1	; 0x01
    16fc:	c5 59       	subi	r28, 0x95	; 149
    16fe:	d0 40       	sbci	r29, 0x00	; 0
    1700:	0c 92       	st	X, r0
    1702:	cb 56       	subi	r28, 0x6B	; 107
    1704:	df 4f       	sbci	r29, 0xFF	; 255
    1706:	e8 81       	ld	r30, Y
    1708:	f9 81       	ldd	r31, Y+1	; 0x01
    170a:	c5 59       	subi	r28, 0x95	; 149
    170c:	d0 40       	sbci	r29, 0x00	; 0
    170e:	31 96       	adiw	r30, 0x01	; 1
    1710:	cb 56       	subi	r28, 0x6B	; 107
    1712:	df 4f       	sbci	r29, 0xFF	; 255
    1714:	f9 83       	std	Y+1, r31	; 0x01
    1716:	e8 83       	st	Y, r30
    1718:	c5 59       	subi	r28, 0x95	; 149
    171a:	d0 40       	sbci	r29, 0x00	; 0
    171c:	c7 56       	subi	r28, 0x67	; 103
    171e:	df 4f       	sbci	r29, 0xFF	; 255
    1720:	f8 81       	ld	r31, Y
    1722:	c9 59       	subi	r28, 0x99	; 153
    1724:	d0 40       	sbci	r29, 0x00	; 0
    1726:	f1 50       	subi	r31, 0x01	; 1
    1728:	c7 56       	subi	r28, 0x67	; 103
    172a:	df 4f       	sbci	r29, 0xFF	; 255
    172c:	f8 83       	st	Y, r31
    172e:	c9 59       	subi	r28, 0x99	; 153
    1730:	d0 40       	sbci	r29, 0x00	; 0
    1732:	c7 56       	subi	r28, 0x67	; 103
    1734:	df 4f       	sbci	r29, 0xFF	; 255
    1736:	28 81       	ld	r18, Y
    1738:	c9 59       	subi	r28, 0x99	; 153
    173a:	d0 40       	sbci	r29, 0x00	; 0
    173c:	22 23       	and	r18, r18
    173e:	31 f6       	brne	.-116    	; 0x16cc <main+0xf4>
	I2C_init(&I2C_config);
    1740:	ce 01       	movw	r24, r28
    1742:	86 58       	subi	r24, 0x86	; 134
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	0e 94 6e 09 	call	0x12dc	; 0x12dc <I2C_init>


	/*timers configuration*/
	/*which timer , in which mode , its prescaler , its compare value , its initial value*/
	TIMER_configType TIMER_config = {TIMER_1,COMPARE_MATCH,_256_TIMER,31250,0};  // interrupt every 1s
    174a:	ce 01       	movw	r24, r28
    174c:	83 58       	subi	r24, 0x83	; 131
    174e:	9f 4f       	sbci	r25, 0xFF	; 255
    1750:	c6 56       	subi	r28, 0x66	; 102
    1752:	df 4f       	sbci	r29, 0xFF	; 255
    1754:	99 83       	std	Y+1, r25	; 0x01
    1756:	88 83       	st	Y, r24
    1758:	ca 59       	subi	r28, 0x9A	; 154
    175a:	d0 40       	sbci	r29, 0x00	; 0
    175c:	88 e6       	ldi	r24, 0x68	; 104
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	c4 56       	subi	r28, 0x64	; 100
    1762:	df 4f       	sbci	r29, 0xFF	; 255
    1764:	99 83       	std	Y+1, r25	; 0x01
    1766:	88 83       	st	Y, r24
    1768:	cc 59       	subi	r28, 0x9C	; 156
    176a:	d0 40       	sbci	r29, 0x00	; 0
    176c:	97 e0       	ldi	r25, 0x07	; 7
    176e:	c2 56       	subi	r28, 0x62	; 98
    1770:	df 4f       	sbci	r29, 0xFF	; 255
    1772:	98 83       	st	Y, r25
    1774:	ce 59       	subi	r28, 0x9E	; 158
    1776:	d0 40       	sbci	r29, 0x00	; 0
    1778:	c4 56       	subi	r28, 0x64	; 100
    177a:	df 4f       	sbci	r29, 0xFF	; 255
    177c:	a8 81       	ld	r26, Y
    177e:	b9 81       	ldd	r27, Y+1	; 0x01
    1780:	cc 59       	subi	r28, 0x9C	; 156
    1782:	d0 40       	sbci	r29, 0x00	; 0
    1784:	0c 90       	ld	r0, X
    1786:	c4 56       	subi	r28, 0x64	; 100
    1788:	df 4f       	sbci	r29, 0xFF	; 255
    178a:	e8 81       	ld	r30, Y
    178c:	f9 81       	ldd	r31, Y+1	; 0x01
    178e:	cc 59       	subi	r28, 0x9C	; 156
    1790:	d0 40       	sbci	r29, 0x00	; 0
    1792:	31 96       	adiw	r30, 0x01	; 1
    1794:	c4 56       	subi	r28, 0x64	; 100
    1796:	df 4f       	sbci	r29, 0xFF	; 255
    1798:	f9 83       	std	Y+1, r31	; 0x01
    179a:	e8 83       	st	Y, r30
    179c:	cc 59       	subi	r28, 0x9C	; 156
    179e:	d0 40       	sbci	r29, 0x00	; 0
    17a0:	c6 56       	subi	r28, 0x66	; 102
    17a2:	df 4f       	sbci	r29, 0xFF	; 255
    17a4:	a8 81       	ld	r26, Y
    17a6:	b9 81       	ldd	r27, Y+1	; 0x01
    17a8:	ca 59       	subi	r28, 0x9A	; 154
    17aa:	d0 40       	sbci	r29, 0x00	; 0
    17ac:	0c 92       	st	X, r0
    17ae:	c6 56       	subi	r28, 0x66	; 102
    17b0:	df 4f       	sbci	r29, 0xFF	; 255
    17b2:	e8 81       	ld	r30, Y
    17b4:	f9 81       	ldd	r31, Y+1	; 0x01
    17b6:	ca 59       	subi	r28, 0x9A	; 154
    17b8:	d0 40       	sbci	r29, 0x00	; 0
    17ba:	31 96       	adiw	r30, 0x01	; 1
    17bc:	c6 56       	subi	r28, 0x66	; 102
    17be:	df 4f       	sbci	r29, 0xFF	; 255
    17c0:	f9 83       	std	Y+1, r31	; 0x01
    17c2:	e8 83       	st	Y, r30
    17c4:	ca 59       	subi	r28, 0x9A	; 154
    17c6:	d0 40       	sbci	r29, 0x00	; 0
    17c8:	c2 56       	subi	r28, 0x62	; 98
    17ca:	df 4f       	sbci	r29, 0xFF	; 255
    17cc:	f8 81       	ld	r31, Y
    17ce:	ce 59       	subi	r28, 0x9E	; 158
    17d0:	d0 40       	sbci	r29, 0x00	; 0
    17d2:	f1 50       	subi	r31, 0x01	; 1
    17d4:	c2 56       	subi	r28, 0x62	; 98
    17d6:	df 4f       	sbci	r29, 0xFF	; 255
    17d8:	f8 83       	st	Y, r31
    17da:	ce 59       	subi	r28, 0x9E	; 158
    17dc:	d0 40       	sbci	r29, 0x00	; 0
    17de:	c2 56       	subi	r28, 0x62	; 98
    17e0:	df 4f       	sbci	r29, 0xFF	; 255
    17e2:	28 81       	ld	r18, Y
    17e4:	ce 59       	subi	r28, 0x9E	; 158
    17e6:	d0 40       	sbci	r29, 0x00	; 0
    17e8:	22 23       	and	r18, r18
    17ea:	31 f6       	brne	.-116    	; 0x1778 <main+0x1a0>
	Timers_INIT(&TIMER_config);
    17ec:	ce 01       	movw	r24, r28
    17ee:	83 58       	subi	r24, 0x83	; 131
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <Timers_INIT>

	/*stop the timer and clear the counter*/
	Timers_stop(TIMER_1);
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <Timers_stop>
	Timers_clearCounter(TIMER_1);
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Timers_clearCounter>

	/*enable global interrupts */
	SREG|=(1<<7);
    1802:	af e5       	ldi	r26, 0x5F	; 95
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	ef e5       	ldi	r30, 0x5F	; 95
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	80 68       	ori	r24, 0x80	; 128
    180e:	8c 93       	st	X, r24
	 * because at start it has garbage
	 * it must be zeroed at first in order to know if the user is new or old
	 * later we can store the EEPROM write cycles
	 *
	 * */
	for ( i = 0; i<PASSWORD_LENGTH;i++){
    1810:	fe 01       	movw	r30, r28
    1812:	ef 58       	subi	r30, 0x8F	; 143
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	10 82       	st	Z, r1
    1818:	c7 c0       	rjmp	.+398    	; 0x19a8 <main+0x3d0>

		EEPROM_write(PASSWORD_ADDRESS+i ,0);
    181a:	fe 01       	movw	r30, r28
    181c:	ef 58       	subi	r30, 0x8F	; 143
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	80 81       	ld	r24, Z
    1822:	88 2f       	mov	r24, r24
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	8f 5e       	subi	r24, 0xEF	; 239
    1828:	9c 4f       	sbci	r25, 0xFC	; 252
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	0e 94 11 09 	call	0x1222	; 0x1222 <EEPROM_write>
    1830:	fe 01       	movw	r30, r28
    1832:	e3 59       	subi	r30, 0x93	; 147
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	a0 e2       	ldi	r26, 0x20	; 32
    183c:	b1 e4       	ldi	r27, 0x41	; 65
    183e:	80 83       	st	Z, r24
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	a2 83       	std	Z+2, r26	; 0x02
    1844:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1846:	8e 01       	movw	r16, r28
    1848:	07 59       	subi	r16, 0x97	; 151
    184a:	1f 4f       	sbci	r17, 0xFF	; 255
    184c:	fe 01       	movw	r30, r28
    184e:	e3 59       	subi	r30, 0x93	; 147
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	60 81       	ld	r22, Z
    1854:	71 81       	ldd	r23, Z+1	; 0x01
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	93 81       	ldd	r25, Z+3	; 0x03
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	4a ef       	ldi	r20, 0xFA	; 250
    1860:	54 e4       	ldi	r21, 0x44	; 68
    1862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	f8 01       	movw	r30, r16
    186c:	80 83       	st	Z, r24
    186e:	91 83       	std	Z+1, r25	; 0x01
    1870:	a2 83       	std	Z+2, r26	; 0x02
    1872:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1874:	fe 01       	movw	r30, r28
    1876:	e7 59       	subi	r30, 0x97	; 151
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e8       	ldi	r20, 0x80	; 128
    1888:	5f e3       	ldi	r21, 0x3F	; 63
    188a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    188e:	88 23       	and	r24, r24
    1890:	44 f4       	brge	.+16     	; 0x18a2 <main+0x2ca>
		__ticks = 1;
    1892:	fe 01       	movw	r30, r28
    1894:	e9 59       	subi	r30, 0x99	; 153
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	91 83       	std	Z+1, r25	; 0x01
    189e:	80 83       	st	Z, r24
    18a0:	64 c0       	rjmp	.+200    	; 0x196a <main+0x392>
	else if (__tmp > 65535)
    18a2:	fe 01       	movw	r30, r28
    18a4:	e7 59       	subi	r30, 0x97	; 151
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	60 81       	ld	r22, Z
    18aa:	71 81       	ldd	r23, Z+1	; 0x01
    18ac:	82 81       	ldd	r24, Z+2	; 0x02
    18ae:	93 81       	ldd	r25, Z+3	; 0x03
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	3f ef       	ldi	r19, 0xFF	; 255
    18b4:	4f e7       	ldi	r20, 0x7F	; 127
    18b6:	57 e4       	ldi	r21, 0x47	; 71
    18b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18bc:	18 16       	cp	r1, r24
    18be:	0c f0       	brlt	.+2      	; 0x18c2 <main+0x2ea>
    18c0:	43 c0       	rjmp	.+134    	; 0x1948 <main+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c2:	fe 01       	movw	r30, r28
    18c4:	e3 59       	subi	r30, 0x93	; 147
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	60 81       	ld	r22, Z
    18ca:	71 81       	ldd	r23, Z+1	; 0x01
    18cc:	82 81       	ldd	r24, Z+2	; 0x02
    18ce:	93 81       	ldd	r25, Z+3	; 0x03
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e2       	ldi	r20, 0x20	; 32
    18d6:	51 e4       	ldi	r21, 0x41	; 65
    18d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8e 01       	movw	r16, r28
    18e2:	09 59       	subi	r16, 0x99	; 153
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	f8 01       	movw	r30, r16
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
    18f8:	1f c0       	rjmp	.+62     	; 0x1938 <main+0x360>
    18fa:	fe 01       	movw	r30, r28
    18fc:	eb 59       	subi	r30, 0x9B	; 155
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	88 ec       	ldi	r24, 0xC8	; 200
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1908:	fe 01       	movw	r30, r28
    190a:	eb 59       	subi	r30, 0x9B	; 155
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 81       	ld	r24, Z
    1910:	91 81       	ldd	r25, Z+1	; 0x01
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	f1 f7       	brne	.-4      	; 0x1912 <main+0x33a>
    1916:	fe 01       	movw	r30, r28
    1918:	eb 59       	subi	r30, 0x9B	; 155
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1920:	de 01       	movw	r26, r28
    1922:	a9 59       	subi	r26, 0x99	; 153
    1924:	bf 4f       	sbci	r27, 0xFF	; 255
    1926:	fe 01       	movw	r30, r28
    1928:	e9 59       	subi	r30, 0x99	; 153
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	80 81       	ld	r24, Z
    192e:	91 81       	ldd	r25, Z+1	; 0x01
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	11 96       	adiw	r26, 0x01	; 1
    1934:	9c 93       	st	X, r25
    1936:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	fe 01       	movw	r30, r28
    193a:	e9 59       	subi	r30, 0x99	; 153
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	80 81       	ld	r24, Z
    1940:	91 81       	ldd	r25, Z+1	; 0x01
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	d1 f6       	brne	.-76     	; 0x18fa <main+0x322>
    1946:	27 c0       	rjmp	.+78     	; 0x1996 <main+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1948:	8e 01       	movw	r16, r28
    194a:	09 59       	subi	r16, 0x99	; 153
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	fe 01       	movw	r30, r28
    1950:	e7 59       	subi	r30, 0x97	; 151
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	f8 01       	movw	r30, r16
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	80 83       	st	Z, r24
    196a:	de 01       	movw	r26, r28
    196c:	ad 59       	subi	r26, 0x9D	; 157
    196e:	bf 4f       	sbci	r27, 0xFF	; 255
    1970:	fe 01       	movw	r30, r28
    1972:	e9 59       	subi	r30, 0x99	; 153
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	8d 93       	st	X+, r24
    197c:	9c 93       	st	X, r25
    197e:	fe 01       	movw	r30, r28
    1980:	ed 59       	subi	r30, 0x9D	; 157
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 81       	ld	r24, Z
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <main+0x3b0>
    198c:	fe 01       	movw	r30, r28
    198e:	ed 59       	subi	r30, 0x9D	; 157
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	80 83       	st	Z, r24
	 * because at start it has garbage
	 * it must be zeroed at first in order to know if the user is new or old
	 * later we can store the EEPROM write cycles
	 *
	 * */
	for ( i = 0; i<PASSWORD_LENGTH;i++){
    1996:	de 01       	movw	r26, r28
    1998:	af 58       	subi	r26, 0x8F	; 143
    199a:	bf 4f       	sbci	r27, 0xFF	; 255
    199c:	fe 01       	movw	r30, r28
    199e:	ef 58       	subi	r30, 0x8F	; 143
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	80 81       	ld	r24, Z
    19a4:	8f 5f       	subi	r24, 0xFF	; 255
    19a6:	8c 93       	st	X, r24
    19a8:	fe 01       	movw	r30, r28
    19aa:	ef 58       	subi	r30, 0x8F	; 143
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	80 81       	ld	r24, Z
    19b0:	85 30       	cpi	r24, 0x05	; 5
    19b2:	08 f4       	brcc	.+2      	; 0x19b6 <main+0x3de>
    19b4:	32 cf       	rjmp	.-412    	; 0x181a <main+0x242>
		_delay_ms(10);

	}

	/*place holders for passwords stored in the EEPROM and the one come from the user*/
	uint8 EEPROMpassword[PASSWORD_LENGTH] ={0};
    19b6:	ce 01       	movw	r24, r28
    19b8:	8c 57       	subi	r24, 0x7C	; 124
    19ba:	9f 4f       	sbci	r25, 0xFF	; 255
    19bc:	25 e0       	ldi	r18, 0x05	; 5
    19be:	fc 01       	movw	r30, r24
    19c0:	df 01       	movw	r26, r30
    19c2:	32 2f       	mov	r19, r18
    19c4:	1d 92       	st	X+, r1
    19c6:	3a 95       	dec	r19
    19c8:	e9 f7       	brne	.-6      	; 0x19c4 <main+0x3ec>
	uint8 userPassword[PASSWORD_LENGTH] ={0};
    19ca:	ce 01       	movw	r24, r28
    19cc:	87 57       	subi	r24, 0x77	; 119
    19ce:	9f 4f       	sbci	r25, 0xFF	; 255
    19d0:	25 e0       	ldi	r18, 0x05	; 5
    19d2:	fc 01       	movw	r30, r24
    19d4:	df 01       	movw	r26, r30
    19d6:	32 2f       	mov	r19, r18
    19d8:	1d 92       	st	X+, r1
    19da:	3a 95       	dec	r19
    19dc:	e9 f7       	brne	.-6      	; 0x19d8 <main+0x400>
    19de:	fe 01       	movw	r30, r28
    19e0:	e1 5a       	subi	r30, 0xA1	; 161
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e4       	ldi	r25, 0x40	; 64
    19e8:	ac e9       	ldi	r26, 0x9C	; 156
    19ea:	b5 e4       	ldi	r27, 0x45	; 69
    19ec:	80 83       	st	Z, r24
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	a2 83       	std	Z+2, r26	; 0x02
    19f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	8e 01       	movw	r16, r28
    19f6:	05 5a       	subi	r16, 0xA5	; 165
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	fe 01       	movw	r30, r28
    19fc:	e1 5a       	subi	r30, 0xA1	; 161
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	4a ef       	ldi	r20, 0xFA	; 250
    1a0e:	54 e4       	ldi	r21, 0x44	; 68
    1a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	f8 01       	movw	r30, r16
    1a1a:	80 83       	st	Z, r24
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	a2 83       	std	Z+2, r26	; 0x02
    1a20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a22:	fe 01       	movw	r30, r28
    1a24:	e5 5a       	subi	r30, 0xA5	; 165
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	44 f4       	brge	.+16     	; 0x1a50 <main+0x478>
		__ticks = 1;
    1a40:	fe 01       	movw	r30, r28
    1a42:	e7 5a       	subi	r30, 0xA7	; 167
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
    1a4e:	64 c0       	rjmp	.+200    	; 0x1b18 <main+0x540>
	else if (__tmp > 65535)
    1a50:	fe 01       	movw	r30, r28
    1a52:	e5 5a       	subi	r30, 0xA5	; 165
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	60 81       	ld	r22, Z
    1a58:	71 81       	ldd	r23, Z+1	; 0x01
    1a5a:	82 81       	ldd	r24, Z+2	; 0x02
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	3f ef       	ldi	r19, 0xFF	; 255
    1a62:	4f e7       	ldi	r20, 0x7F	; 127
    1a64:	57 e4       	ldi	r21, 0x47	; 71
    1a66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a6a:	18 16       	cp	r1, r24
    1a6c:	0c f0       	brlt	.+2      	; 0x1a70 <main+0x498>
    1a6e:	43 c0       	rjmp	.+134    	; 0x1af6 <main+0x51e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a70:	fe 01       	movw	r30, r28
    1a72:	e1 5a       	subi	r30, 0xA1	; 161
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8e 01       	movw	r16, r28
    1a90:	07 5a       	subi	r16, 0xA7	; 167
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	1f c0       	rjmp	.+62     	; 0x1ae6 <main+0x50e>
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e9 5a       	subi	r30, 0xA9	; 169
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	88 ec       	ldi	r24, 0xC8	; 200
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	80 83       	st	Z, r24
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e9 5a       	subi	r30, 0xA9	; 169
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <main+0x4e8>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e9 5a       	subi	r30, 0xA9	; 169
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ace:	de 01       	movw	r26, r28
    1ad0:	a7 5a       	subi	r26, 0xA7	; 167
    1ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e7 5a       	subi	r30, 0xA7	; 167
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	11 96       	adiw	r26, 0x01	; 1
    1ae2:	9c 93       	st	X, r25
    1ae4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e7 5a       	subi	r30, 0xA7	; 167
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 81       	ld	r24, Z
    1aee:	91 81       	ldd	r25, Z+1	; 0x01
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	d1 f6       	brne	.-76     	; 0x1aa8 <main+0x4d0>
    1af4:	27 c0       	rjmp	.+78     	; 0x1b44 <main+0x56c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	8e 01       	movw	r16, r28
    1af8:	07 5a       	subi	r16, 0xA7	; 167
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	fe 01       	movw	r30, r28
    1afe:	e5 5a       	subi	r30, 0xA5	; 165
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	60 81       	ld	r22, Z
    1b04:	71 81       	ldd	r23, Z+1	; 0x01
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	93 81       	ldd	r25, Z+3	; 0x03
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	f8 01       	movw	r30, r16
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	80 83       	st	Z, r24
    1b18:	de 01       	movw	r26, r28
    1b1a:	ab 5a       	subi	r26, 0xAB	; 171
    1b1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e7 5a       	subi	r30, 0xA7	; 167
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	8d 93       	st	X+, r24
    1b2a:	9c 93       	st	X, r25
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	eb 5a       	subi	r30, 0xAB	; 171
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <main+0x55e>
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	eb 5a       	subi	r30, 0xAB	; 171
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	80 83       	st	Z, r24


	_delay_ms(5000);    // to ensure that the HMI MCU is waiting for the ready signal


	UART_sendByte(checkNewUser()); // MC2 is ready
    1b44:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <checkNewUser>
    1b48:	0e 94 41 17 	call	0x2e82	; 0x2e82 <UART_sendByte>
	while(1){

		key = UART_receiveByte();	// infinite loop waiting for HMI to operate
    1b4c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <UART_receiveByte>
    1b50:	fe 01       	movw	r30, r28
    1b52:	ee 58       	subi	r30, 0x8E	; 142
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 83       	st	Z, r24

		switch(key){
    1b58:	fe 01       	movw	r30, r28
    1b5a:	ee 58       	subi	r30, 0x8E	; 142
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	c2 57       	subi	r28, 0x72	; 114
    1b66:	df 4f       	sbci	r29, 0xFF	; 255
    1b68:	39 83       	std	Y+1, r19	; 0x01
    1b6a:	28 83       	st	Y, r18
    1b6c:	ce 58       	subi	r28, 0x8E	; 142
    1b6e:	d0 40       	sbci	r29, 0x00	; 0
    1b70:	c2 57       	subi	r28, 0x72	; 114
    1b72:	df 4f       	sbci	r29, 0xFF	; 255
    1b74:	88 81       	ld	r24, Y
    1b76:	99 81       	ldd	r25, Y+1	; 0x01
    1b78:	ce 58       	subi	r28, 0x8E	; 142
    1b7a:	d0 40       	sbci	r29, 0x00	; 0
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	91 05       	cpc	r25, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <main+0x5ac>
    1b82:	00 c1       	rjmp	.+512    	; 0x1d84 <main+0x7ac>
    1b84:	c2 57       	subi	r28, 0x72	; 114
    1b86:	df 4f       	sbci	r29, 0xFF	; 255
    1b88:	a8 81       	ld	r26, Y
    1b8a:	b9 81       	ldd	r27, Y+1	; 0x01
    1b8c:	ce 58       	subi	r28, 0x8E	; 142
    1b8e:	d0 40       	sbci	r29, 0x00	; 0
    1b90:	a2 30       	cpi	r26, 0x02	; 2
    1b92:	b1 05       	cpc	r27, r1
    1b94:	4c f4       	brge	.+18     	; 0x1ba8 <main+0x5d0>
    1b96:	c2 57       	subi	r28, 0x72	; 114
    1b98:	df 4f       	sbci	r29, 0xFF	; 255
    1b9a:	e8 81       	ld	r30, Y
    1b9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b9e:	ce 58       	subi	r28, 0x8E	; 142
    1ba0:	d0 40       	sbci	r29, 0x00	; 0
    1ba2:	30 97       	sbiw	r30, 0x00	; 0
    1ba4:	b1 f0       	breq	.+44     	; 0x1bd2 <main+0x5fa>
    1ba6:	d2 cf       	rjmp	.-92     	; 0x1b4c <main+0x574>
    1ba8:	c2 57       	subi	r28, 0x72	; 114
    1baa:	df 4f       	sbci	r29, 0xFF	; 255
    1bac:	28 81       	ld	r18, Y
    1bae:	39 81       	ldd	r19, Y+1	; 0x01
    1bb0:	ce 58       	subi	r28, 0x8E	; 142
    1bb2:	d0 40       	sbci	r29, 0x00	; 0
    1bb4:	22 30       	cpi	r18, 0x02	; 2
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <main+0x5e4>
    1bba:	83 c3       	rjmp	.+1798   	; 0x22c2 <main+0xcea>
    1bbc:	c2 57       	subi	r28, 0x72	; 114
    1bbe:	df 4f       	sbci	r29, 0xFF	; 255
    1bc0:	88 81       	ld	r24, Y
    1bc2:	99 81       	ldd	r25, Y+1	; 0x01
    1bc4:	ce 58       	subi	r28, 0x8E	; 142
    1bc6:	d0 40       	sbci	r29, 0x00	; 0
    1bc8:	83 30       	cpi	r24, 0x03	; 3
    1bca:	91 05       	cpc	r25, r1
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <main+0x5f8>
    1bce:	84 c3       	rjmp	.+1800   	; 0x22d8 <main+0xd00>
    1bd0:	bd cf       	rjmp	.-134    	; 0x1b4c <main+0x574>


		case STORE_PASSWORD:

			for (i = 0; i<PASSWORD_LENGTH;i++){
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ef 58       	subi	r30, 0x8F	; 143
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	10 82       	st	Z, r1
    1bda:	cc c0       	rjmp	.+408    	; 0x1d74 <main+0x79c>

				EEPROM_write(PASSWORD_ADDRESS+i , UART_receiveByte());
    1bdc:	fe 01       	movw	r30, r28
    1bde:	ef 58       	subi	r30, 0x8F	; 143
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	80 81       	ld	r24, Z
    1be4:	88 2f       	mov	r24, r24
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	8f 5e       	subi	r24, 0xEF	; 239
    1bea:	9c 4f       	sbci	r25, 0xFC	; 252
    1bec:	8c 01       	movw	r16, r24
    1bee:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <UART_receiveByte>
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	c8 01       	movw	r24, r16
    1bf6:	62 2f       	mov	r22, r18
    1bf8:	0e 94 11 09 	call	0x1222	; 0x1222 <EEPROM_write>
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	ef 5a       	subi	r30, 0xAF	; 175
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	a0 e2       	ldi	r26, 0x20	; 32
    1c08:	b1 e4       	ldi	r27, 0x41	; 65
    1c0a:	80 83       	st	Z, r24
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	a2 83       	std	Z+2, r26	; 0x02
    1c10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c12:	8e 01       	movw	r16, r28
    1c14:	03 5b       	subi	r16, 0xB3	; 179
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	fe 01       	movw	r30, r28
    1c1a:	ef 5a       	subi	r30, 0xAF	; 175
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4a ef       	ldi	r20, 0xFA	; 250
    1c2c:	54 e4       	ldi	r21, 0x44	; 68
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	f8 01       	movw	r30, r16
    1c38:	80 83       	st	Z, r24
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	a2 83       	std	Z+2, r26	; 0x02
    1c3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c40:	fe 01       	movw	r30, r28
    1c42:	e3 5b       	subi	r30, 0xB3	; 179
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e8       	ldi	r20, 0x80	; 128
    1c54:	5f e3       	ldi	r21, 0x3F	; 63
    1c56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5a:	88 23       	and	r24, r24
    1c5c:	44 f4       	brge	.+16     	; 0x1c6e <main+0x696>
		__ticks = 1;
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e5 5b       	subi	r30, 0xB5	; 181
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	80 83       	st	Z, r24
    1c6c:	64 c0       	rjmp	.+200    	; 0x1d36 <main+0x75e>
	else if (__tmp > 65535)
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e3 5b       	subi	r30, 0xB3	; 179
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	60 81       	ld	r22, Z
    1c76:	71 81       	ldd	r23, Z+1	; 0x01
    1c78:	82 81       	ldd	r24, Z+2	; 0x02
    1c7a:	93 81       	ldd	r25, Z+3	; 0x03
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	3f ef       	ldi	r19, 0xFF	; 255
    1c80:	4f e7       	ldi	r20, 0x7F	; 127
    1c82:	57 e4       	ldi	r21, 0x47	; 71
    1c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c88:	18 16       	cp	r1, r24
    1c8a:	0c f0       	brlt	.+2      	; 0x1c8e <main+0x6b6>
    1c8c:	43 c0       	rjmp	.+134    	; 0x1d14 <main+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ef 5a       	subi	r30, 0xAF	; 175
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	8e 01       	movw	r16, r28
    1cae:	05 5b       	subi	r16, 0xB5	; 181
    1cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    1cc4:	1f c0       	rjmp	.+62     	; 0x1d04 <main+0x72c>
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e7 5b       	subi	r30, 0xB7	; 183
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	88 ec       	ldi	r24, 0xC8	; 200
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	91 83       	std	Z+1, r25	; 0x01
    1cd2:	80 83       	st	Z, r24
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e7 5b       	subi	r30, 0xB7	; 183
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	91 81       	ldd	r25, Z+1	; 0x01
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <main+0x706>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e7 5b       	subi	r30, 0xB7	; 183
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cec:	de 01       	movw	r26, r28
    1cee:	a5 5b       	subi	r26, 0xB5	; 181
    1cf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e5 5b       	subi	r30, 0xB5	; 181
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	11 96       	adiw	r26, 0x01	; 1
    1d00:	9c 93       	st	X, r25
    1d02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	fe 01       	movw	r30, r28
    1d06:	e5 5b       	subi	r30, 0xB5	; 181
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	d1 f6       	brne	.-76     	; 0x1cc6 <main+0x6ee>
    1d12:	27 c0       	rjmp	.+78     	; 0x1d62 <main+0x78a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d14:	8e 01       	movw	r16, r28
    1d16:	05 5b       	subi	r16, 0xB5	; 181
    1d18:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	e3 5b       	subi	r30, 0xB3	; 179
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	60 81       	ld	r22, Z
    1d22:	71 81       	ldd	r23, Z+1	; 0x01
    1d24:	82 81       	ldd	r24, Z+2	; 0x02
    1d26:	93 81       	ldd	r25, Z+3	; 0x03
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	f8 01       	movw	r30, r16
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
    1d36:	de 01       	movw	r26, r28
    1d38:	a9 5b       	subi	r26, 0xB9	; 185
    1d3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e5 5b       	subi	r30, 0xB5	; 181
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	8d 93       	st	X+, r24
    1d48:	9c 93       	st	X, r25
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e9 5b       	subi	r30, 0xB9	; 185
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <main+0x77c>
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e9 5b       	subi	r30, 0xB9	; 185
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
		switch(key){


		case STORE_PASSWORD:

			for (i = 0; i<PASSWORD_LENGTH;i++){
    1d62:	de 01       	movw	r26, r28
    1d64:	af 58       	subi	r26, 0x8F	; 143
    1d66:	bf 4f       	sbci	r27, 0xFF	; 255
    1d68:	fe 01       	movw	r30, r28
    1d6a:	ef 58       	subi	r30, 0x8F	; 143
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	80 81       	ld	r24, Z
    1d70:	8f 5f       	subi	r24, 0xFF	; 255
    1d72:	8c 93       	st	X, r24
    1d74:	fe 01       	movw	r30, r28
    1d76:	ef 58       	subi	r30, 0x8F	; 143
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	80 81       	ld	r24, Z
    1d7c:	85 30       	cpi	r24, 0x05	; 5
    1d7e:	08 f4       	brcc	.+2      	; 0x1d82 <main+0x7aa>
    1d80:	2d cf       	rjmp	.-422    	; 0x1bdc <main+0x604>
    1d82:	e4 ce       	rjmp	.-568    	; 0x1b4c <main+0x574>
			}

			break;
		case VERIFY_PASSWORD:

			for (i = 0; i<PASSWORD_LENGTH;i++){
    1d84:	fe 01       	movw	r30, r28
    1d86:	ef 58       	subi	r30, 0x8F	; 143
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	10 82       	st	Z, r1
    1d8c:	28 c1       	rjmp	.+592    	; 0x1fde <main+0xa06>

				userPassword[i] = UART_receiveByte();
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ef 58       	subi	r30, 0x8F	; 143
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 81       	ld	r24, Z
    1d96:	08 2f       	mov	r16, r24
    1d98:	10 e0       	ldi	r17, 0x00	; 0
    1d9a:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <UART_receiveByte>
    1d9e:	28 2f       	mov	r18, r24
    1da0:	ce 01       	movw	r24, r28
    1da2:	87 57       	subi	r24, 0x77	; 119
    1da4:	9f 4f       	sbci	r25, 0xFF	; 255
    1da6:	fc 01       	movw	r30, r24
    1da8:	e0 0f       	add	r30, r16
    1daa:	f1 1f       	adc	r31, r17
    1dac:	20 83       	st	Z, r18
    1dae:	fe 01       	movw	r30, r28
    1db0:	ed 5b       	subi	r30, 0xBD	; 189
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 e2       	ldi	r26, 0x20	; 32
    1dba:	b1 e4       	ldi	r27, 0x41	; 65
    1dbc:	80 83       	st	Z, r24
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	a2 83       	std	Z+2, r26	; 0x02
    1dc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc4:	8e 01       	movw	r16, r28
    1dc6:	01 5c       	subi	r16, 0xC1	; 193
    1dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dca:	fe 01       	movw	r30, r28
    1dcc:	ed 5b       	subi	r30, 0xBD	; 189
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	60 81       	ld	r22, Z
    1dd2:	71 81       	ldd	r23, Z+1	; 0x01
    1dd4:	82 81       	ldd	r24, Z+2	; 0x02
    1dd6:	93 81       	ldd	r25, Z+3	; 0x03
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	4a ef       	ldi	r20, 0xFA	; 250
    1dde:	54 e4       	ldi	r21, 0x44	; 68
    1de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	f8 01       	movw	r30, r16
    1dea:	80 83       	st	Z, r24
    1dec:	91 83       	std	Z+1, r25	; 0x01
    1dee:	a2 83       	std	Z+2, r26	; 0x02
    1df0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1df2:	fe 01       	movw	r30, r28
    1df4:	ff 96       	adiw	r30, 0x3f	; 63
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <main+0x840>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9e af       	std	Y+62, r25	; 0x3e
    1e14:	8d af       	std	Y+61, r24	; 0x3d
    1e16:	46 c0       	rjmp	.+140    	; 0x1ea4 <main+0x8cc>
	else if (__tmp > 65535)
    1e18:	fe 01       	movw	r30, r28
    1e1a:	ff 96       	adiw	r30, 0x3f	; 63
    1e1c:	60 81       	ld	r22, Z
    1e1e:	71 81       	ldd	r23, Z+1	; 0x01
    1e20:	82 81       	ldd	r24, Z+2	; 0x02
    1e22:	93 81       	ldd	r25, Z+3	; 0x03
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	3f ef       	ldi	r19, 0xFF	; 255
    1e28:	4f e7       	ldi	r20, 0x7F	; 127
    1e2a:	57 e4       	ldi	r21, 0x47	; 71
    1e2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e30:	18 16       	cp	r1, r24
    1e32:	64 f5       	brge	.+88     	; 0x1e8c <main+0x8b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e34:	fe 01       	movw	r30, r28
    1e36:	ed 5b       	subi	r30, 0xBD	; 189
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	60 81       	ld	r22, Z
    1e3c:	71 81       	ldd	r23, Z+1	; 0x01
    1e3e:	82 81       	ldd	r24, Z+2	; 0x02
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e2       	ldi	r20, 0x20	; 32
    1e48:	51 e4       	ldi	r21, 0x41	; 65
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9e af       	std	Y+62, r25	; 0x3e
    1e60:	8d af       	std	Y+61, r24	; 0x3d
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <main+0x8aa>
    1e64:	88 ec       	ldi	r24, 0xC8	; 200
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9c af       	std	Y+60, r25	; 0x3c
    1e6a:	8b af       	std	Y+59, r24	; 0x3b
    1e6c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e6e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <main+0x898>
    1e74:	9c af       	std	Y+60, r25	; 0x3c
    1e76:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e78:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	9e af       	std	Y+62, r25	; 0x3e
    1e80:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e82:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e84:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	69 f7       	brne	.-38     	; 0x1e64 <main+0x88c>
    1e8a:	16 c0       	rjmp	.+44     	; 0x1eb8 <main+0x8e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	ff 96       	adiw	r30, 0x3f	; 63
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	9e af       	std	Y+62, r25	; 0x3e
    1ea2:	8d af       	std	Y+61, r24	; 0x3d
    1ea4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ea6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ea8:	9a af       	std	Y+58, r25	; 0x3a
    1eaa:	89 af       	std	Y+57, r24	; 0x39
    1eac:	89 ad       	ldd	r24, Y+57	; 0x39
    1eae:	9a ad       	ldd	r25, Y+58	; 0x3a
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <main+0x8d8>
    1eb4:	9a af       	std	Y+58, r25	; 0x3a
    1eb6:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(10);
				EEPROM_read(PASSWORD_ADDRESS+i , &EEPROMpassword[i]);
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ef 58       	subi	r30, 0x8F	; 143
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	80 81       	ld	r24, Z
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	8f 5e       	subi	r24, 0xEF	; 239
    1ec6:	9c 4f       	sbci	r25, 0xFC	; 252
    1ec8:	ac 01       	movw	r20, r24
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ef 58       	subi	r30, 0x8F	; 143
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9e 01       	movw	r18, r28
    1ed8:	2c 57       	subi	r18, 0x7C	; 124
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	28 0f       	add	r18, r24
    1ede:	39 1f       	adc	r19, r25
    1ee0:	ca 01       	movw	r24, r20
    1ee2:	b9 01       	movw	r22, r18
    1ee4:	0e 94 36 09 	call	0x126c	; 0x126c <EEPROM_read>
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 e2       	ldi	r26, 0x20	; 32
    1eee:	b1 e4       	ldi	r27, 0x41	; 65
    1ef0:	8d ab       	std	Y+53, r24	; 0x35
    1ef2:	9e ab       	std	Y+54, r25	; 0x36
    1ef4:	af ab       	std	Y+55, r26	; 0x37
    1ef6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef8:	6d a9       	ldd	r22, Y+53	; 0x35
    1efa:	7e a9       	ldd	r23, Y+54	; 0x36
    1efc:	8f a9       	ldd	r24, Y+55	; 0x37
    1efe:	98 ad       	ldd	r25, Y+56	; 0x38
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	4a ef       	ldi	r20, 0xFA	; 250
    1f06:	54 e4       	ldi	r21, 0x44	; 68
    1f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	89 ab       	std	Y+49, r24	; 0x31
    1f12:	9a ab       	std	Y+50, r25	; 0x32
    1f14:	ab ab       	std	Y+51, r26	; 0x33
    1f16:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f18:	69 a9       	ldd	r22, Y+49	; 0x31
    1f1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e8       	ldi	r20, 0x80	; 128
    1f26:	5f e3       	ldi	r21, 0x3F	; 63
    1f28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2c:	88 23       	and	r24, r24
    1f2e:	2c f4       	brge	.+10     	; 0x1f3a <main+0x962>
		__ticks = 1;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	98 ab       	std	Y+48, r25	; 0x30
    1f36:	8f a7       	std	Y+47, r24	; 0x2f
    1f38:	3f c0       	rjmp	.+126    	; 0x1fb8 <main+0x9e0>
	else if (__tmp > 65535)
    1f3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f40:	9c a9       	ldd	r25, Y+52	; 0x34
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	3f ef       	ldi	r19, 0xFF	; 255
    1f46:	4f e7       	ldi	r20, 0x7F	; 127
    1f48:	57 e4       	ldi	r21, 0x47	; 71
    1f4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f4e:	18 16       	cp	r1, r24
    1f50:	4c f5       	brge	.+82     	; 0x1fa4 <main+0x9cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f52:	6d a9       	ldd	r22, Y+53	; 0x35
    1f54:	7e a9       	ldd	r23, Y+54	; 0x36
    1f56:	8f a9       	ldd	r24, Y+55	; 0x37
    1f58:	98 ad       	ldd	r25, Y+56	; 0x38
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e2       	ldi	r20, 0x20	; 32
    1f60:	51 e4       	ldi	r21, 0x41	; 65
    1f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	cd 01       	movw	r24, r26
    1f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	98 ab       	std	Y+48, r25	; 0x30
    1f78:	8f a7       	std	Y+47, r24	; 0x2f
    1f7a:	0f c0       	rjmp	.+30     	; 0x1f9a <main+0x9c2>
    1f7c:	88 ec       	ldi	r24, 0xC8	; 200
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	9e a7       	std	Y+46, r25	; 0x2e
    1f82:	8d a7       	std	Y+45, r24	; 0x2d
    1f84:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f86:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <main+0x9b0>
    1f8c:	9e a7       	std	Y+46, r25	; 0x2e
    1f8e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f92:	98 a9       	ldd	r25, Y+48	; 0x30
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	98 ab       	std	Y+48, r25	; 0x30
    1f98:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	69 f7       	brne	.-38     	; 0x1f7c <main+0x9a4>
    1fa2:	14 c0       	rjmp	.+40     	; 0x1fcc <main+0x9f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa8:	8b a9       	ldd	r24, Y+51	; 0x33
    1faa:	9c a9       	ldd	r25, Y+52	; 0x34
    1fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	98 ab       	std	Y+48, r25	; 0x30
    1fb6:	8f a7       	std	Y+47, r24	; 0x2f
    1fb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fba:	98 a9       	ldd	r25, Y+48	; 0x30
    1fbc:	9c a7       	std	Y+44, r25	; 0x2c
    1fbe:	8b a7       	std	Y+43, r24	; 0x2b
    1fc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fc2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <main+0x9ec>
    1fc8:	9c a7       	std	Y+44, r25	; 0x2c
    1fca:	8b a7       	std	Y+43, r24	; 0x2b
			}

			break;
		case VERIFY_PASSWORD:

			for (i = 0; i<PASSWORD_LENGTH;i++){
    1fcc:	de 01       	movw	r26, r28
    1fce:	af 58       	subi	r26, 0x8F	; 143
    1fd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ef 58       	subi	r30, 0x8F	; 143
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	8f 5f       	subi	r24, 0xFF	; 255
    1fdc:	8c 93       	st	X, r24
    1fde:	fe 01       	movw	r30, r28
    1fe0:	ef 58       	subi	r30, 0x8F	; 143
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	80 81       	ld	r24, Z
    1fe6:	85 30       	cpi	r24, 0x05	; 5
    1fe8:	08 f4       	brcc	.+2      	; 0x1fec <main+0xa14>
    1fea:	d1 ce       	rjmp	.-606    	; 0x1d8e <main+0x7b6>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	aa e7       	ldi	r26, 0x7A	; 122
    1ff2:	b3 e4       	ldi	r27, 0x43	; 67
    1ff4:	8f a3       	std	Y+39, r24	; 0x27
    1ff6:	98 a7       	std	Y+40, r25	; 0x28
    1ff8:	a9 a7       	std	Y+41, r26	; 0x29
    1ffa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ffe:	78 a5       	ldd	r23, Y+40	; 0x28
    2000:	89 a5       	ldd	r24, Y+41	; 0x29
    2002:	9a a5       	ldd	r25, Y+42	; 0x2a
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4a ef       	ldi	r20, 0xFA	; 250
    200a:	54 e4       	ldi	r21, 0x44	; 68
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8b a3       	std	Y+35, r24	; 0x23
    2016:	9c a3       	std	Y+36, r25	; 0x24
    2018:	ad a3       	std	Y+37, r26	; 0x25
    201a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    201c:	6b a1       	ldd	r22, Y+35	; 0x23
    201e:	7c a1       	ldd	r23, Y+36	; 0x24
    2020:	8d a1       	ldd	r24, Y+37	; 0x25
    2022:	9e a1       	ldd	r25, Y+38	; 0x26
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f e3       	ldi	r21, 0x3F	; 63
    202c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2030:	88 23       	and	r24, r24
    2032:	2c f4       	brge	.+10     	; 0x203e <main+0xa66>
		__ticks = 1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9a a3       	std	Y+34, r25	; 0x22
    203a:	89 a3       	std	Y+33, r24	; 0x21
    203c:	3f c0       	rjmp	.+126    	; 0x20bc <main+0xae4>
	else if (__tmp > 65535)
    203e:	6b a1       	ldd	r22, Y+35	; 0x23
    2040:	7c a1       	ldd	r23, Y+36	; 0x24
    2042:	8d a1       	ldd	r24, Y+37	; 0x25
    2044:	9e a1       	ldd	r25, Y+38	; 0x26
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	3f ef       	ldi	r19, 0xFF	; 255
    204a:	4f e7       	ldi	r20, 0x7F	; 127
    204c:	57 e4       	ldi	r21, 0x47	; 71
    204e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2052:	18 16       	cp	r1, r24
    2054:	4c f5       	brge	.+82     	; 0x20a8 <main+0xad0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2056:	6f a1       	ldd	r22, Y+39	; 0x27
    2058:	78 a5       	ldd	r23, Y+40	; 0x28
    205a:	89 a5       	ldd	r24, Y+41	; 0x29
    205c:	9a a5       	ldd	r25, Y+42	; 0x2a
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e2       	ldi	r20, 0x20	; 32
    2064:	51 e4       	ldi	r21, 0x41	; 65
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9a a3       	std	Y+34, r25	; 0x22
    207c:	89 a3       	std	Y+33, r24	; 0x21
    207e:	0f c0       	rjmp	.+30     	; 0x209e <main+0xac6>
    2080:	88 ec       	ldi	r24, 0xC8	; 200
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	98 a3       	std	Y+32, r25	; 0x20
    2086:	8f 8f       	std	Y+31, r24	; 0x1f
    2088:	8f 8d       	ldd	r24, Y+31	; 0x1f
    208a:	98 a1       	ldd	r25, Y+32	; 0x20
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <main+0xab4>
    2090:	98 a3       	std	Y+32, r25	; 0x20
    2092:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2094:	89 a1       	ldd	r24, Y+33	; 0x21
    2096:	9a a1       	ldd	r25, Y+34	; 0x22
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	9a a3       	std	Y+34, r25	; 0x22
    209c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209e:	89 a1       	ldd	r24, Y+33	; 0x21
    20a0:	9a a1       	ldd	r25, Y+34	; 0x22
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	69 f7       	brne	.-38     	; 0x2080 <main+0xaa8>
    20a6:	14 c0       	rjmp	.+40     	; 0x20d0 <main+0xaf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a8:	6b a1       	ldd	r22, Y+35	; 0x23
    20aa:	7c a1       	ldd	r23, Y+36	; 0x24
    20ac:	8d a1       	ldd	r24, Y+37	; 0x25
    20ae:	9e a1       	ldd	r25, Y+38	; 0x26
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9a a3       	std	Y+34, r25	; 0x22
    20ba:	89 a3       	std	Y+33, r24	; 0x21
    20bc:	89 a1       	ldd	r24, Y+33	; 0x21
    20be:	9a a1       	ldd	r25, Y+34	; 0x22
    20c0:	9e 8f       	std	Y+30, r25	; 0x1e
    20c2:	8d 8f       	std	Y+29, r24	; 0x1d
    20c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <main+0xaf0>
    20cc:	9e 8f       	std	Y+30, r25	; 0x1e
    20ce:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10);

			}
			_delay_ms(250);
			/*compares the EEPROM password with the user input */
			if(compare_arrays(userPassword,EEPROMpassword,PASSWORD_LENGTH)){
    20d0:	ce 01       	movw	r24, r28
    20d2:	87 57       	subi	r24, 0x77	; 119
    20d4:	9f 4f       	sbci	r25, 0xFF	; 255
    20d6:	9e 01       	movw	r18, r28
    20d8:	2c 57       	subi	r18, 0x7C	; 124
    20da:	3f 4f       	sbci	r19, 0xFF	; 255
    20dc:	b9 01       	movw	r22, r18
    20de:	45 e0       	ldi	r20, 0x05	; 5
    20e0:	0e 94 3d 12 	call	0x247a	; 0x247a <compare_arrays>
    20e4:	88 23       	and	r24, r24
    20e6:	09 f4       	brne	.+2      	; 0x20ea <main+0xb12>
    20e8:	76 c0       	rjmp	.+236    	; 0x21d6 <main+0xbfe>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a0 ea       	ldi	r26, 0xA0	; 160
    20f0:	b1 e4       	ldi	r27, 0x41	; 65
    20f2:	89 8f       	std	Y+25, r24	; 0x19
    20f4:	9a 8f       	std	Y+26, r25	; 0x1a
    20f6:	ab 8f       	std	Y+27, r26	; 0x1b
    20f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fa:	69 8d       	ldd	r22, Y+25	; 0x19
    20fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2100:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4a ef       	ldi	r20, 0xFA	; 250
    2108:	54 e4       	ldi	r21, 0x44	; 68
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	8d 8b       	std	Y+21, r24	; 0x15
    2114:	9e 8b       	std	Y+22, r25	; 0x16
    2116:	af 8b       	std	Y+23, r26	; 0x17
    2118:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    211a:	6d 89       	ldd	r22, Y+21	; 0x15
    211c:	7e 89       	ldd	r23, Y+22	; 0x16
    211e:	8f 89       	ldd	r24, Y+23	; 0x17
    2120:	98 8d       	ldd	r25, Y+24	; 0x18
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e8       	ldi	r20, 0x80	; 128
    2128:	5f e3       	ldi	r21, 0x3F	; 63
    212a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    212e:	88 23       	and	r24, r24
    2130:	2c f4       	brge	.+10     	; 0x213c <main+0xb64>
		__ticks = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9c 8b       	std	Y+20, r25	; 0x14
    2138:	8b 8b       	std	Y+19, r24	; 0x13
    213a:	3f c0       	rjmp	.+126    	; 0x21ba <main+0xbe2>
	else if (__tmp > 65535)
    213c:	6d 89       	ldd	r22, Y+21	; 0x15
    213e:	7e 89       	ldd	r23, Y+22	; 0x16
    2140:	8f 89       	ldd	r24, Y+23	; 0x17
    2142:	98 8d       	ldd	r25, Y+24	; 0x18
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2150:	18 16       	cp	r1, r24
    2152:	4c f5       	brge	.+82     	; 0x21a6 <main+0xbce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	69 8d       	ldd	r22, Y+25	; 0x19
    2156:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    215a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e2       	ldi	r20, 0x20	; 32
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9c 8b       	std	Y+20, r25	; 0x14
    217a:	8b 8b       	std	Y+19, r24	; 0x13
    217c:	0f c0       	rjmp	.+30     	; 0x219c <main+0xbc4>
    217e:	88 ec       	ldi	r24, 0xC8	; 200
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9a 8b       	std	Y+18, r25	; 0x12
    2184:	89 8b       	std	Y+17, r24	; 0x11
    2186:	89 89       	ldd	r24, Y+17	; 0x11
    2188:	9a 89       	ldd	r25, Y+18	; 0x12
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <main+0xbb2>
    218e:	9a 8b       	std	Y+18, r25	; 0x12
    2190:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2192:	8b 89       	ldd	r24, Y+19	; 0x13
    2194:	9c 89       	ldd	r25, Y+20	; 0x14
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	9c 8b       	std	Y+20, r25	; 0x14
    219a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219c:	8b 89       	ldd	r24, Y+19	; 0x13
    219e:	9c 89       	ldd	r25, Y+20	; 0x14
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	69 f7       	brne	.-38     	; 0x217e <main+0xba6>
    21a4:	14 c0       	rjmp	.+40     	; 0x21ce <main+0xbf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a6:	6d 89       	ldd	r22, Y+21	; 0x15
    21a8:	7e 89       	ldd	r23, Y+22	; 0x16
    21aa:	8f 89       	ldd	r24, Y+23	; 0x17
    21ac:	98 8d       	ldd	r25, Y+24	; 0x18
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9c 8b       	std	Y+20, r25	; 0x14
    21b8:	8b 8b       	std	Y+19, r24	; 0x13
    21ba:	8b 89       	ldd	r24, Y+19	; 0x13
    21bc:	9c 89       	ldd	r25, Y+20	; 0x14
    21be:	98 8b       	std	Y+16, r25	; 0x10
    21c0:	8f 87       	std	Y+15, r24	; 0x0f
    21c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c4:	98 89       	ldd	r25, Y+16	; 0x10
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <main+0xbee>
    21ca:	98 8b       	std	Y+16, r25	; 0x10
    21cc:	8f 87       	std	Y+15, r24	; 0x0f

				_delay_ms(20);
				UART_sendByte(PASSWORD_MATCH);
    21ce:	84 e0       	ldi	r24, 0x04	; 4
    21d0:	0e 94 41 17 	call	0x2e82	; 0x2e82 <UART_sendByte>
    21d4:	bb cc       	rjmp	.-1674   	; 0x1b4c <main+0x574>
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a0 ea       	ldi	r26, 0xA0	; 160
    21dc:	b1 e4       	ldi	r27, 0x41	; 65
    21de:	8b 87       	std	Y+11, r24	; 0x0b
    21e0:	9c 87       	std	Y+12, r25	; 0x0c
    21e2:	ad 87       	std	Y+13, r26	; 0x0d
    21e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	4a ef       	ldi	r20, 0xFA	; 250
    21f4:	54 e4       	ldi	r21, 0x44	; 68
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	8f 83       	std	Y+7, r24	; 0x07
    2200:	98 87       	std	Y+8, r25	; 0x08
    2202:	a9 87       	std	Y+9, r26	; 0x09
    2204:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2206:	6f 81       	ldd	r22, Y+7	; 0x07
    2208:	78 85       	ldd	r23, Y+8	; 0x08
    220a:	89 85       	ldd	r24, Y+9	; 0x09
    220c:	9a 85       	ldd	r25, Y+10	; 0x0a
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e8       	ldi	r20, 0x80	; 128
    2214:	5f e3       	ldi	r21, 0x3F	; 63
    2216:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    221a:	88 23       	and	r24, r24
    221c:	2c f4       	brge	.+10     	; 0x2228 <main+0xc50>
		__ticks = 1;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	8d 83       	std	Y+5, r24	; 0x05
    2226:	3f c0       	rjmp	.+126    	; 0x22a6 <main+0xcce>
	else if (__tmp > 65535)
    2228:	6f 81       	ldd	r22, Y+7	; 0x07
    222a:	78 85       	ldd	r23, Y+8	; 0x08
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	3f ef       	ldi	r19, 0xFF	; 255
    2234:	4f e7       	ldi	r20, 0x7F	; 127
    2236:	57 e4       	ldi	r21, 0x47	; 71
    2238:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    223c:	18 16       	cp	r1, r24
    223e:	4c f5       	brge	.+82     	; 0x2292 <main+0xcba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2240:	6b 85       	ldd	r22, Y+11	; 0x0b
    2242:	7c 85       	ldd	r23, Y+12	; 0x0c
    2244:	8d 85       	ldd	r24, Y+13	; 0x0d
    2246:	9e 85       	ldd	r25, Y+14	; 0x0e
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e2       	ldi	r20, 0x20	; 32
    224e:	51 e4       	ldi	r21, 0x41	; 65
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	0f c0       	rjmp	.+30     	; 0x2288 <main+0xcb0>
    226a:	88 ec       	ldi	r24, 0xC8	; 200
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	9c 83       	std	Y+4, r25	; 0x04
    2270:	8b 83       	std	Y+3, r24	; 0x03
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <main+0xc9e>
    227a:	9c 83       	std	Y+4, r25	; 0x04
    227c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227e:	8d 81       	ldd	r24, Y+5	; 0x05
    2280:	9e 81       	ldd	r25, Y+6	; 0x06
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	9e 83       	std	Y+6, r25	; 0x06
    2286:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	9e 81       	ldd	r25, Y+6	; 0x06
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	69 f7       	brne	.-38     	; 0x226a <main+0xc92>
    2290:	14 c0       	rjmp	.+40     	; 0x22ba <main+0xce2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2292:	6f 81       	ldd	r22, Y+7	; 0x07
    2294:	78 85       	ldd	r23, Y+8	; 0x08
    2296:	89 85       	ldd	r24, Y+9	; 0x09
    2298:	9a 85       	ldd	r25, Y+10	; 0x0a
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	9a 83       	std	Y+2, r25	; 0x02
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	9a 81       	ldd	r25, Y+2	; 0x02
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <main+0xcda>
    22b6:	9a 83       	std	Y+2, r25	; 0x02
    22b8:	89 83       	std	Y+1, r24	; 0x01

			}else{

				_delay_ms(20);
				UART_sendByte(PASSWORD_DOESNT_MATCH);
    22ba:	85 e0       	ldi	r24, 0x05	; 5
    22bc:	0e 94 41 17 	call	0x2e82	; 0x2e82 <UART_sendByte>
    22c0:	45 cc       	rjmp	.-1910   	; 0x1b4c <main+0x574>

			break;
		case BUZZER_ON:

			/*turns on the buzzer*/
			buzzerOn();
    22c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <buzzerOn>
			/*setting timer 1 callback function to turn off the buzzer after 1 mint*/
			Timers_setTimer1CompareCallBack(buzzer_off);
    22c6:	87 e7       	ldi	r24, 0x77	; 119
    22c8:	92 e1       	ldi	r25, 0x12	; 18
    22ca:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <Timers_setTimer1CompareCallBack>
			/*start the timer */
			Timers_resume(TIMER_1,_256_TIMER);
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	64 e0       	ldi	r22, 0x04	; 4
    22d2:	0e 94 6d 16 	call	0x2cda	; 0x2cda <Timers_resume>
    22d6:	3a cc       	rjmp	.-1932   	; 0x1b4c <main+0x574>

			break;

		case OPEN_DOOR:

			motor_instruction = MOTOR_FORWARD;
    22d8:	10 92 88 00 	sts	0x0088, r1
			Motor_ExecuteInstruction();
    22dc:	0e 94 67 17 	call	0x2ece	; 0x2ece <Motor_ExecuteInstruction>
			Timers_setTimer1CompareCallBack(door_seq);
    22e0:	81 e1       	ldi	r24, 0x11	; 17
    22e2:	93 e1       	ldi	r25, 0x13	; 19
    22e4:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <Timers_setTimer1CompareCallBack>
			Timers_resume(TIMER_1,_256_TIMER);
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	64 e0       	ldi	r22, 0x04	; 4
    22ec:	0e 94 6d 16 	call	0x2cda	; 0x2cda <Timers_resume>
			UART_sendByte(DOOR_IS_OPENING);
    22f0:	87 e0       	ldi	r24, 0x07	; 7
    22f2:	0e 94 41 17 	call	0x2e82	; 0x2e82 <UART_sendByte>
    22f6:	2a cc       	rjmp	.-1964   	; 0x1b4c <main+0x574>

000022f8 <checkNewUser>:
} // main




uint8 checkNewUser(void){
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	6a 97       	sbiw	r28, 0x1a	; 26
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61

	uint8 i;
	uint8 buffer[PASSWORD_LENGTH] = {0};
    230c:	85 e0       	ldi	r24, 0x05	; 5
    230e:	fe 01       	movw	r30, r28
    2310:	70 96       	adiw	r30, 0x10	; 16
    2312:	df 01       	movw	r26, r30
    2314:	98 2f       	mov	r25, r24
    2316:	1d 92       	st	X+, r1
    2318:	9a 95       	dec	r25
    231a:	e9 f7       	brne	.-6      	; 0x2316 <checkNewUser+0x1e>
	uint8 storedPassword[PASSWORD_LENGTH] = {0};
    231c:	85 e0       	ldi	r24, 0x05	; 5
    231e:	fe 01       	movw	r30, r28
    2320:	75 96       	adiw	r30, 0x15	; 21
    2322:	df 01       	movw	r26, r30
    2324:	98 2f       	mov	r25, r24
    2326:	1d 92       	st	X+, r1
    2328:	9a 95       	dec	r25
    232a:	e9 f7       	brne	.-6      	; 0x2326 <checkNewUser+0x2e>

	for (i = 0; i<PASSWORD_LENGTH;i++){
    232c:	1f 86       	std	Y+15, r1	; 0x0f
    232e:	87 c0       	rjmp	.+270    	; 0x243e <checkNewUser+0x146>

		EEPROM_read(PASSWORD_ADDRESS+i , &storedPassword[i]);
    2330:	8f 85       	ldd	r24, Y+15	; 0x0f
    2332:	88 2f       	mov	r24, r24
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	8f 5e       	subi	r24, 0xEF	; 239
    2338:	9c 4f       	sbci	r25, 0xFC	; 252
    233a:	ac 01       	movw	r20, r24
    233c:	8f 85       	ldd	r24, Y+15	; 0x0f
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9e 01       	movw	r18, r28
    2344:	2b 5e       	subi	r18, 0xEB	; 235
    2346:	3f 4f       	sbci	r19, 0xFF	; 255
    2348:	28 0f       	add	r18, r24
    234a:	39 1f       	adc	r19, r25
    234c:	ca 01       	movw	r24, r20
    234e:	b9 01       	movw	r22, r18
    2350:	0e 94 36 09 	call	0x126c	; 0x126c <EEPROM_read>
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e2       	ldi	r26, 0x20	; 32
    235a:	b1 e4       	ldi	r27, 0x41	; 65
    235c:	8b 87       	std	Y+11, r24	; 0x0b
    235e:	9c 87       	std	Y+12, r25	; 0x0c
    2360:	ad 87       	std	Y+13, r26	; 0x0d
    2362:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2364:	6b 85       	ldd	r22, Y+11	; 0x0b
    2366:	7c 85       	ldd	r23, Y+12	; 0x0c
    2368:	8d 85       	ldd	r24, Y+13	; 0x0d
    236a:	9e 85       	ldd	r25, Y+14	; 0x0e
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	4a ef       	ldi	r20, 0xFA	; 250
    2372:	54 e4       	ldi	r21, 0x44	; 68
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	8f 83       	std	Y+7, r24	; 0x07
    237e:	98 87       	std	Y+8, r25	; 0x08
    2380:	a9 87       	std	Y+9, r26	; 0x09
    2382:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2384:	6f 81       	ldd	r22, Y+7	; 0x07
    2386:	78 85       	ldd	r23, Y+8	; 0x08
    2388:	89 85       	ldd	r24, Y+9	; 0x09
    238a:	9a 85       	ldd	r25, Y+10	; 0x0a
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e8       	ldi	r20, 0x80	; 128
    2392:	5f e3       	ldi	r21, 0x3F	; 63
    2394:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2398:	88 23       	and	r24, r24
    239a:	2c f4       	brge	.+10     	; 0x23a6 <checkNewUser+0xae>
		__ticks = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    23a4:	3f c0       	rjmp	.+126    	; 0x2424 <checkNewUser+0x12c>
	else if (__tmp > 65535)
    23a6:	6f 81       	ldd	r22, Y+7	; 0x07
    23a8:	78 85       	ldd	r23, Y+8	; 0x08
    23aa:	89 85       	ldd	r24, Y+9	; 0x09
    23ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	3f ef       	ldi	r19, 0xFF	; 255
    23b2:	4f e7       	ldi	r20, 0x7F	; 127
    23b4:	57 e4       	ldi	r21, 0x47	; 71
    23b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ba:	18 16       	cp	r1, r24
    23bc:	4c f5       	brge	.+82     	; 0x2410 <checkNewUser+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23be:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9e 83       	std	Y+6, r25	; 0x06
    23e4:	8d 83       	std	Y+5, r24	; 0x05
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <checkNewUser+0x10e>
    23e8:	88 ec       	ldi	r24, 0xC8	; 200
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	9c 83       	std	Y+4, r25	; 0x04
    23ee:	8b 83       	std	Y+3, r24	; 0x03
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	9c 81       	ldd	r25, Y+4	; 0x04
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <checkNewUser+0xfc>
    23f8:	9c 83       	std	Y+4, r25	; 0x04
    23fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	69 f7       	brne	.-38     	; 0x23e8 <checkNewUser+0xf0>
    240e:	14 c0       	rjmp	.+40     	; 0x2438 <checkNewUser+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	6f 81       	ldd	r22, Y+7	; 0x07
    2412:	78 85       	ldd	r23, Y+8	; 0x08
    2414:	89 85       	ldd	r24, Y+9	; 0x09
    2416:	9a 85       	ldd	r25, Y+10	; 0x0a
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	9e 81       	ldd	r25, Y+6	; 0x06
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	9a 81       	ldd	r25, Y+2	; 0x02
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <checkNewUser+0x138>
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	89 83       	std	Y+1, r24	; 0x01

	uint8 i;
	uint8 buffer[PASSWORD_LENGTH] = {0};
	uint8 storedPassword[PASSWORD_LENGTH] = {0};

	for (i = 0; i<PASSWORD_LENGTH;i++){
    2438:	8f 85       	ldd	r24, Y+15	; 0x0f
    243a:	8f 5f       	subi	r24, 0xFF	; 255
    243c:	8f 87       	std	Y+15, r24	; 0x0f
    243e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2440:	85 30       	cpi	r24, 0x05	; 5
    2442:	08 f4       	brcc	.+2      	; 0x2446 <checkNewUser+0x14e>
    2444:	75 cf       	rjmp	.-278    	; 0x2330 <checkNewUser+0x38>

		EEPROM_read(PASSWORD_ADDRESS+i , &storedPassword[i]);
		_delay_ms(10);

	}
	if(compare_arrays(buffer,storedPassword,PASSWORD_LENGTH)){
    2446:	ce 01       	movw	r24, r28
    2448:	40 96       	adiw	r24, 0x10	; 16
    244a:	9e 01       	movw	r18, r28
    244c:	2b 5e       	subi	r18, 0xEB	; 235
    244e:	3f 4f       	sbci	r19, 0xFF	; 255
    2450:	b9 01       	movw	r22, r18
    2452:	45 e0       	ldi	r20, 0x05	; 5
    2454:	0e 94 3d 12 	call	0x247a	; 0x247a <compare_arrays>
    2458:	88 23       	and	r24, r24
    245a:	19 f0       	breq	.+6      	; 0x2462 <checkNewUser+0x16a>
		return NEW_USER;
    245c:	a1 e0       	ldi	r26, 0x01	; 1
    245e:	aa 8f       	std	Y+26, r26	; 0x1a
    2460:	02 c0       	rjmp	.+4      	; 0x2466 <checkNewUser+0x16e>
	}else{
		return OLD_USER;
    2462:	b2 e0       	ldi	r27, 0x02	; 2
    2464:	ba 8f       	std	Y+26, r27	; 0x1a
    2466:	8a 8d       	ldd	r24, Y+26	; 0x1a
	}


}
    2468:	6a 96       	adiw	r28, 0x1a	; 26
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <compare_arrays>:
* OUTPUTS :	boolean
*
*
* NOTES :	none
***************************************************************************/
bool compare_arrays(uint8 *Arr1 , uint8 *Arr2, uint8 size){
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	27 97       	sbiw	r28, 0x07	; 7
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	9b 83       	std	Y+3, r25	; 0x03
    2490:	8a 83       	std	Y+2, r24	; 0x02
    2492:	7d 83       	std	Y+5, r23	; 0x05
    2494:	6c 83       	std	Y+4, r22	; 0x04
    2496:	4e 83       	std	Y+6, r20	; 0x06

	uint8 i;
	for(i =0;i<size;i++){
    2498:	19 82       	std	Y+1, r1	; 0x01
    249a:	19 c0       	rjmp	.+50     	; 0x24ce <compare_arrays+0x54>

		if(Arr1[i] == Arr2[i]){
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	9b 81       	ldd	r25, Y+3	; 0x03
    24a6:	fc 01       	movw	r30, r24
    24a8:	e2 0f       	add	r30, r18
    24aa:	f3 1f       	adc	r31, r19
    24ac:	40 81       	ld	r20, Z
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	8c 81       	ldd	r24, Y+4	; 0x04
    24b6:	9d 81       	ldd	r25, Y+5	; 0x05
    24b8:	fc 01       	movw	r30, r24
    24ba:	e2 0f       	add	r30, r18
    24bc:	f3 1f       	adc	r31, r19
    24be:	80 81       	ld	r24, Z
    24c0:	48 17       	cp	r20, r24
    24c2:	11 f0       	breq	.+4      	; 0x24c8 <compare_arrays+0x4e>

		}else{
			return 0;
    24c4:	1f 82       	std	Y+7, r1	; 0x07
    24c6:	09 c0       	rjmp	.+18     	; 0x24da <compare_arrays+0x60>
* NOTES :	none
***************************************************************************/
bool compare_arrays(uint8 *Arr1 , uint8 *Arr2, uint8 size){

	uint8 i;
	for(i =0;i<size;i++){
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	8f 5f       	subi	r24, 0xFF	; 255
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	99 81       	ldd	r25, Y+1	; 0x01
    24d0:	8e 81       	ldd	r24, Y+6	; 0x06
    24d2:	98 17       	cp	r25, r24
    24d4:	18 f3       	brcs	.-58     	; 0x249c <compare_arrays+0x22>
		}


	}

	return 1;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	8f 83       	std	Y+7, r24	; 0x07
    24da:	8f 81       	ldd	r24, Y+7	; 0x07
}
    24dc:	27 96       	adiw	r28, 0x07	; 7
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <buzzer_off>:





void buzzer_off(void){
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	2e 97       	sbiw	r28, 0x0e	; 14
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61

	static uint8 CallBack_counter = 0;
	if(CallBack_counter == BUZZER_CLOSE_TIME_STAMP){   //60 sec = 1mint  ********** remember to remove magic numbers later ***********
    2502:	80 91 7a 00 	lds	r24, 0x007A
    2506:	8c 33       	cpi	r24, 0x3C	; 60
    2508:	09 f0       	breq	.+2      	; 0x250c <buzzer_off+0x1e>
    250a:	7d c0       	rjmp	.+250    	; 0x2606 <buzzer_off+0x118>
		buzzerOff();
    250c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <buzzerOff>
		UART_sendByte(UNLOCK_SCREEN);
    2510:	86 e0       	ldi	r24, 0x06	; 6
    2512:	0e 94 41 17 	call	0x2e82	; 0x2e82 <UART_sendByte>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e2       	ldi	r26, 0x20	; 32
    251c:	b1 e4       	ldi	r27, 0x41	; 65
    251e:	8b 87       	std	Y+11, r24	; 0x0b
    2520:	9c 87       	std	Y+12, r25	; 0x0c
    2522:	ad 87       	std	Y+13, r26	; 0x0d
    2524:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2526:	6b 85       	ldd	r22, Y+11	; 0x0b
    2528:	7c 85       	ldd	r23, Y+12	; 0x0c
    252a:	8d 85       	ldd	r24, Y+13	; 0x0d
    252c:	9e 85       	ldd	r25, Y+14	; 0x0e
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4a ef       	ldi	r20, 0xFA	; 250
    2534:	54 e4       	ldi	r21, 0x44	; 68
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	8f 83       	std	Y+7, r24	; 0x07
    2540:	98 87       	std	Y+8, r25	; 0x08
    2542:	a9 87       	std	Y+9, r26	; 0x09
    2544:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2546:	6f 81       	ldd	r22, Y+7	; 0x07
    2548:	78 85       	ldd	r23, Y+8	; 0x08
    254a:	89 85       	ldd	r24, Y+9	; 0x09
    254c:	9a 85       	ldd	r25, Y+10	; 0x0a
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255a:	88 23       	and	r24, r24
    255c:	2c f4       	brge	.+10     	; 0x2568 <buzzer_off+0x7a>
		__ticks = 1;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	9e 83       	std	Y+6, r25	; 0x06
    2564:	8d 83       	std	Y+5, r24	; 0x05
    2566:	3f c0       	rjmp	.+126    	; 0x25e6 <buzzer_off+0xf8>
	else if (__tmp > 65535)
    2568:	6f 81       	ldd	r22, Y+7	; 0x07
    256a:	78 85       	ldd	r23, Y+8	; 0x08
    256c:	89 85       	ldd	r24, Y+9	; 0x09
    256e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	4f e7       	ldi	r20, 0x7F	; 127
    2576:	57 e4       	ldi	r21, 0x47	; 71
    2578:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257c:	18 16       	cp	r1, r24
    257e:	4c f5       	brge	.+82     	; 0x25d2 <buzzer_off+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2580:	6b 85       	ldd	r22, Y+11	; 0x0b
    2582:	7c 85       	ldd	r23, Y+12	; 0x0c
    2584:	8d 85       	ldd	r24, Y+13	; 0x0d
    2586:	9e 85       	ldd	r25, Y+14	; 0x0e
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e2       	ldi	r20, 0x20	; 32
    258e:	51 e4       	ldi	r21, 0x41	; 65
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	8d 83       	std	Y+5, r24	; 0x05
    25a8:	0f c0       	rjmp	.+30     	; 0x25c8 <buzzer_off+0xda>
    25aa:	88 ec       	ldi	r24, 0xC8	; 200
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9c 83       	std	Y+4, r25	; 0x04
    25b0:	8b 83       	std	Y+3, r24	; 0x03
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	9c 81       	ldd	r25, Y+4	; 0x04
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <buzzer_off+0xc8>
    25ba:	9c 83       	std	Y+4, r25	; 0x04
    25bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25be:	8d 81       	ldd	r24, Y+5	; 0x05
    25c0:	9e 81       	ldd	r25, Y+6	; 0x06
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	9e 83       	std	Y+6, r25	; 0x06
    25c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ca:	9e 81       	ldd	r25, Y+6	; 0x06
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	69 f7       	brne	.-38     	; 0x25aa <buzzer_off+0xbc>
    25d0:	14 c0       	rjmp	.+40     	; 0x25fa <buzzer_off+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d2:	6f 81       	ldd	r22, Y+7	; 0x07
    25d4:	78 85       	ldd	r23, Y+8	; 0x08
    25d6:	89 85       	ldd	r24, Y+9	; 0x09
    25d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	9e 83       	std	Y+6, r25	; 0x06
    25e4:	8d 83       	std	Y+5, r24	; 0x05
    25e6:	8d 81       	ldd	r24, Y+5	; 0x05
    25e8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	9a 81       	ldd	r25, Y+2	; 0x02
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <buzzer_off+0x104>
    25f6:	9a 83       	std	Y+2, r25	; 0x02
    25f8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		Timers_setTimer1CompareCallBack(NULL);  // Detach the callback
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <Timers_setTimer1CompareCallBack>
		CallBack_counter = 0;
    2602:	10 92 7a 00 	sts	0x007A, r1
	}
	CallBack_counter++;
    2606:	80 91 7a 00 	lds	r24, 0x007A
    260a:	8f 5f       	subi	r24, 0xFF	; 255
    260c:	80 93 7a 00 	sts	0x007A, r24
}
    2610:	2e 96       	adiw	r28, 0x0e	; 14
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <door_seq>:

void door_seq(void){
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62

	static uint8 CallBack_counter_2 = 0;
	if(CallBack_counter_2 == DOOR_HOLD_TIME_STAMP){   //15 sec   ********** remember to remove magic numbers later ***********
    262a:	80 91 7b 00 	lds	r24, 0x007B
    262e:	8f 30       	cpi	r24, 0x0F	; 15
    2630:	41 f4       	brne	.+16     	; 0x2642 <door_seq+0x20>
		motor_instruction = MOTOR_BREAK;	// set instruction to break
    2632:	82 e0       	ldi	r24, 0x02	; 2
    2634:	80 93 88 00 	sts	0x0088, r24
		Motor_ExecuteInstruction();			// execute the break instruction
    2638:	0e 94 67 17 	call	0x2ece	; 0x2ece <Motor_ExecuteInstruction>
		UART_sendByte(DOOR_IS_OPEN);		// send UART message to sync the LCD with motor movement
    263c:	88 e0       	ldi	r24, 0x08	; 8
    263e:	0e 94 41 17 	call	0x2e82	; 0x2e82 <UART_sendByte>


	}
	if(CallBack_counter_2 == DOOR_CLOSE_TIME_STAMP){
    2642:	80 91 7b 00 	lds	r24, 0x007B
    2646:	83 31       	cpi	r24, 0x13	; 19
    2648:	41 f4       	brne	.+16     	; 0x265a <door_seq+0x38>
		motor_instruction = MOTOR_BACKWARD;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	80 93 88 00 	sts	0x0088, r24
		Motor_ExecuteInstruction();
    2650:	0e 94 67 17 	call	0x2ece	; 0x2ece <Motor_ExecuteInstruction>
		UART_sendByte(DOOR_IS_CLOSING);
    2654:	89 e0       	ldi	r24, 0x09	; 9
    2656:	0e 94 41 17 	call	0x2e82	; 0x2e82 <UART_sendByte>

	}
	if(CallBack_counter_2 == DOOR_CLOSED_TIME_STAMP){
    265a:	80 91 7b 00 	lds	r24, 0x007B
    265e:	82 32       	cpi	r24, 0x22	; 34
    2660:	89 f4       	brne	.+34     	; 0x2684 <door_seq+0x62>

		motor_instruction = MOTOR_BREAK;
    2662:	82 e0       	ldi	r24, 0x02	; 2
    2664:	80 93 88 00 	sts	0x0088, r24
		Motor_ExecuteInstruction();
    2668:	0e 94 67 17 	call	0x2ece	; 0x2ece <Motor_ExecuteInstruction>

		UART_sendByte(DOOR_IS_CLOSE);
    266c:	80 e1       	ldi	r24, 0x10	; 16
    266e:	0e 94 41 17 	call	0x2e82	; 0x2e82 <UART_sendByte>
		UART_sendByte(DOOR_IS_CLOSE);
    2672:	80 e1       	ldi	r24, 0x10	; 16
    2674:	0e 94 41 17 	call	0x2e82	; 0x2e82 <UART_sendByte>
		CallBack_counter_2 = 0;
    2678:	10 92 7b 00 	sts	0x007B, r1
		Timers_setTimer1CompareCallBack(NULL);  // Detach the callback
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <Timers_setTimer1CompareCallBack>
	}
	CallBack_counter_2++;
    2684:	80 91 7b 00 	lds	r24, 0x007B
    2688:	8f 5f       	subi	r24, 0xFF	; 255
    268a:	80 93 7b 00 	sts	0x007B, r24

}
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <__vector_9>:
/*
 * timer 0 overflow ISR
 * checking if the callback pointer is NULL
 * if not then execute the callback function on ISR entry
 * */
ISR(TIMER0_OVF_vect){
    2694:	1f 92       	push	r1
    2696:	0f 92       	push	r0
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	0f 92       	push	r0
    269c:	11 24       	eor	r1, r1
    269e:	2f 93       	push	r18
    26a0:	3f 93       	push	r19
    26a2:	4f 93       	push	r20
    26a4:	5f 93       	push	r21
    26a6:	6f 93       	push	r22
    26a8:	7f 93       	push	r23
    26aa:	8f 93       	push	r24
    26ac:	9f 93       	push	r25
    26ae:	af 93       	push	r26
    26b0:	bf 93       	push	r27
    26b2:	ef 93       	push	r30
    26b4:	ff 93       	push	r31
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62

	if(TIMER0_OVF_callBackPtr != NULL)
    26be:	80 91 7c 00 	lds	r24, 0x007C
    26c2:	90 91 7d 00 	lds	r25, 0x007D
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	29 f0       	breq	.+10     	; 0x26d4 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*TIMER0_OVF_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    26ca:	e0 91 7c 00 	lds	r30, 0x007C
    26ce:	f0 91 7d 00 	lds	r31, 0x007D
    26d2:	09 95       	icall
	}
}
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	ff 91       	pop	r31
    26da:	ef 91       	pop	r30
    26dc:	bf 91       	pop	r27
    26de:	af 91       	pop	r26
    26e0:	9f 91       	pop	r25
    26e2:	8f 91       	pop	r24
    26e4:	7f 91       	pop	r23
    26e6:	6f 91       	pop	r22
    26e8:	5f 91       	pop	r21
    26ea:	4f 91       	pop	r20
    26ec:	3f 91       	pop	r19
    26ee:	2f 91       	pop	r18
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	0f 90       	pop	r0
    26f6:	1f 90       	pop	r1
    26f8:	18 95       	reti

000026fa <__vector_19>:
/*
 * timer 0 compare match ISR
 * checking if the callback pointer is NULL
 * if not then execute the callback function on ISR entry
 * */
ISR(TIMER0_COMP_vect){
    26fa:	1f 92       	push	r1
    26fc:	0f 92       	push	r0
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	0f 92       	push	r0
    2702:	11 24       	eor	r1, r1
    2704:	2f 93       	push	r18
    2706:	3f 93       	push	r19
    2708:	4f 93       	push	r20
    270a:	5f 93       	push	r21
    270c:	6f 93       	push	r22
    270e:	7f 93       	push	r23
    2710:	8f 93       	push	r24
    2712:	9f 93       	push	r25
    2714:	af 93       	push	r26
    2716:	bf 93       	push	r27
    2718:	ef 93       	push	r30
    271a:	ff 93       	push	r31
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62

	if(TIMER0_COMP_callBackPtr != NULL)
    2724:	80 91 7e 00 	lds	r24, 0x007E
    2728:	90 91 7f 00 	lds	r25, 0x007F
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	29 f0       	breq	.+10     	; 0x273a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*TIMER0_COMP_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2730:	e0 91 7e 00 	lds	r30, 0x007E
    2734:	f0 91 7f 00 	lds	r31, 0x007F
    2738:	09 95       	icall
	}

}
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	ff 91       	pop	r31
    2740:	ef 91       	pop	r30
    2742:	bf 91       	pop	r27
    2744:	af 91       	pop	r26
    2746:	9f 91       	pop	r25
    2748:	8f 91       	pop	r24
    274a:	7f 91       	pop	r23
    274c:	6f 91       	pop	r22
    274e:	5f 91       	pop	r21
    2750:	4f 91       	pop	r20
    2752:	3f 91       	pop	r19
    2754:	2f 91       	pop	r18
    2756:	0f 90       	pop	r0
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	0f 90       	pop	r0
    275c:	1f 90       	pop	r1
    275e:	18 95       	reti

00002760 <__vector_8>:
/*
 * timer 1 overflow ISR
 * checking if the callback pointer is NULL
 * if not then execute the callback function on ISR entry
 * */
ISR(TIMER1_OVF_vect){
    2760:	1f 92       	push	r1
    2762:	0f 92       	push	r0
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	0f 92       	push	r0
    2768:	11 24       	eor	r1, r1
    276a:	2f 93       	push	r18
    276c:	3f 93       	push	r19
    276e:	4f 93       	push	r20
    2770:	5f 93       	push	r21
    2772:	6f 93       	push	r22
    2774:	7f 93       	push	r23
    2776:	8f 93       	push	r24
    2778:	9f 93       	push	r25
    277a:	af 93       	push	r26
    277c:	bf 93       	push	r27
    277e:	ef 93       	push	r30
    2780:	ff 93       	push	r31
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62

	if(TIMER1_OVF_callBackPtr != NULL)
    278a:	80 91 80 00 	lds	r24, 0x0080
    278e:	90 91 81 00 	lds	r25, 0x0081
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	29 f0       	breq	.+10     	; 0x27a0 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*TIMER1_OVF_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2796:	e0 91 80 00 	lds	r30, 0x0080
    279a:	f0 91 81 00 	lds	r31, 0x0081
    279e:	09 95       	icall
	}

}
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	ff 91       	pop	r31
    27a6:	ef 91       	pop	r30
    27a8:	bf 91       	pop	r27
    27aa:	af 91       	pop	r26
    27ac:	9f 91       	pop	r25
    27ae:	8f 91       	pop	r24
    27b0:	7f 91       	pop	r23
    27b2:	6f 91       	pop	r22
    27b4:	5f 91       	pop	r21
    27b6:	4f 91       	pop	r20
    27b8:	3f 91       	pop	r19
    27ba:	2f 91       	pop	r18
    27bc:	0f 90       	pop	r0
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	0f 90       	pop	r0
    27c2:	1f 90       	pop	r1
    27c4:	18 95       	reti

000027c6 <__vector_6>:
 * checking if the callback pointer is NULL
 * if not then execute the callback function on ISR entry
 * */


ISR(TIMER1_COMPA_vect){
    27c6:	1f 92       	push	r1
    27c8:	0f 92       	push	r0
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	0f 92       	push	r0
    27ce:	11 24       	eor	r1, r1
    27d0:	2f 93       	push	r18
    27d2:	3f 93       	push	r19
    27d4:	4f 93       	push	r20
    27d6:	5f 93       	push	r21
    27d8:	6f 93       	push	r22
    27da:	7f 93       	push	r23
    27dc:	8f 93       	push	r24
    27de:	9f 93       	push	r25
    27e0:	af 93       	push	r26
    27e2:	bf 93       	push	r27
    27e4:	ef 93       	push	r30
    27e6:	ff 93       	push	r31
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62

	if(TIMER1_COMPA_callBackPtr != NULL)
    27f0:	80 91 82 00 	lds	r24, 0x0082
    27f4:	90 91 83 00 	lds	r25, 0x0083
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	29 f0       	breq	.+10     	; 0x2806 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*TIMER1_COMPA_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    27fc:	e0 91 82 00 	lds	r30, 0x0082
    2800:	f0 91 83 00 	lds	r31, 0x0083
    2804:	09 95       	icall
	}

}
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	ff 91       	pop	r31
    280c:	ef 91       	pop	r30
    280e:	bf 91       	pop	r27
    2810:	af 91       	pop	r26
    2812:	9f 91       	pop	r25
    2814:	8f 91       	pop	r24
    2816:	7f 91       	pop	r23
    2818:	6f 91       	pop	r22
    281a:	5f 91       	pop	r21
    281c:	4f 91       	pop	r20
    281e:	3f 91       	pop	r19
    2820:	2f 91       	pop	r18
    2822:	0f 90       	pop	r0
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	0f 90       	pop	r0
    2828:	1f 90       	pop	r1
    282a:	18 95       	reti

0000282c <__vector_4>:
/*
 * timer 2 overflow ISR
 * checking if the callback pointer is NULL
 * if not then execute the callback function on ISR entry
 * */
ISR(TIMER2_OVF_vect){
    282c:	1f 92       	push	r1
    282e:	0f 92       	push	r0
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	0f 92       	push	r0
    2834:	11 24       	eor	r1, r1
    2836:	2f 93       	push	r18
    2838:	3f 93       	push	r19
    283a:	4f 93       	push	r20
    283c:	5f 93       	push	r21
    283e:	6f 93       	push	r22
    2840:	7f 93       	push	r23
    2842:	8f 93       	push	r24
    2844:	9f 93       	push	r25
    2846:	af 93       	push	r26
    2848:	bf 93       	push	r27
    284a:	ef 93       	push	r30
    284c:	ff 93       	push	r31
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62

	if(TIMER2_OVF_callBackPtr != NULL)
    2856:	80 91 84 00 	lds	r24, 0x0084
    285a:	90 91 85 00 	lds	r25, 0x0085
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	29 f0       	breq	.+10     	; 0x286c <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*TIMER2_OVF_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2862:	e0 91 84 00 	lds	r30, 0x0084
    2866:	f0 91 85 00 	lds	r31, 0x0085
    286a:	09 95       	icall
	}
}
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	ff 91       	pop	r31
    2872:	ef 91       	pop	r30
    2874:	bf 91       	pop	r27
    2876:	af 91       	pop	r26
    2878:	9f 91       	pop	r25
    287a:	8f 91       	pop	r24
    287c:	7f 91       	pop	r23
    287e:	6f 91       	pop	r22
    2880:	5f 91       	pop	r21
    2882:	4f 91       	pop	r20
    2884:	3f 91       	pop	r19
    2886:	2f 91       	pop	r18
    2888:	0f 90       	pop	r0
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	0f 90       	pop	r0
    288e:	1f 90       	pop	r1
    2890:	18 95       	reti

00002892 <__vector_3>:
/*
 * timer 2 compare match ISR
 * checking if the callback pointer is NULL
 * if not then execute the callback function on ISR entry
 * */
ISR(TIMER2_COMP_vect){
    2892:	1f 92       	push	r1
    2894:	0f 92       	push	r0
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	0f 92       	push	r0
    289a:	11 24       	eor	r1, r1
    289c:	2f 93       	push	r18
    289e:	3f 93       	push	r19
    28a0:	4f 93       	push	r20
    28a2:	5f 93       	push	r21
    28a4:	6f 93       	push	r22
    28a6:	7f 93       	push	r23
    28a8:	8f 93       	push	r24
    28aa:	9f 93       	push	r25
    28ac:	af 93       	push	r26
    28ae:	bf 93       	push	r27
    28b0:	ef 93       	push	r30
    28b2:	ff 93       	push	r31
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62

	if(TIMER2_COMP_callBackPtr != NULL)
    28bc:	80 91 86 00 	lds	r24, 0x0086
    28c0:	90 91 87 00 	lds	r25, 0x0087
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	29 f0       	breq	.+10     	; 0x28d2 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*TIMER2_COMP_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    28c8:	e0 91 86 00 	lds	r30, 0x0086
    28cc:	f0 91 87 00 	lds	r31, 0x0087
    28d0:	09 95       	icall
	}
}
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	ff 91       	pop	r31
    28d8:	ef 91       	pop	r30
    28da:	bf 91       	pop	r27
    28dc:	af 91       	pop	r26
    28de:	9f 91       	pop	r25
    28e0:	8f 91       	pop	r24
    28e2:	7f 91       	pop	r23
    28e4:	6f 91       	pop	r22
    28e6:	5f 91       	pop	r21
    28e8:	4f 91       	pop	r20
    28ea:	3f 91       	pop	r19
    28ec:	2f 91       	pop	r18
    28ee:	0f 90       	pop	r0
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	0f 90       	pop	r0
    28f4:	1f 90       	pop	r1
    28f6:	18 95       	reti

000028f8 <Timers_INIT>:
*
* OUTPUTS :	uint8 used for error and false entries handling
*
* NOTES :	none
***************************************************************************/
uint8 Timers_INIT(const TIMER_configType * TIMER_configType){
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	2b 97       	sbiw	r28, 0x0b	; 11
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
    290c:	9a 83       	std	Y+2, r25	; 0x02
    290e:	89 83       	std	Y+1, r24	; 0x01

	switch(TIMER_configType->timer){
    2910:	e9 81       	ldd	r30, Y+1	; 0x01
    2912:	fa 81       	ldd	r31, Y+2	; 0x02
    2914:	80 81       	ld	r24, Z
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	3b 87       	std	Y+11, r19	; 0x0b
    291c:	2a 87       	std	Y+10, r18	; 0x0a
    291e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2920:	9b 85       	ldd	r25, Y+11	; 0x0b
    2922:	81 30       	cpi	r24, 0x01	; 1
    2924:	91 05       	cpc	r25, r1
    2926:	09 f4       	brne	.+2      	; 0x292a <Timers_INIT+0x32>
    2928:	5b c0       	rjmp	.+182    	; 0x29e0 <Timers_INIT+0xe8>
    292a:	2a 85       	ldd	r18, Y+10	; 0x0a
    292c:	3b 85       	ldd	r19, Y+11	; 0x0b
    292e:	22 30       	cpi	r18, 0x02	; 2
    2930:	31 05       	cpc	r19, r1
    2932:	09 f4       	brne	.+2      	; 0x2936 <Timers_INIT+0x3e>
    2934:	a5 c0       	rjmp	.+330    	; 0x2a80 <Timers_INIT+0x188>
    2936:	8a 85       	ldd	r24, Y+10	; 0x0a
    2938:	9b 85       	ldd	r25, Y+11	; 0x0b
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	09 f0       	breq	.+2      	; 0x2940 <Timers_INIT+0x48>
    293e:	f0 c0       	rjmp	.+480    	; 0x2b20 <Timers_INIT+0x228>

	case TIMER_0 :	/* timer 0 is selected */

			TCCR0 = (1<<FOC0); //non PWM mode and CLEAR the rest of the register
    2940:	e3 e5       	ldi	r30, 0x53	; 83
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 e8       	ldi	r24, 0x80	; 128
    2946:	80 83       	st	Z, r24
			TCCR0 = (TCCR0&0xF8) | (TIMER_configType->prescaler); // select the prescaler
    2948:	a3 e5       	ldi	r26, 0x53	; 83
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e3 e5       	ldi	r30, 0x53	; 83
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	98 2f       	mov	r25, r24
    2954:	98 7f       	andi	r25, 0xF8	; 248
    2956:	e9 81       	ldd	r30, Y+1	; 0x01
    2958:	fa 81       	ldd	r31, Y+2	; 0x02
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	89 2b       	or	r24, r25
    295e:	8c 93       	st	X, r24
			TCNT0=(uint8)TIMER_configType->initialValue; // start counting from initial value
    2960:	a2 e5       	ldi	r26, 0x52	; 82
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e9 81       	ldd	r30, Y+1	; 0x01
    2966:	fa 81       	ldd	r31, Y+2	; 0x02
    2968:	85 81       	ldd	r24, Z+5	; 0x05
    296a:	96 81       	ldd	r25, Z+6	; 0x06
    296c:	8c 93       	st	X, r24


			switch(TIMER_configType->timerMode){
    296e:	e9 81       	ldd	r30, Y+1	; 0x01
    2970:	fa 81       	ldd	r31, Y+2	; 0x02
    2972:	81 81       	ldd	r24, Z+1	; 0x01
    2974:	28 2f       	mov	r18, r24
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	39 87       	std	Y+9, r19	; 0x09
    297a:	28 87       	std	Y+8, r18	; 0x08
    297c:	88 85       	ldd	r24, Y+8	; 0x08
    297e:	99 85       	ldd	r25, Y+9	; 0x09
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	31 f0       	breq	.+12     	; 0x2990 <Timers_INIT+0x98>
    2984:	28 85       	ldd	r18, Y+8	; 0x08
    2986:	39 85       	ldd	r19, Y+9	; 0x09
    2988:	21 30       	cpi	r18, 0x01	; 1
    298a:	31 05       	cpc	r19, r1
    298c:	81 f0       	breq	.+32     	; 0x29ae <Timers_INIT+0xb6>
    298e:	25 c0       	rjmp	.+74     	; 0x29da <Timers_INIT+0xe2>
				 * 		125KHz		--	8us		--	2ms
				 * 		31.25Khz	--	32us	--	8.2ms
				 * 		7.8125Khz 	--	128us	--	32.78ms
				 *
				 * */
				TCCR0|=(1<<WGM01)|(1<<WGM00); // select normal mode
    2990:	a3 e5       	ldi	r26, 0x53	; 83
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e3 e5       	ldi	r30, 0x53	; 83
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	88 64       	ori	r24, 0x48	; 72
    299c:	8c 93       	st	X, r24

				TIMSK |= (1<<TOIE0); // enables timer 0 overflow interrupt
    299e:	a9 e5       	ldi	r26, 0x59	; 89
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e9 e5       	ldi	r30, 0x59	; 89
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	81 60       	ori	r24, 0x01	; 1
    29aa:	8c 93       	st	X, r24
    29ac:	bc c0       	rjmp	.+376    	; 0x2b26 <Timers_INIT+0x22e>

			break;
			case COMPARE_MATCH :


				TCCR0 |= (1<<WGM01); // select compare mode
    29ae:	a3 e5       	ldi	r26, 0x53	; 83
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e3 e5       	ldi	r30, 0x53	; 83
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	88 60       	ori	r24, 0x08	; 8
    29ba:	8c 93       	st	X, r24
				OCR0 = (uint8)TIMER_configType->compareValue;
    29bc:	ac e5       	ldi	r26, 0x5C	; 92
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e9 81       	ldd	r30, Y+1	; 0x01
    29c2:	fa 81       	ldd	r31, Y+2	; 0x02
    29c4:	83 81       	ldd	r24, Z+3	; 0x03
    29c6:	94 81       	ldd	r25, Z+4	; 0x04
    29c8:	8c 93       	st	X, r24
				TIMSK |= (1<<OCIE0);	// enables timer 0 Compare interrupt
    29ca:	a9 e5       	ldi	r26, 0x59	; 89
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e9 e5       	ldi	r30, 0x59	; 89
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	82 60       	ori	r24, 0x02	; 2
    29d6:	8c 93       	st	X, r24
    29d8:	a6 c0       	rjmp	.+332    	; 0x2b26 <Timers_INIT+0x22e>

			break;


			default:
				return 15;  //15 means wrong timer mode
    29da:	3f e0       	ldi	r19, 0x0F	; 15
    29dc:	3f 83       	std	Y+7, r19	; 0x07
    29de:	a4 c0       	rjmp	.+328    	; 0x2b28 <Timers_INIT+0x230>
	break;  // case TIMER_0 break


	case TIMER_1 :    /* timer 1 is selected */

			TCCR1A = (1<<FOC1A); //non PWM mode and CLEAR the rest of the register
    29e0:	ef e4       	ldi	r30, 0x4F	; 79
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	88 e0       	ldi	r24, 0x08	; 8
    29e6:	80 83       	st	Z, r24
			TCCR1B = 0;
    29e8:	ee e4       	ldi	r30, 0x4E	; 78
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	10 82       	st	Z, r1
			TCCR1B = (TCCR1B&0xF8) | (TIMER_configType->prescaler); // select the prescaler
    29ee:	ae e4       	ldi	r26, 0x4E	; 78
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	ee e4       	ldi	r30, 0x4E	; 78
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	98 2f       	mov	r25, r24
    29fa:	98 7f       	andi	r25, 0xF8	; 248
    29fc:	e9 81       	ldd	r30, Y+1	; 0x01
    29fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	89 2b       	or	r24, r25
    2a04:	8c 93       	st	X, r24
			TCNT1=TIMER_configType->initialValue; // start counting from initial value
    2a06:	ac e4       	ldi	r26, 0x4C	; 76
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0e:	85 81       	ldd	r24, Z+5	; 0x05
    2a10:	96 81       	ldd	r25, Z+6	; 0x06
    2a12:	11 96       	adiw	r26, 0x01	; 1
    2a14:	9c 93       	st	X, r25
    2a16:	8e 93       	st	-X, r24

			switch(TIMER_configType->timerMode){
    2a18:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a1c:	81 81       	ldd	r24, Z+1	; 0x01
    2a1e:	28 2f       	mov	r18, r24
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	3e 83       	std	Y+6, r19	; 0x06
    2a24:	2d 83       	std	Y+5, r18	; 0x05
    2a26:	8d 81       	ldd	r24, Y+5	; 0x05
    2a28:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	31 f0       	breq	.+12     	; 0x2a3a <Timers_INIT+0x142>
    2a2e:	2d 81       	ldd	r18, Y+5	; 0x05
    2a30:	3e 81       	ldd	r19, Y+6	; 0x06
    2a32:	21 30       	cpi	r18, 0x01	; 1
    2a34:	31 05       	cpc	r19, r1
    2a36:	49 f0       	breq	.+18     	; 0x2a4a <Timers_INIT+0x152>
    2a38:	20 c0       	rjmp	.+64     	; 0x2a7a <Timers_INIT+0x182>
					 * */
				/*
				 * no editing of TCCR1B is needed because its already zeroed in line 144
				 * */

				TIMSK |= (1<<TOIE1); // enables timer 1 overflow interrupt
    2a3a:	a9 e5       	ldi	r26, 0x59	; 89
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	e9 e5       	ldi	r30, 0x59	; 89
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	84 60       	ori	r24, 0x04	; 4
    2a46:	8c 93       	st	X, r24
    2a48:	6e c0       	rjmp	.+220    	; 0x2b26 <Timers_INIT+0x22e>

			break;
			case COMPARE_MATCH :


				TCCR1B |= (1<<WGM12); // select compare mode
    2a4a:	ae e4       	ldi	r26, 0x4E	; 78
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	ee e4       	ldi	r30, 0x4E	; 78
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	88 60       	ori	r24, 0x08	; 8
    2a56:	8c 93       	st	X, r24

				OCR1A = TIMER_configType->compareValue;  // no casting because OCR1A is 16 bit
    2a58:	aa e4       	ldi	r26, 0x4A	; 74
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a60:	83 81       	ldd	r24, Z+3	; 0x03
    2a62:	94 81       	ldd	r25, Z+4	; 0x04
    2a64:	11 96       	adiw	r26, 0x01	; 1
    2a66:	9c 93       	st	X, r25
    2a68:	8e 93       	st	-X, r24
				TIMSK |= (1<<OCIE1A);	// enables timer 1 Compare interrupt
    2a6a:	a9 e5       	ldi	r26, 0x59	; 89
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	e9 e5       	ldi	r30, 0x59	; 89
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	80 61       	ori	r24, 0x10	; 16
    2a76:	8c 93       	st	X, r24
    2a78:	56 c0       	rjmp	.+172    	; 0x2b26 <Timers_INIT+0x22e>

			break;


			default:
				return 15;  //15 means wrong timer mode
    2a7a:	3f e0       	ldi	r19, 0x0F	; 15
    2a7c:	3f 83       	std	Y+7, r19	; 0x07
    2a7e:	54 c0       	rjmp	.+168    	; 0x2b28 <Timers_INIT+0x230>


	case TIMER_2 :	/* timer 2 is selected */


		TCCR2 = (1<<FOC2); //non PWM mode and CLEAR the rest of the register
    2a80:	e5 e4       	ldi	r30, 0x45	; 69
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 e8       	ldi	r24, 0x80	; 128
    2a86:	80 83       	st	Z, r24
		TCCR2 = (TCCR2&0xF8) | (TIMER_configType->prescaler); // select the prescaler
    2a88:	a5 e4       	ldi	r26, 0x45	; 69
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e5 e4       	ldi	r30, 0x45	; 69
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	98 2f       	mov	r25, r24
    2a94:	98 7f       	andi	r25, 0xF8	; 248
    2a96:	e9 81       	ldd	r30, Y+1	; 0x01
    2a98:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9a:	82 81       	ldd	r24, Z+2	; 0x02
    2a9c:	89 2b       	or	r24, r25
    2a9e:	8c 93       	st	X, r24
		TCNT2=(uint8)TIMER_configType->initialValue; // start counting from initial value
    2aa0:	a4 e4       	ldi	r26, 0x44	; 68
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa8:	85 81       	ldd	r24, Z+5	; 0x05
    2aaa:	96 81       	ldd	r25, Z+6	; 0x06
    2aac:	8c 93       	st	X, r24

		switch(TIMER_configType->timerMode){
    2aae:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab2:	81 81       	ldd	r24, Z+1	; 0x01
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	3c 83       	std	Y+4, r19	; 0x04
    2aba:	2b 83       	std	Y+3, r18	; 0x03
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	31 f0       	breq	.+12     	; 0x2ad0 <Timers_INIT+0x1d8>
    2ac4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ac6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ac8:	21 30       	cpi	r18, 0x01	; 1
    2aca:	31 05       	cpc	r19, r1
    2acc:	81 f0       	breq	.+32     	; 0x2aee <Timers_INIT+0x1f6>
    2ace:	25 c0       	rjmp	.+74     	; 0x2b1a <Timers_INIT+0x222>
			 * 		125KHz		--	8us		--	2ms
			 * 		31.25Khz	--	32us	--	8.2ms
			 * 		7.8125Khz 	--	128us	--	32.78ms
			 *
			 * */
			TCCR2|=(1<<WGM21)|(1<<WGM20); // select normal mode
    2ad0:	a5 e4       	ldi	r26, 0x45	; 69
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	e5 e4       	ldi	r30, 0x45	; 69
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	88 64       	ori	r24, 0x48	; 72
    2adc:	8c 93       	st	X, r24

			TIMSK |= (1<<TOIE2); // enables timer 0 overflow interrupt
    2ade:	a9 e5       	ldi	r26, 0x59	; 89
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	e9 e5       	ldi	r30, 0x59	; 89
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	80 64       	ori	r24, 0x40	; 64
    2aea:	8c 93       	st	X, r24
    2aec:	1c c0       	rjmp	.+56     	; 0x2b26 <Timers_INIT+0x22e>

		break;
		case COMPARE_MATCH :


			TCCR2 |= (1<<WGM21); // select compare mode
    2aee:	a5 e4       	ldi	r26, 0x45	; 69
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	e5 e4       	ldi	r30, 0x45	; 69
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	88 60       	ori	r24, 0x08	; 8
    2afa:	8c 93       	st	X, r24
			OCR2 = (uint8)TIMER_configType->compareValue;
    2afc:	a3 e4       	ldi	r26, 0x43	; 67
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e9 81       	ldd	r30, Y+1	; 0x01
    2b02:	fa 81       	ldd	r31, Y+2	; 0x02
    2b04:	83 81       	ldd	r24, Z+3	; 0x03
    2b06:	94 81       	ldd	r25, Z+4	; 0x04
    2b08:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE2);	// enables timer 0 Compare interrupt
    2b0a:	a9 e5       	ldi	r26, 0x59	; 89
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	e9 e5       	ldi	r30, 0x59	; 89
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	80 68       	ori	r24, 0x80	; 128
    2b16:	8c 93       	st	X, r24
    2b18:	06 c0       	rjmp	.+12     	; 0x2b26 <Timers_INIT+0x22e>

		break;


		default:
			return 15;  //15 means wrong timer mode   ******remember to remove magic numbers********
    2b1a:	3f e0       	ldi	r19, 0x0F	; 15
    2b1c:	3f 83       	std	Y+7, r19	; 0x07
    2b1e:	04 c0       	rjmp	.+8      	; 0x2b28 <Timers_INIT+0x230>
		} // end of second switch
	break;   //  case TIMER_2 break


	default:
		return 5; // 5 means wrong timer number
    2b20:	85 e0       	ldi	r24, 0x05	; 5
    2b22:	8f 83       	std	Y+7, r24	; 0x07
    2b24:	01 c0       	rjmp	.+2      	; 0x2b28 <Timers_INIT+0x230>
	}


return 0;  // 0 means no errors occured
    2b26:	1f 82       	std	Y+7, r1	; 0x07
    2b28:	8f 81       	ldd	r24, Y+7	; 0x07
} // End of INIT function
    2b2a:	2b 96       	adiw	r28, 0x0b	; 11
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <Timers_setTimer0OverFlowCallBack>:
*
* OUTPUTS :	void
*
* NOTES :	none
***************************************************************************/
void Timers_setTimer0OverFlowCallBack(void(*a_ptr)(void)){
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	00 d0       	rcall	.+0      	; 0x2b42 <Timers_setTimer0OverFlowCallBack+0x6>
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	9a 83       	std	Y+2, r25	; 0x02
    2b48:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_COMPA_callBackPtr = a_ptr;
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4e:	90 93 83 00 	sts	0x0083, r25
    2b52:	80 93 82 00 	sts	0x0082, r24

}
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <Timers_setTimer0CompareCallBack>:
*
* OUTPUTS :	void
*
* NOTES :	none
***************************************************************************/
void Timers_setTimer0CompareCallBack(void(*a_ptr)(void)){
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <Timers_setTimer0CompareCallBack+0x6>
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
    2b6a:	9a 83       	std	Y+2, r25	; 0x02
    2b6c:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_COMPA_callBackPtr = a_ptr;
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	90 93 83 00 	sts	0x0083, r25
    2b76:	80 93 82 00 	sts	0x0082, r24

}
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	08 95       	ret

00002b84 <Timers_setTimer1OverFlowCallBack>:
*
* OUTPUTS :	void
*
* NOTES :	none
***************************************************************************/
void Timers_setTimer1OverFlowCallBack(void(*a_ptr)(void)){
    2b84:	df 93       	push	r29
    2b86:	cf 93       	push	r28
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <Timers_setTimer1OverFlowCallBack+0x6>
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	9a 83       	std	Y+2, r25	; 0x02
    2b90:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_COMPA_callBackPtr = a_ptr;
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	9a 81       	ldd	r25, Y+2	; 0x02
    2b96:	90 93 83 00 	sts	0x0083, r25
    2b9a:	80 93 82 00 	sts	0x0082, r24

}
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <Timers_setTimer1CompareCallBack>:
*
* OUTPUTS :	void
*
* NOTES :	none
***************************************************************************/
void Timers_setTimer1CompareCallBack(void(*a_ptr)(void)){
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	00 d0       	rcall	.+0      	; 0x2bae <Timers_setTimer1CompareCallBack+0x6>
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_COMPA_callBackPtr = a_ptr;
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bba:	90 93 83 00 	sts	0x0083, r25
    2bbe:	80 93 82 00 	sts	0x0082, r24

}
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <Timers_setTimer2OverFlowBack>:
*
* OUTPUTS :	void
*
* NOTES :	none
***************************************************************************/
void Timers_setTimer2OverFlowBack(void(*a_ptr)(void)){
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	00 d0       	rcall	.+0      	; 0x2bd2 <Timers_setTimer2OverFlowBack+0x6>
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	9a 83       	std	Y+2, r25	; 0x02
    2bd8:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_COMPA_callBackPtr = a_ptr;
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bde:	90 93 83 00 	sts	0x0083, r25
    2be2:	80 93 82 00 	sts	0x0082, r24

}
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <Timers_setTimer2CompareCallBack>:
*
* OUTPUTS :	void
*
* NOTES :	none
***************************************************************************/
void Timers_setTimer2CompareCallBack(void(*a_ptr)(void)){
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <Timers_setTimer2CompareCallBack+0x6>
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	9a 83       	std	Y+2, r25	; 0x02
    2bfc:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_COMPA_callBackPtr = a_ptr;
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	90 93 83 00 	sts	0x0083, r25
    2c06:	80 93 82 00 	sts	0x0082, r24

}
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	08 95       	ret

00002c14 <Timers_stop>:

void Timers_stop(_TIMER timer){
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <Timers_stop+0x6>
    2c1a:	0f 92       	push	r0
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    2c20:	89 83       	std	Y+1, r24	; 0x01
	switch(timer){
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	28 2f       	mov	r18, r24
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	3b 83       	std	Y+3, r19	; 0x03
    2c2a:	2a 83       	std	Y+2, r18	; 0x02
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c30:	81 30       	cpi	r24, 0x01	; 1
    2c32:	91 05       	cpc	r25, r1
    2c34:	89 f0       	breq	.+34     	; 0x2c58 <Timers_stop+0x44>
    2c36:	2a 81       	ldd	r18, Y+2	; 0x02
    2c38:	3b 81       	ldd	r19, Y+3	; 0x03
    2c3a:	22 30       	cpi	r18, 0x02	; 2
    2c3c:	31 05       	cpc	r19, r1
    2c3e:	a1 f0       	breq	.+40     	; 0x2c68 <Timers_stop+0x54>
    2c40:	8a 81       	ldd	r24, Y+2	; 0x02
    2c42:	9b 81       	ldd	r25, Y+3	; 0x03
    2c44:	00 97       	sbiw	r24, 0x00	; 0
    2c46:	b9 f4       	brne	.+46     	; 0x2c76 <Timers_stop+0x62>

	case TIMER_0 :

		TCCR0 = (TCCR0&0xF8) | 0; // select the prescaler
    2c48:	a3 e5       	ldi	r26, 0x53	; 83
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	e3 e5       	ldi	r30, 0x53	; 83
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	88 7f       	andi	r24, 0xF8	; 248
    2c54:	8c 93       	st	X, r24
    2c56:	0f c0       	rjmp	.+30     	; 0x2c76 <Timers_stop+0x62>

		break;
	case TIMER_1 :

		TCCR1B = (TCCR1B&0xF8) | 0;
    2c58:	ae e4       	ldi	r26, 0x4E	; 78
    2c5a:	b0 e0       	ldi	r27, 0x00	; 0
    2c5c:	ee e4       	ldi	r30, 0x4E	; 78
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 81       	ld	r24, Z
    2c62:	88 7f       	andi	r24, 0xF8	; 248
    2c64:	8c 93       	st	X, r24
    2c66:	07 c0       	rjmp	.+14     	; 0x2c76 <Timers_stop+0x62>

		break;
	case TIMER_2 :

		TCCR2 = (TCCR2&0xF8) | 0;
    2c68:	a5 e4       	ldi	r26, 0x45	; 69
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	e5 e4       	ldi	r30, 0x45	; 69
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	88 7f       	andi	r24, 0xF8	; 248
    2c74:	8c 93       	st	X, r24

		break;


	}
}
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	cf 91       	pop	r28
    2c7e:	df 91       	pop	r29
    2c80:	08 95       	ret

00002c82 <Timers_clearCounter>:

void Timers_clearCounter(_TIMER timer){
    2c82:	df 93       	push	r29
    2c84:	cf 93       	push	r28
    2c86:	00 d0       	rcall	.+0      	; 0x2c88 <Timers_clearCounter+0x6>
    2c88:	0f 92       	push	r0
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	89 83       	std	Y+1, r24	; 0x01
	switch(timer){
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	3b 83       	std	Y+3, r19	; 0x03
    2c98:	2a 83       	std	Y+2, r18	; 0x02
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9e:	81 30       	cpi	r24, 0x01	; 1
    2ca0:	91 05       	cpc	r25, r1
    2ca2:	69 f0       	breq	.+26     	; 0x2cbe <Timers_clearCounter+0x3c>
    2ca4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ca6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ca8:	22 30       	cpi	r18, 0x02	; 2
    2caa:	31 05       	cpc	r19, r1
    2cac:	69 f0       	breq	.+26     	; 0x2cc8 <Timers_clearCounter+0x46>
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	61 f4       	brne	.+24     	; 0x2cce <Timers_clearCounter+0x4c>

	case TIMER_0 :

		TCNT0 = 0;
    2cb6:	e2 e5       	ldi	r30, 0x52	; 82
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	10 82       	st	Z, r1
    2cbc:	08 c0       	rjmp	.+16     	; 0x2cce <Timers_clearCounter+0x4c>

		break;
	case TIMER_1 :

		TCNT1 = 0 ;
    2cbe:	ec e4       	ldi	r30, 0x4C	; 76
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	11 82       	std	Z+1, r1	; 0x01
    2cc4:	10 82       	st	Z, r1
    2cc6:	03 c0       	rjmp	.+6      	; 0x2cce <Timers_clearCounter+0x4c>

		break;
	case TIMER_2 :

		TCNT2 = 0;
    2cc8:	e4 e4       	ldi	r30, 0x44	; 68
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	10 82       	st	Z, r1

		break;


	}
}
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	08 95       	ret

00002cda <Timers_resume>:


void Timers_resume(_TIMER timer,_TIMER_PRESCALER prescaler){
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	00 d0       	rcall	.+0      	; 0x2ce0 <Timers_resume+0x6>
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <Timers_resume+0x8>
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	6a 83       	std	Y+2, r22	; 0x02
	switch(timer){
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	3c 83       	std	Y+4, r19	; 0x04
    2cf2:	2b 83       	std	Y+3, r18	; 0x03
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf8:	81 30       	cpi	r24, 0x01	; 1
    2cfa:	91 05       	cpc	r25, r1
    2cfc:	a1 f0       	breq	.+40     	; 0x2d26 <Timers_resume+0x4c>
    2cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    2d00:	3c 81       	ldd	r19, Y+4	; 0x04
    2d02:	22 30       	cpi	r18, 0x02	; 2
    2d04:	31 05       	cpc	r19, r1
    2d06:	d1 f0       	breq	.+52     	; 0x2d3c <Timers_resume+0x62>
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	01 f5       	brne	.+64     	; 0x2d50 <Timers_resume+0x76>

	case TIMER_0 :

		TCCR0 = (TCCR0&0xF8) | prescaler; // select the prescaler
    2d10:	a3 e5       	ldi	r26, 0x53	; 83
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	e3 e5       	ldi	r30, 0x53	; 83
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	98 2f       	mov	r25, r24
    2d1c:	98 7f       	andi	r25, 0xF8	; 248
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	89 2b       	or	r24, r25
    2d22:	8c 93       	st	X, r24
    2d24:	15 c0       	rjmp	.+42     	; 0x2d50 <Timers_resume+0x76>

		break;
	case TIMER_1 :

		TCCR1B = (TCCR1B&0xF8) | prescaler;
    2d26:	ae e4       	ldi	r26, 0x4E	; 78
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	ee e4       	ldi	r30, 0x4E	; 78
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	98 2f       	mov	r25, r24
    2d32:	98 7f       	andi	r25, 0xF8	; 248
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	89 2b       	or	r24, r25
    2d38:	8c 93       	st	X, r24
    2d3a:	0a c0       	rjmp	.+20     	; 0x2d50 <Timers_resume+0x76>

		break;
	case TIMER_2 :

		TCCR2 = (TCCR2&0xF8) | prescaler; // select the prescaler
    2d3c:	a5 e4       	ldi	r26, 0x45	; 69
    2d3e:	b0 e0       	ldi	r27, 0x00	; 0
    2d40:	e5 e4       	ldi	r30, 0x45	; 69
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
    2d46:	98 2f       	mov	r25, r24
    2d48:	98 7f       	andi	r25, 0xF8	; 248
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	89 2b       	or	r24, r25
    2d4e:	8c 93       	st	X, r24

		break;


	}
}
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <UART_init>:
 *  Created on: Nov 27, 2020
 *      Author: Mostafa
 */
#include "UART.h"

void UART_init(const UART_configType * UART_Config_Ptr){
    2d5e:	df 93       	push	r29
    2d60:	cf 93       	push	r28
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <UART_init+0x6>
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <UART_init+0x8>
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	9c 83       	std	Y+4, r25	; 0x04
    2d6c:	8b 83       	std	Y+3, r24	; 0x03


	uint16 BuadPrescaler = ((F_CPU / (UART_Config_Ptr->buadRate)) - 1);
    2d6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d70:	fc 81       	ldd	r31, Y+4	; 0x04
    2d72:	23 81       	ldd	r18, Z+3	; 0x03
    2d74:	34 81       	ldd	r19, Z+4	; 0x04
    2d76:	45 81       	ldd	r20, Z+5	; 0x05
    2d78:	56 81       	ldd	r21, Z+6	; 0x06
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	92 e1       	ldi	r25, 0x12	; 18
    2d7e:	aa e7       	ldi	r26, 0x7A	; 122
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	bc 01       	movw	r22, r24
    2d84:	cd 01       	movw	r24, r26
    2d86:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <__udivmodsi4>
    2d8a:	da 01       	movw	r26, r20
    2d8c:	c9 01       	movw	r24, r18
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	9a 83       	std	Y+2, r25	; 0x02
    2d92:	89 83       	std	Y+1, r24	; 0x01
	/* use double speed mode */
	SET_BIT(UCSRA,U2X);
    2d94:	ab e2       	ldi	r26, 0x2B	; 43
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	eb e2       	ldi	r30, 0x2B	; 43
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	82 60       	ori	r24, 0x02	; 2
    2da0:	8c 93       	st	X, r24

	/* enable the rx and tx */
	SET_BIT(UCSRB,RXEN);
    2da2:	aa e2       	ldi	r26, 0x2A	; 42
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	ea e2       	ldi	r30, 0x2A	; 42
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	80 61       	ori	r24, 0x10	; 16
    2dae:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    2db0:	aa e2       	ldi	r26, 0x2A	; 42
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	ea e2       	ldi	r30, 0x2A	; 42
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	88 60       	ori	r24, 0x08	; 8
    2dbc:	8c 93       	st	X, r24

	/* URSEL must be 1 while writing to UCSRC */
	SET_BIT(UCSRC,URSEL);
    2dbe:	a0 e4       	ldi	r26, 0x40	; 64
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e0 e4       	ldi	r30, 0x40	; 64
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	80 68       	ori	r24, 0x80	; 128
    2dca:	8c 93       	st	X, r24

	/* selecting Async mode */
	CLEAR_BIT(UCSRC,UMSEL);
    2dcc:	a0 e4       	ldi	r26, 0x40	; 64
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	e0 e4       	ldi	r30, 0x40	; 64
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	8f 7b       	andi	r24, 0xBF	; 191
    2dd8:	8c 93       	st	X, r24

	/* selecting frame options */
	UCSRC = 0;
    2dda:	e0 e4       	ldi	r30, 0x40	; 64
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	10 82       	st	Z, r1
		/*selecting Parity */
	UCSRC = (UCSRC & 0xCF) | ( (UART_Config_Ptr->parity) << UPM0 ); // UPM0 is bit 4
    2de0:	a0 e4       	ldi	r26, 0x40	; 64
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e0 e4       	ldi	r30, 0x40	; 64
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	28 2f       	mov	r18, r24
    2dec:	2f 7c       	andi	r18, 0xCF	; 207
    2dee:	eb 81       	ldd	r30, Y+3	; 0x03
    2df0:	fc 81       	ldd	r31, Y+4	; 0x04
    2df2:	80 81       	ld	r24, Z
    2df4:	88 2f       	mov	r24, r24
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	82 95       	swap	r24
    2dfa:	92 95       	swap	r25
    2dfc:	90 7f       	andi	r25, 0xF0	; 240
    2dfe:	98 27       	eor	r25, r24
    2e00:	80 7f       	andi	r24, 0xF0	; 240
    2e02:	98 27       	eor	r25, r24
    2e04:	82 2b       	or	r24, r18
    2e06:	8c 93       	st	X, r24
	/*selecting Data length */
		/* Not a 9bit data mode */
	CLEAR_BIT(UCSRB,UCSZ2);
    2e08:	aa e2       	ldi	r26, 0x2A	; 42
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	ea e2       	ldi	r30, 0x2A	; 42
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	8b 7f       	andi	r24, 0xFB	; 251
    2e14:	8c 93       	st	X, r24
	/* 5,6,7 or 8 data length mode */
	UCSRC = (UCSRC & 0xF9) | ( (UART_Config_Ptr->dataSize) << UCSZ0 ); //UCSZ0 is bit 1
    2e16:	a0 e4       	ldi	r26, 0x40	; 64
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	e0 e4       	ldi	r30, 0x40	; 64
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	28 2f       	mov	r18, r24
    2e22:	29 7f       	andi	r18, 0xF9	; 249
    2e24:	eb 81       	ldd	r30, Y+3	; 0x03
    2e26:	fc 81       	ldd	r31, Y+4	; 0x04
    2e28:	82 81       	ldd	r24, Z+2	; 0x02
    2e2a:	88 2f       	mov	r24, r24
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	88 0f       	add	r24, r24
    2e30:	99 1f       	adc	r25, r25
    2e32:	82 2b       	or	r24, r18
    2e34:	8c 93       	st	X, r24
	/*selecting stop bits */
	UCSRC = (UCSRC & 0xF7) | ( (UART_Config_Ptr->stopBit) << USBS ); //USBS is bit 3
    2e36:	a0 e4       	ldi	r26, 0x40	; 64
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	e0 e4       	ldi	r30, 0x40	; 64
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	28 2f       	mov	r18, r24
    2e42:	27 7f       	andi	r18, 0xF7	; 247
    2e44:	eb 81       	ldd	r30, Y+3	; 0x03
    2e46:	fc 81       	ldd	r31, Y+4	; 0x04
    2e48:	81 81       	ldd	r24, Z+1	; 0x01
    2e4a:	88 2f       	mov	r24, r24
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	88 0f       	add	r24, r24
    2e50:	99 1f       	adc	r25, r25
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	82 2b       	or	r24, r18
    2e5c:	8c 93       	st	X, r24


	/* URSEL must be 0 while writing to UBRR */
	//CLEAR_BIT(UCSRC,URSEL);
	/*Selecting BuadRate : datasheet example on page 150*/
	UBRRH = BuadPrescaler>>8;
    2e5e:	e0 e4       	ldi	r30, 0x40	; 64
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	9a 81       	ldd	r25, Y+2	; 0x02
    2e66:	89 2f       	mov	r24, r25
    2e68:	99 27       	eor	r25, r25
    2e6a:	80 83       	st	Z, r24
	UBRRL = BuadPrescaler;
    2e6c:	e9 e2       	ldi	r30, 0x29	; 41
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	80 83       	st	Z, r24
}
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	0f 90       	pop	r0
    2e7c:	cf 91       	pop	r28
    2e7e:	df 91       	pop	r29
    2e80:	08 95       	ret

00002e82 <UART_sendByte>:

void UART_sendByte(const uint8 Byte){
    2e82:	df 93       	push	r29
    2e84:	cf 93       	push	r28
    2e86:	0f 92       	push	r0
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	89 83       	std	Y+1, r24	; 0x01

	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2e8e:	eb e2       	ldi	r30, 0x2B	; 43
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	88 2f       	mov	r24, r24
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	80 72       	andi	r24, 0x20	; 32
    2e9a:	90 70       	andi	r25, 0x00	; 0
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	b9 f3       	breq	.-18     	; 0x2e8e <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = Byte;
    2ea0:	ec e2       	ldi	r30, 0x2C	; 44
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	80 83       	st	Z, r24

}
    2ea8:	0f 90       	pop	r0
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	08 95       	ret

00002eb0 <UART_receiveByte>:

uint8 UART_receiveByte(void){
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62


	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2eb8:	eb e2       	ldi	r30, 0x2B	; 43
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	88 23       	and	r24, r24
    2ec0:	dc f7       	brge	.-10     	; 0x2eb8 <UART_receiveByte+0x8>

    return UDR;
    2ec2:	ec e2       	ldi	r30, 0x2C	; 44
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
}
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	08 95       	ret

00002ece <Motor_ExecuteInstruction>:
*
* NOTES :	switch case is used instead of if statement because
* 			the motor can only be at one state at the same time
* 			i.e a motor can't be forward and backward at the same time
***************************************************************************/
void Motor_ExecuteInstruction(void){
    2ece:	df 93       	push	r29
    2ed0:	cf 93       	push	r28
    2ed2:	00 d0       	rcall	.+0      	; 0x2ed4 <Motor_ExecuteInstruction+0x6>
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62

		CLEAR_BIT(MOTOR_PORT,MOTOR_IN1);
		CLEAR_BIT(MOTOR_PORT,MOTOR_IN2);
	}*/

	switch(motor_instruction){
    2ed8:	80 91 88 00 	lds	r24, 0x0088
    2edc:	28 2f       	mov	r18, r24
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	3a 83       	std	Y+2, r19	; 0x02
    2ee2:	29 83       	std	Y+1, r18	; 0x01
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee8:	81 30       	cpi	r24, 0x01	; 1
    2eea:	91 05       	cpc	r25, r1
    2eec:	91 f0       	breq	.+36     	; 0x2f12 <Motor_ExecuteInstruction+0x44>
    2eee:	29 81       	ldd	r18, Y+1	; 0x01
    2ef0:	3a 81       	ldd	r19, Y+2	; 0x02
    2ef2:	22 30       	cpi	r18, 0x02	; 2
    2ef4:	31 05       	cpc	r19, r1
    2ef6:	b1 f0       	breq	.+44     	; 0x2f24 <Motor_ExecuteInstruction+0x56>
    2ef8:	89 81       	ldd	r24, Y+1	; 0x01
    2efa:	9a 81       	ldd	r25, Y+2	; 0x02
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	d1 f4       	brne	.+52     	; 0x2f34 <Motor_ExecuteInstruction+0x66>

		case MOTOR_FORWARD:
			DIO_WriteChannel(MOTOR_IN1_CHANNEL,1);
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	61 e0       	ldi	r22, 0x01	; 1
    2f04:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <DIO_WriteChannel>
			DIO_WriteChannel(MOTOR_IN2_CHANNEL,0);
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	60 e0       	ldi	r22, 0x00	; 0
    2f0c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <DIO_WriteChannel>
    2f10:	11 c0       	rjmp	.+34     	; 0x2f34 <Motor_ExecuteInstruction+0x66>

			break;
		case MOTOR_BACKWARD:
			DIO_WriteChannel(MOTOR_IN1_CHANNEL,0);
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	60 e0       	ldi	r22, 0x00	; 0
    2f16:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <DIO_WriteChannel>
			DIO_WriteChannel(MOTOR_IN2_CHANNEL,1);
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	61 e0       	ldi	r22, 0x01	; 1
    2f1e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <DIO_WriteChannel>
    2f22:	08 c0       	rjmp	.+16     	; 0x2f34 <Motor_ExecuteInstruction+0x66>

			break;
		case MOTOR_BREAK:
			DIO_WriteChannel(MOTOR_IN1_CHANNEL,0);
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	60 e0       	ldi	r22, 0x00	; 0
    2f28:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <DIO_WriteChannel>
			DIO_WriteChannel(MOTOR_IN2_CHANNEL,0);
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	60 e0       	ldi	r22, 0x00	; 0
    2f30:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <DIO_WriteChannel>
			break;

	}
}
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	cf 91       	pop	r28
    2f3a:	df 91       	pop	r29
    2f3c:	08 95       	ret

00002f3e <__udivmodqi4>:
    2f3e:	99 1b       	sub	r25, r25
    2f40:	79 e0       	ldi	r23, 0x09	; 9
    2f42:	04 c0       	rjmp	.+8      	; 0x2f4c <__udivmodqi4_ep>

00002f44 <__udivmodqi4_loop>:
    2f44:	99 1f       	adc	r25, r25
    2f46:	96 17       	cp	r25, r22
    2f48:	08 f0       	brcs	.+2      	; 0x2f4c <__udivmodqi4_ep>
    2f4a:	96 1b       	sub	r25, r22

00002f4c <__udivmodqi4_ep>:
    2f4c:	88 1f       	adc	r24, r24
    2f4e:	7a 95       	dec	r23
    2f50:	c9 f7       	brne	.-14     	; 0x2f44 <__udivmodqi4_loop>
    2f52:	80 95       	com	r24
    2f54:	08 95       	ret

00002f56 <__udivmodsi4>:
    2f56:	a1 e2       	ldi	r26, 0x21	; 33
    2f58:	1a 2e       	mov	r1, r26
    2f5a:	aa 1b       	sub	r26, r26
    2f5c:	bb 1b       	sub	r27, r27
    2f5e:	fd 01       	movw	r30, r26
    2f60:	0d c0       	rjmp	.+26     	; 0x2f7c <__udivmodsi4_ep>

00002f62 <__udivmodsi4_loop>:
    2f62:	aa 1f       	adc	r26, r26
    2f64:	bb 1f       	adc	r27, r27
    2f66:	ee 1f       	adc	r30, r30
    2f68:	ff 1f       	adc	r31, r31
    2f6a:	a2 17       	cp	r26, r18
    2f6c:	b3 07       	cpc	r27, r19
    2f6e:	e4 07       	cpc	r30, r20
    2f70:	f5 07       	cpc	r31, r21
    2f72:	20 f0       	brcs	.+8      	; 0x2f7c <__udivmodsi4_ep>
    2f74:	a2 1b       	sub	r26, r18
    2f76:	b3 0b       	sbc	r27, r19
    2f78:	e4 0b       	sbc	r30, r20
    2f7a:	f5 0b       	sbc	r31, r21

00002f7c <__udivmodsi4_ep>:
    2f7c:	66 1f       	adc	r22, r22
    2f7e:	77 1f       	adc	r23, r23
    2f80:	88 1f       	adc	r24, r24
    2f82:	99 1f       	adc	r25, r25
    2f84:	1a 94       	dec	r1
    2f86:	69 f7       	brne	.-38     	; 0x2f62 <__udivmodsi4_loop>
    2f88:	60 95       	com	r22
    2f8a:	70 95       	com	r23
    2f8c:	80 95       	com	r24
    2f8e:	90 95       	com	r25
    2f90:	9b 01       	movw	r18, r22
    2f92:	ac 01       	movw	r20, r24
    2f94:	bd 01       	movw	r22, r26
    2f96:	cf 01       	movw	r24, r30
    2f98:	08 95       	ret

00002f9a <__prologue_saves__>:
    2f9a:	2f 92       	push	r2
    2f9c:	3f 92       	push	r3
    2f9e:	4f 92       	push	r4
    2fa0:	5f 92       	push	r5
    2fa2:	6f 92       	push	r6
    2fa4:	7f 92       	push	r7
    2fa6:	8f 92       	push	r8
    2fa8:	9f 92       	push	r9
    2faa:	af 92       	push	r10
    2fac:	bf 92       	push	r11
    2fae:	cf 92       	push	r12
    2fb0:	df 92       	push	r13
    2fb2:	ef 92       	push	r14
    2fb4:	ff 92       	push	r15
    2fb6:	0f 93       	push	r16
    2fb8:	1f 93       	push	r17
    2fba:	cf 93       	push	r28
    2fbc:	df 93       	push	r29
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	ca 1b       	sub	r28, r26
    2fc4:	db 0b       	sbc	r29, r27
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	09 94       	ijmp

00002fd2 <__epilogue_restores__>:
    2fd2:	2a 88       	ldd	r2, Y+18	; 0x12
    2fd4:	39 88       	ldd	r3, Y+17	; 0x11
    2fd6:	48 88       	ldd	r4, Y+16	; 0x10
    2fd8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fda:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fdc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fde:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fe0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fe2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fe4:	b9 84       	ldd	r11, Y+9	; 0x09
    2fe6:	c8 84       	ldd	r12, Y+8	; 0x08
    2fe8:	df 80       	ldd	r13, Y+7	; 0x07
    2fea:	ee 80       	ldd	r14, Y+6	; 0x06
    2fec:	fd 80       	ldd	r15, Y+5	; 0x05
    2fee:	0c 81       	ldd	r16, Y+4	; 0x04
    2ff0:	1b 81       	ldd	r17, Y+3	; 0x03
    2ff2:	aa 81       	ldd	r26, Y+2	; 0x02
    2ff4:	b9 81       	ldd	r27, Y+1	; 0x01
    2ff6:	ce 0f       	add	r28, r30
    2ff8:	d1 1d       	adc	r29, r1
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
    3004:	ed 01       	movw	r28, r26
    3006:	08 95       	ret

00003008 <_exit>:
    3008:	f8 94       	cli

0000300a <__stop_program>:
    300a:	ff cf       	rjmp	.-2      	; 0x300a <__stop_program>
