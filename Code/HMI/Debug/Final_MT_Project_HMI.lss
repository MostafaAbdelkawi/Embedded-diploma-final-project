
Final_MT_Project_HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00002f5c  00002ff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080012e  0080012e  000030be  2**0
                  ALLOC
  3 .stab         00002958  00000000  00000000  000030c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000118e  00000000  00000000  00005a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000998a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a738  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a898  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ab25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b2f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 33       	cpi	r26, 0x3B	; 59
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <main>
      8a:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e0       	ldi	r26, 0x0E	; 14
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e e0       	ldi	r24, 0x0E	; 14
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <decimaltoOctal>:
 */

#include "DIO.h"

uint8 decimaltoOctal(uint8 deciNum)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <decimaltoOctal+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <decimaltoOctal+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8d 83       	std	Y+5, r24	; 0x05

    // initializations
    uint8 octalNum = 0, countval = 1;
     b56:	1c 82       	std	Y+4, r1	; 0x04
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	8b 83       	std	Y+3, r24	; 0x03
     b5c:	2b c0       	rjmp	.+86     	; 0xbb4 <decimaltoOctal+0x6e>


    while (deciNum != 0) {

        // decimals remainder is calculated
        int remainder = deciNum % 8;
     b5e:	8d 81       	ldd	r24, Y+5	; 0x05
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	87 70       	andi	r24, 0x07	; 7
     b66:	90 70       	andi	r25, 0x00	; 0
     b68:	9a 83       	std	Y+2, r25	; 0x02
     b6a:	89 83       	std	Y+1, r24	; 0x01

        // storing the octalvalue
        octalNum += remainder * countval;
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	28 2f       	mov	r18, r24
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	9a 81       	ldd	r25, Y+2	; 0x02
     b76:	ac 01       	movw	r20, r24
     b78:	24 9f       	mul	r18, r20
     b7a:	c0 01       	movw	r24, r0
     b7c:	25 9f       	mul	r18, r21
     b7e:	90 0d       	add	r25, r0
     b80:	34 9f       	mul	r19, r20
     b82:	90 0d       	add	r25, r0
     b84:	11 24       	eor	r1, r1
     b86:	98 2f       	mov	r25, r24
     b88:	8c 81       	ldd	r24, Y+4	; 0x04
     b8a:	89 0f       	add	r24, r25
     b8c:	8c 83       	std	Y+4, r24	; 0x04

        // storing exponential value
        countval = countval * 10;
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	9c 01       	movw	r18, r24
     b96:	22 0f       	add	r18, r18
     b98:	33 1f       	adc	r19, r19
     b9a:	c9 01       	movw	r24, r18
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	82 0f       	add	r24, r18
     ba6:	93 1f       	adc	r25, r19
     ba8:	8b 83       	std	Y+3, r24	; 0x03
        deciNum /= 8;
     baa:	8d 81       	ldd	r24, Y+5	; 0x05
     bac:	86 95       	lsr	r24
     bae:	86 95       	lsr	r24
     bb0:	86 95       	lsr	r24
     bb2:	8d 83       	std	Y+5, r24	; 0x05

    // initializations
    uint8 octalNum = 0, countval = 1;


    while (deciNum != 0) {
     bb4:	8d 81       	ldd	r24, Y+5	; 0x05
     bb6:	88 23       	and	r24, r24
     bb8:	91 f6       	brne	.-92     	; 0xb5e <decimaltoOctal+0x18>

        // storing exponential value
        countval = countval * 10;
        deciNum /= 8;
    }
    return octalNum;
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <DIO_WriteChannel>:

uint8 DIO_WriteChannel(uint8 channelNumber,bool level){
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	2e 97       	sbiw	r28, 0x0e	; 14
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	8b 83       	std	Y+3, r24	; 0x03
     be2:	6c 83       	std	Y+4, r22	; 0x04
	// switch case with multiple entries cause same result i.e no break
	// OR
	//Conceder using the octal numbering system

	uint8 Octal;
	uint8 error = 0;
     be4:	19 82       	std	Y+1, r1	; 0x01
	Octal = decimaltoOctal(channelNumber);
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	0e 94 a3 05 	call	0xb46	; 0xb46 <decimaltoOctal>
     bec:	8a 83       	std	Y+2, r24	; 0x02
	switch((Octal/10)){
     bee:	8a 81       	ldd	r24, Y+2	; 0x02
     bf0:	9a e0       	ldi	r25, 0x0A	; 10
     bf2:	69 2f       	mov	r22, r25
     bf4:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	3e 87       	std	Y+14, r19	; 0x0e
     bfe:	2d 87       	std	Y+13, r18	; 0x0d
     c00:	8d 85       	ldd	r24, Y+13	; 0x0d
     c02:	9e 85       	ldd	r25, Y+14	; 0x0e
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	91 05       	cpc	r25, r1
     c08:	09 f4       	brne	.+2      	; 0xc0c <DIO_WriteChannel+0x40>
     c0a:	87 c0       	rjmp	.+270    	; 0xd1a <DIO_WriteChannel+0x14e>
     c0c:	2d 85       	ldd	r18, Y+13	; 0x0d
     c0e:	3e 85       	ldd	r19, Y+14	; 0x0e
     c10:	22 30       	cpi	r18, 0x02	; 2
     c12:	31 05       	cpc	r19, r1
     c14:	2c f4       	brge	.+10     	; 0xc20 <DIO_WriteChannel+0x54>
     c16:	8d 85       	ldd	r24, Y+13	; 0x0d
     c18:	9e 85       	ldd	r25, Y+14	; 0x0e
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	71 f0       	breq	.+28     	; 0xc3a <DIO_WriteChannel+0x6e>
     c1e:	cd c1       	rjmp	.+922    	; 0xfba <DIO_WriteChannel+0x3ee>
     c20:	2d 85       	ldd	r18, Y+13	; 0x0d
     c22:	3e 85       	ldd	r19, Y+14	; 0x0e
     c24:	22 30       	cpi	r18, 0x02	; 2
     c26:	31 05       	cpc	r19, r1
     c28:	09 f4       	brne	.+2      	; 0xc2c <DIO_WriteChannel+0x60>
     c2a:	e7 c0       	rjmp	.+462    	; 0xdfa <DIO_WriteChannel+0x22e>
     c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c30:	83 30       	cpi	r24, 0x03	; 3
     c32:	91 05       	cpc	r25, r1
     c34:	09 f4       	brne	.+2      	; 0xc38 <DIO_WriteChannel+0x6c>
     c36:	51 c1       	rjmp	.+674    	; 0xeda <DIO_WriteChannel+0x30e>
     c38:	c0 c1       	rjmp	.+896    	; 0xfba <DIO_WriteChannel+0x3ee>


	case 0 :
		switch(level){
     c3a:	8c 81       	ldd	r24, Y+4	; 0x04
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	3c 87       	std	Y+12, r19	; 0x0c
     c42:	2b 87       	std	Y+11, r18	; 0x0b
     c44:	8b 85       	ldd	r24, Y+11	; 0x0b
     c46:	9c 85       	ldd	r25, Y+12	; 0x0c
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	31 f0       	breq	.+12     	; 0xc58 <DIO_WriteChannel+0x8c>
     c4c:	2b 85       	ldd	r18, Y+11	; 0x0b
     c4e:	3c 85       	ldd	r19, Y+12	; 0x0c
     c50:	21 30       	cpi	r18, 0x01	; 1
     c52:	31 05       	cpc	r19, r1
     c54:	91 f1       	breq	.+100    	; 0xcba <DIO_WriteChannel+0xee>
     c56:	b3 c1       	rjmp	.+870    	; 0xfbe <DIO_WriteChannel+0x3f2>
		case 0 :
			SET_BIT(DDRA,(Octal%10));
     c58:	aa e3       	ldi	r26, 0x3A	; 58
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	ea e3       	ldi	r30, 0x3A	; 58
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	48 2f       	mov	r20, r24
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	9a e0       	ldi	r25, 0x0A	; 10
     c68:	69 2f       	mov	r22, r25
     c6a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     c6e:	89 2f       	mov	r24, r25
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <DIO_WriteChannel+0xb2>
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	2a 95       	dec	r18
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <DIO_WriteChannel+0xae>
     c82:	84 2b       	or	r24, r20
     c84:	8c 93       	st	X, r24
			CLEAR_BIT(PORTA,(Octal%10));
     c86:	ab e3       	ldi	r26, 0x3B	; 59
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	eb e3       	ldi	r30, 0x3B	; 59
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	9a e0       	ldi	r25, 0x0A	; 10
     c96:	69 2f       	mov	r22, r25
     c98:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     c9c:	89 2f       	mov	r24, r25
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	02 2e       	mov	r0, r18
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <DIO_WriteChannel+0xe2>
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <DIO_WriteChannel+0xde>
     cb2:	80 95       	com	r24
     cb4:	84 23       	and	r24, r20
     cb6:	8c 93       	st	X, r24
     cb8:	82 c1       	rjmp	.+772    	; 0xfbe <DIO_WriteChannel+0x3f2>
			break;
		case 1 :
			SET_BIT(DDRA,(Octal%10));
     cba:	aa e3       	ldi	r26, 0x3A	; 58
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	ea e3       	ldi	r30, 0x3A	; 58
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	9a e0       	ldi	r25, 0x0A	; 10
     cca:	69 2f       	mov	r22, r25
     ccc:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     cd0:	89 2f       	mov	r24, r25
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_WriteChannel+0x114>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	2a 95       	dec	r18
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_WriteChannel+0x110>
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
			SET_BIT(PORTA,(Octal%10));
     ce8:	ab e3       	ldi	r26, 0x3B	; 59
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	eb e3       	ldi	r30, 0x3B	; 59
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	48 2f       	mov	r20, r24
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	9a e0       	ldi	r25, 0x0A	; 10
     cf8:	69 2f       	mov	r22, r25
     cfa:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     cfe:	89 2f       	mov	r24, r25
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_WriteChannel+0x144>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_WriteChannel+0x140>
     d14:	84 2b       	or	r24, r20
     d16:	8c 93       	st	X, r24
     d18:	52 c1       	rjmp	.+676    	; 0xfbe <DIO_WriteChannel+0x3f2>
			break;
		}
		break;
	case 1 :
		switch(level){
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	3a 87       	std	Y+10, r19	; 0x0a
     d22:	29 87       	std	Y+9, r18	; 0x09
     d24:	89 85       	ldd	r24, Y+9	; 0x09
     d26:	9a 85       	ldd	r25, Y+10	; 0x0a
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	31 f0       	breq	.+12     	; 0xd38 <DIO_WriteChannel+0x16c>
     d2c:	29 85       	ldd	r18, Y+9	; 0x09
     d2e:	3a 85       	ldd	r19, Y+10	; 0x0a
     d30:	21 30       	cpi	r18, 0x01	; 1
     d32:	31 05       	cpc	r19, r1
     d34:	91 f1       	breq	.+100    	; 0xd9a <DIO_WriteChannel+0x1ce>
     d36:	43 c1       	rjmp	.+646    	; 0xfbe <DIO_WriteChannel+0x3f2>
		case 0 :
			SET_BIT(DDRB,(Octal%10));
     d38:	a7 e3       	ldi	r26, 0x37	; 55
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e7 e3       	ldi	r30, 0x37	; 55
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	48 2f       	mov	r20, r24
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9a e0       	ldi	r25, 0x0A	; 10
     d48:	69 2f       	mov	r22, r25
     d4a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     d4e:	89 2f       	mov	r24, r25
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <DIO_WriteChannel+0x192>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	2a 95       	dec	r18
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <DIO_WriteChannel+0x18e>
     d62:	84 2b       	or	r24, r20
     d64:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB,(Octal%10));
     d66:	a8 e3       	ldi	r26, 0x38	; 56
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e8 e3       	ldi	r30, 0x38	; 56
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	9a e0       	ldi	r25, 0x0A	; 10
     d76:	69 2f       	mov	r22, r25
     d78:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     d7c:	89 2f       	mov	r24, r25
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 2e       	mov	r0, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <DIO_WriteChannel+0x1c2>
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <DIO_WriteChannel+0x1be>
     d92:	80 95       	com	r24
     d94:	84 23       	and	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	12 c1       	rjmp	.+548    	; 0xfbe <DIO_WriteChannel+0x3f2>
			break;
		case 1 :
			SET_BIT(DDRB,(Octal%10));
     d9a:	a7 e3       	ldi	r26, 0x37	; 55
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e7 e3       	ldi	r30, 0x37	; 55
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	9a e0       	ldi	r25, 0x0A	; 10
     daa:	69 2f       	mov	r22, r25
     dac:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     db0:	89 2f       	mov	r24, r25
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_WriteChannel+0x1f4>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	2a 95       	dec	r18
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_WriteChannel+0x1f0>
     dc4:	84 2b       	or	r24, r20
     dc6:	8c 93       	st	X, r24
			SET_BIT(PORTB,(Octal%10));
     dc8:	a8 e3       	ldi	r26, 0x38	; 56
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e8 e3       	ldi	r30, 0x38	; 56
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	48 2f       	mov	r20, r24
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	9a e0       	ldi	r25, 0x0A	; 10
     dd8:	69 2f       	mov	r22, r25
     dda:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     dde:	89 2f       	mov	r24, r25
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_WriteChannel+0x224>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <DIO_WriteChannel+0x220>
     df4:	84 2b       	or	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	e2 c0       	rjmp	.+452    	; 0xfbe <DIO_WriteChannel+0x3f2>
			break;
		}
		break;
	case 2 :
		switch(level){
     dfa:	8c 81       	ldd	r24, Y+4	; 0x04
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	38 87       	std	Y+8, r19	; 0x08
     e02:	2f 83       	std	Y+7, r18	; 0x07
     e04:	8f 81       	ldd	r24, Y+7	; 0x07
     e06:	98 85       	ldd	r25, Y+8	; 0x08
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	31 f0       	breq	.+12     	; 0xe18 <DIO_WriteChannel+0x24c>
     e0c:	2f 81       	ldd	r18, Y+7	; 0x07
     e0e:	38 85       	ldd	r19, Y+8	; 0x08
     e10:	21 30       	cpi	r18, 0x01	; 1
     e12:	31 05       	cpc	r19, r1
     e14:	91 f1       	breq	.+100    	; 0xe7a <DIO_WriteChannel+0x2ae>
     e16:	d3 c0       	rjmp	.+422    	; 0xfbe <DIO_WriteChannel+0x3f2>
		case 0 :
			SET_BIT(DDRC,(Octal%10));
     e18:	a4 e3       	ldi	r26, 0x34	; 52
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e4 e3       	ldi	r30, 0x34	; 52
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	9a e0       	ldi	r25, 0x0A	; 10
     e28:	69 2f       	mov	r22, r25
     e2a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     e2e:	89 2f       	mov	r24, r25
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_WriteChannel+0x272>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	2a 95       	dec	r18
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_WriteChannel+0x26e>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24
			CLEAR_BIT(PORTC,(Octal%10));
     e46:	a5 e3       	ldi	r26, 0x35	; 53
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e3       	ldi	r30, 0x35	; 53
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	9a e0       	ldi	r25, 0x0A	; 10
     e56:	69 2f       	mov	r22, r25
     e58:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     e5c:	89 2f       	mov	r24, r25
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_WriteChannel+0x2a2>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_WriteChannel+0x29e>
     e72:	80 95       	com	r24
     e74:	84 23       	and	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	a2 c0       	rjmp	.+324    	; 0xfbe <DIO_WriteChannel+0x3f2>
			break;
		case 1 :
			SET_BIT(DDRC,(Octal%10));
     e7a:	a4 e3       	ldi	r26, 0x34	; 52
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e4 e3       	ldi	r30, 0x34	; 52
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	9a e0       	ldi	r25, 0x0A	; 10
     e8a:	69 2f       	mov	r22, r25
     e8c:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     e90:	89 2f       	mov	r24, r25
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_WriteChannel+0x2d4>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	2a 95       	dec	r18
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <DIO_WriteChannel+0x2d0>
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
			SET_BIT(PORTC,(Octal%10));
     ea8:	a5 e3       	ldi	r26, 0x35	; 53
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e5 e3       	ldi	r30, 0x35	; 53
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	9a e0       	ldi	r25, 0x0A	; 10
     eb8:	69 2f       	mov	r22, r25
     eba:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     ebe:	89 2f       	mov	r24, r25
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 2e       	mov	r0, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_WriteChannel+0x304>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	0a 94       	dec	r0
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_WriteChannel+0x300>
     ed4:	84 2b       	or	r24, r20
     ed6:	8c 93       	st	X, r24
     ed8:	72 c0       	rjmp	.+228    	; 0xfbe <DIO_WriteChannel+0x3f2>
			break;
		}
		break;
	case 3 :

		switch(level){
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	3e 83       	std	Y+6, r19	; 0x06
     ee2:	2d 83       	std	Y+5, r18	; 0x05
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	31 f0       	breq	.+12     	; 0xef8 <DIO_WriteChannel+0x32c>
     eec:	2d 81       	ldd	r18, Y+5	; 0x05
     eee:	3e 81       	ldd	r19, Y+6	; 0x06
     ef0:	21 30       	cpi	r18, 0x01	; 1
     ef2:	31 05       	cpc	r19, r1
     ef4:	91 f1       	breq	.+100    	; 0xf5a <DIO_WriteChannel+0x38e>
     ef6:	63 c0       	rjmp	.+198    	; 0xfbe <DIO_WriteChannel+0x3f2>
		case 0 :
			SET_BIT(DDRD,(Octal%10));
     ef8:	a1 e3       	ldi	r26, 0x31	; 49
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e1 e3       	ldi	r30, 0x31	; 49
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	9a e0       	ldi	r25, 0x0A	; 10
     f08:	69 2f       	mov	r22, r25
     f0a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     f0e:	89 2f       	mov	r24, r25
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_WriteChannel+0x352>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	2a 95       	dec	r18
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_WriteChannel+0x34e>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
			CLEAR_BIT(PORTD,(Octal%10));
     f26:	a2 e3       	ldi	r26, 0x32	; 50
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e2 e3       	ldi	r30, 0x32	; 50
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9a e0       	ldi	r25, 0x0A	; 10
     f36:	69 2f       	mov	r22, r25
     f38:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     f3c:	89 2f       	mov	r24, r25
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_WriteChannel+0x382>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_WriteChannel+0x37e>
     f52:	80 95       	com	r24
     f54:	84 23       	and	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	32 c0       	rjmp	.+100    	; 0xfbe <DIO_WriteChannel+0x3f2>
			break;
		case 1 :
			SET_BIT(DDRD,(Octal%10));
     f5a:	a1 e3       	ldi	r26, 0x31	; 49
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e1 e3       	ldi	r30, 0x31	; 49
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	9a e0       	ldi	r25, 0x0A	; 10
     f6a:	69 2f       	mov	r22, r25
     f6c:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     f70:	89 2f       	mov	r24, r25
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_WriteChannel+0x3b4>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	2a 95       	dec	r18
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_WriteChannel+0x3b0>
     f84:	84 2b       	or	r24, r20
     f86:	8c 93       	st	X, r24
			SET_BIT(PORTD,(Octal%10));
     f88:	a2 e3       	ldi	r26, 0x32	; 50
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e2 e3       	ldi	r30, 0x32	; 50
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	9a e0       	ldi	r25, 0x0A	; 10
     f98:	69 2f       	mov	r22, r25
     f9a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     f9e:	89 2f       	mov	r24, r25
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_WriteChannel+0x3e4>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_WriteChannel+0x3e0>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_WriteChannel+0x3f2>
			break;
		}
		break;

	default :   /*Return 1 indicating a wrong channel number */
		error = 1;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	89 83       	std	Y+1, r24	; 0x01

	}

	return error;	/* correct channel number  */
     fbe:	89 81       	ldd	r24, Y+1	; 0x01

}
     fc0:	2e 96       	adiw	r28, 0x0e	; 14
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <DIO_ReadChannel>:

uint8 DIO_ReadChannel(uint8 channelNumber){
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <DIO_ReadChannel+0x6>
     fd8:	00 d0       	rcall	.+0      	; 0xfda <DIO_ReadChannel+0x8>
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	8b 83       	std	Y+3, r24	; 0x03
	// switch case with multiple entries cause same result i.e no break
	//Conceder using the octal numbering system

	uint8 Octal;
	uint8 pinState;
	Octal = decimaltoOctal(channelNumber);
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	0e 94 a3 05 	call	0xb46	; 0xb46 <decimaltoOctal>
     fe8:	8a 83       	std	Y+2, r24	; 0x02
		switch((Octal/10)){
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	9a e0       	ldi	r25, 0x0A	; 10
     fee:	69 2f       	mov	r22, r25
     ff0:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3d 83       	std	Y+5, r19	; 0x05
     ffa:	2c 83       	std	Y+4, r18	; 0x04
     ffc:	4c 81       	ldd	r20, Y+4	; 0x04
     ffe:	5d 81       	ldd	r21, Y+5	; 0x05
    1000:	41 30       	cpi	r20, 0x01	; 1
    1002:	51 05       	cpc	r21, r1
    1004:	09 f4       	brne	.+2      	; 0x1008 <DIO_ReadChannel+0x36>
    1006:	4d c0       	rjmp	.+154    	; 0x10a2 <DIO_ReadChannel+0xd0>
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	91 05       	cpc	r25, r1
    1010:	34 f4       	brge	.+12     	; 0x101e <DIO_ReadChannel+0x4c>
    1012:	2c 81       	ldd	r18, Y+4	; 0x04
    1014:	3d 81       	ldd	r19, Y+5	; 0x05
    1016:	21 15       	cp	r18, r1
    1018:	31 05       	cpc	r19, r1
    101a:	71 f0       	breq	.+28     	; 0x1038 <DIO_ReadChannel+0x66>
    101c:	e1 c0       	rjmp	.+450    	; 0x11e0 <DIO_ReadChannel+0x20e>
    101e:	4c 81       	ldd	r20, Y+4	; 0x04
    1020:	5d 81       	ldd	r21, Y+5	; 0x05
    1022:	42 30       	cpi	r20, 0x02	; 2
    1024:	51 05       	cpc	r21, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <DIO_ReadChannel+0x58>
    1028:	71 c0       	rjmp	.+226    	; 0x110c <DIO_ReadChannel+0x13a>
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	9d 81       	ldd	r25, Y+5	; 0x05
    102e:	83 30       	cpi	r24, 0x03	; 3
    1030:	91 05       	cpc	r25, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <DIO_ReadChannel+0x64>
    1034:	a0 c0       	rjmp	.+320    	; 0x1176 <DIO_ReadChannel+0x1a4>
    1036:	d4 c0       	rjmp	.+424    	; 0x11e0 <DIO_ReadChannel+0x20e>


		case 0 :

			CLEAR_BIT(DDRA,(Octal%10)); // make the pin INPUT
    1038:	aa e3       	ldi	r26, 0x3A	; 58
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	ea e3       	ldi	r30, 0x3A	; 58
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	9a e0       	ldi	r25, 0x0A	; 10
    1048:	69 2f       	mov	r22, r25
    104a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
    104e:	89 2f       	mov	r24, r25
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_ReadChannel+0x8c>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	2a 95       	dec	r18
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_ReadChannel+0x88>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
			if(BIT_IS_CLEAR(PINA,(Octal%10))){
    1068:	e9 e3       	ldi	r30, 0x39	; 57
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	9a e0       	ldi	r25, 0x0A	; 10
    1076:	69 2f       	mov	r22, r25
    1078:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
    107c:	89 2f       	mov	r24, r25
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	a9 01       	movw	r20, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_ReadChannel+0xb8>
    1086:	55 95       	asr	r21
    1088:	47 95       	ror	r20
    108a:	8a 95       	dec	r24
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_ReadChannel+0xb4>
    108e:	ca 01       	movw	r24, r20
    1090:	81 70       	andi	r24, 0x01	; 1
    1092:	90 70       	andi	r25, 0x00	; 0
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	11 f4       	brne	.+4      	; 0x109c <DIO_ReadChannel+0xca>
				pinState = 0;
    1098:	19 82       	std	Y+1, r1	; 0x01
    109a:	a4 c0       	rjmp	.+328    	; 0x11e4 <DIO_ReadChannel+0x212>
			}else {
				pinState = 1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	a1 c0       	rjmp	.+322    	; 0x11e4 <DIO_ReadChannel+0x212>
			}
			break;
		case 1 :

			CLEAR_BIT(DDRB,(Octal%10)); // make the pin INPUT
    10a2:	a7 e3       	ldi	r26, 0x37	; 55
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e7 e3       	ldi	r30, 0x37	; 55
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	9a e0       	ldi	r25, 0x0A	; 10
    10b2:	69 2f       	mov	r22, r25
    10b4:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
    10b8:	89 2f       	mov	r24, r25
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_ReadChannel+0xf6>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	2a 95       	dec	r18
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_ReadChannel+0xf2>
    10cc:	80 95       	com	r24
    10ce:	84 23       	and	r24, r20
    10d0:	8c 93       	st	X, r24
			if(BIT_IS_CLEAR(PINB,(Octal%10))){
    10d2:	e6 e3       	ldi	r30, 0x36	; 54
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	9a e0       	ldi	r25, 0x0A	; 10
    10e0:	69 2f       	mov	r22, r25
    10e2:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
    10e6:	89 2f       	mov	r24, r25
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a9 01       	movw	r20, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_ReadChannel+0x122>
    10f0:	55 95       	asr	r21
    10f2:	47 95       	ror	r20
    10f4:	8a 95       	dec	r24
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_ReadChannel+0x11e>
    10f8:	ca 01       	movw	r24, r20
    10fa:	81 70       	andi	r24, 0x01	; 1
    10fc:	90 70       	andi	r25, 0x00	; 0
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	11 f4       	brne	.+4      	; 0x1106 <DIO_ReadChannel+0x134>
				pinState = 0;
    1102:	19 82       	std	Y+1, r1	; 0x01
    1104:	6f c0       	rjmp	.+222    	; 0x11e4 <DIO_ReadChannel+0x212>
			}else {
				pinState = 1;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	6c c0       	rjmp	.+216    	; 0x11e4 <DIO_ReadChannel+0x212>
			}

			break;
		case 2 :

			CLEAR_BIT(DDRC,(Octal%10)); // make the pin INPUT
    110c:	a4 e3       	ldi	r26, 0x34	; 52
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e4 e3       	ldi	r30, 0x34	; 52
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	9a e0       	ldi	r25, 0x0A	; 10
    111c:	69 2f       	mov	r22, r25
    111e:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
    1122:	89 2f       	mov	r24, r25
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_ReadChannel+0x160>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	2a 95       	dec	r18
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_ReadChannel+0x15c>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
			if(BIT_IS_CLEAR(PINC,(Octal%10))){
    113c:	e3 e3       	ldi	r30, 0x33	; 51
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	9a e0       	ldi	r25, 0x0A	; 10
    114a:	69 2f       	mov	r22, r25
    114c:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
    1150:	89 2f       	mov	r24, r25
    1152:	88 2f       	mov	r24, r24
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a9 01       	movw	r20, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_ReadChannel+0x18c>
    115a:	55 95       	asr	r21
    115c:	47 95       	ror	r20
    115e:	8a 95       	dec	r24
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_ReadChannel+0x188>
    1162:	ca 01       	movw	r24, r20
    1164:	81 70       	andi	r24, 0x01	; 1
    1166:	90 70       	andi	r25, 0x00	; 0
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	11 f4       	brne	.+4      	; 0x1170 <DIO_ReadChannel+0x19e>
				pinState = 0;
    116c:	19 82       	std	Y+1, r1	; 0x01
    116e:	3a c0       	rjmp	.+116    	; 0x11e4 <DIO_ReadChannel+0x212>
			}else {
				pinState = 1;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	37 c0       	rjmp	.+110    	; 0x11e4 <DIO_ReadChannel+0x212>
			}
			break;
		case 3 :

			CLEAR_BIT(DDRD,(Octal%10)); // make the pin INPUT
    1176:	a1 e3       	ldi	r26, 0x31	; 49
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e1 e3       	ldi	r30, 0x31	; 49
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	9a e0       	ldi	r25, 0x0A	; 10
    1186:	69 2f       	mov	r22, r25
    1188:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
    118c:	89 2f       	mov	r24, r25
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_ReadChannel+0x1ca>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	2a 95       	dec	r18
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_ReadChannel+0x1c6>
    11a0:	80 95       	com	r24
    11a2:	84 23       	and	r24, r20
    11a4:	8c 93       	st	X, r24
			if(BIT_IS_CLEAR(PIND,(Octal%10))){
    11a6:	e0 e3       	ldi	r30, 0x30	; 48
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	9a e0       	ldi	r25, 0x0A	; 10
    11b4:	69 2f       	mov	r22, r25
    11b6:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodqi4>
    11ba:	89 2f       	mov	r24, r25
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a9 01       	movw	r20, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_ReadChannel+0x1f6>
    11c4:	55 95       	asr	r21
    11c6:	47 95       	ror	r20
    11c8:	8a 95       	dec	r24
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_ReadChannel+0x1f2>
    11cc:	ca 01       	movw	r24, r20
    11ce:	81 70       	andi	r24, 0x01	; 1
    11d0:	90 70       	andi	r25, 0x00	; 0
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	11 f4       	brne	.+4      	; 0x11da <DIO_ReadChannel+0x208>
				pinState = 0;
    11d6:	19 82       	std	Y+1, r1	; 0x01
    11d8:	05 c0       	rjmp	.+10     	; 0x11e4 <DIO_ReadChannel+0x212>
			}else {
				pinState = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_ReadChannel+0x212>
			}

			break;

		default :   /*Return 3 indicating a wrong channel number */
			pinState = 3;
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	89 83       	std	Y+1, r24	; 0x01

		}



	return pinState;
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <Keypad_init>:
				  {'1','2','3','-'},
				  {'c','0','=','+'}

							};

void Keypad_init(void){
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62

	Keypad_DIR = 0b00001111;    // make rows output and col input
    11fe:	ea e3       	ldi	r30, 0x3A	; 58
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	8f e0       	ldi	r24, 0x0F	; 15
    1204:	80 83       	st	Z, r24
	Keypad_PORT = 0b11111111;   // activate internal pullup for the input pins and make the output pins High by default
    1206:	eb e3       	ldi	r30, 0x3B	; 59
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	80 83       	st	Z, r24


}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <Keypad_getKey>:
/*note to myself*/
/*clean up the code use logical names*/
uint8 Keypad_getKey(void){
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <Keypad_getKey+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <Keypad_getKey+0x8>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
	uint8 key = 'x';
    1222:	88 e7       	ldi	r24, 0x78	; 120
    1224:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;

		for (i=0;i<4;i++){
    1226:	1c 82       	std	Y+4, r1	; 0x04
    1228:	1b 82       	std	Y+3, r1	; 0x03
    122a:	45 c0       	rjmp	.+138    	; 0x12b6 <Keypad_getKey+0xa2>
			//Keypad_DIR = (0b00001000>>i);     /*in the simulation it wont make a diff*/
			Keypad_PORT = (~(0b00001000)>>i);
    122c:	eb e3       	ldi	r30, 0x3B	; 59
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	87 ef       	ldi	r24, 0xF7	; 247
    1232:	9f ef       	ldi	r25, 0xFF	; 255
    1234:	0b 80       	ldd	r0, Y+3	; 0x03
    1236:	02 c0       	rjmp	.+4      	; 0x123c <Keypad_getKey+0x28>
    1238:	95 95       	asr	r25
    123a:	87 95       	ror	r24
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <Keypad_getKey+0x24>
    1240:	80 83       	st	Z, r24
			for(j=0;j<4;j++){
    1242:	1a 82       	std	Y+2, r1	; 0x02
    1244:	19 82       	std	Y+1, r1	; 0x01
    1246:	2d c0       	rjmp	.+90     	; 0x12a2 <Keypad_getKey+0x8e>
				if(BIT_IS_CLEAR(Keypad_PIN,(j+4))){
    1248:	e9 e3       	ldi	r30, 0x39	; 57
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	04 96       	adiw	r24, 0x04	; 4
    1258:	a9 01       	movw	r20, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <Keypad_getKey+0x4c>
    125c:	55 95       	asr	r21
    125e:	47 95       	ror	r20
    1260:	8a 95       	dec	r24
    1262:	e2 f7       	brpl	.-8      	; 0x125c <Keypad_getKey+0x48>
    1264:	ca 01       	movw	r24, r20
    1266:	81 70       	andi	r24, 0x01	; 1
    1268:	90 70       	andi	r25, 0x00	; 0
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	a9 f4       	brne	.+42     	; 0x1298 <Keypad_getKey+0x84>

					key = keys[3-i][j];
    126e:	23 e0       	ldi	r18, 0x03	; 3
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	a9 01       	movw	r20, r18
    1278:	48 1b       	sub	r20, r24
    127a:	59 0b       	sbc	r21, r25
    127c:	ca 01       	movw	r24, r20
    127e:	29 81       	ldd	r18, Y+1	; 0x01
    1280:	3a 81       	ldd	r19, Y+2	; 0x02
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	82 0f       	add	r24, r18
    128c:	93 1f       	adc	r25, r19
    128e:	fc 01       	movw	r30, r24
    1290:	ea 5e       	subi	r30, 0xEA	; 234
    1292:	fe 4f       	sbci	r31, 0xFE	; 254
    1294:	80 81       	ld	r24, Z
    1296:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;

		for (i=0;i<4;i++){
			//Keypad_DIR = (0b00001000>>i);     /*in the simulation it wont make a diff*/
			Keypad_PORT = (~(0b00001000)>>i);
			for(j=0;j<4;j++){
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	9a 83       	std	Y+2, r25	; 0x02
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	9a 81       	ldd	r25, Y+2	; 0x02
    12a6:	84 30       	cpi	r24, 0x04	; 4
    12a8:	91 05       	cpc	r25, r1
    12aa:	74 f2       	brlt	.-100    	; 0x1248 <Keypad_getKey+0x34>
/*clean up the code use logical names*/
uint8 Keypad_getKey(void){
	uint8 key = 'x';
	int i,j;

		for (i=0;i<4;i++){
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	9c 83       	std	Y+4, r25	; 0x04
    12b4:	8b 83       	std	Y+3, r24	; 0x03
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	84 30       	cpi	r24, 0x04	; 4
    12bc:	91 05       	cpc	r25, r1
    12be:	0c f4       	brge	.+2      	; 0x12c2 <Keypad_getKey+0xae>
    12c0:	b5 cf       	rjmp	.-150    	; 0x122c <Keypad_getKey+0x18>

			}

		}

		return key;
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05

}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <LCD_sendCommand>:
* 			 4-send the command to the LCD , data can only be send within EN pulse
* 			 5-clears the EN bit, end of EN pulse
*
* NOTES :	all delay calls are written to follow the required timing for the LCD
**************************************************************************************/
void LCD_sendCommand(uint8 command){
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	e9 97       	sbiw	r28, 0x39	; 57
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	89 af       	std	Y+57, r24	; 0x39

	CLEAR_BIT(LCD_RS_Reg,LCD_RS_Bit) ;
    12ea:	a2 e3       	ldi	r26, 0x32	; 50
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e2 e3       	ldi	r30, 0x32	; 50
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8f 7e       	andi	r24, 0xEF	; 239
    12f6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_RW_Reg,LCD_RW_Bit);
    12f8:	a2 e3       	ldi	r26, 0x32	; 50
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e2 e3       	ldi	r30, 0x32	; 50
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8f 7d       	andi	r24, 0xDF	; 223
    1304:	8c 93       	st	X, r24
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e8       	ldi	r26, 0x80	; 128
    130c:	bf e3       	ldi	r27, 0x3F	; 63
    130e:	8d ab       	std	Y+53, r24	; 0x35
    1310:	9e ab       	std	Y+54, r25	; 0x36
    1312:	af ab       	std	Y+55, r26	; 0x37
    1314:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1316:	6d a9       	ldd	r22, Y+53	; 0x35
    1318:	7e a9       	ldd	r23, Y+54	; 0x36
    131a:	8f a9       	ldd	r24, Y+55	; 0x37
    131c:	98 ad       	ldd	r25, Y+56	; 0x38
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	4a ef       	ldi	r20, 0xFA	; 250
    1324:	54 e4       	ldi	r21, 0x44	; 68
    1326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	89 ab       	std	Y+49, r24	; 0x31
    1330:	9a ab       	std	Y+50, r25	; 0x32
    1332:	ab ab       	std	Y+51, r26	; 0x33
    1334:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1336:	69 a9       	ldd	r22, Y+49	; 0x31
    1338:	7a a9       	ldd	r23, Y+50	; 0x32
    133a:	8b a9       	ldd	r24, Y+51	; 0x33
    133c:	9c a9       	ldd	r25, Y+52	; 0x34
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e8       	ldi	r20, 0x80	; 128
    1344:	5f e3       	ldi	r21, 0x3F	; 63
    1346:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    134a:	88 23       	and	r24, r24
    134c:	2c f4       	brge	.+10     	; 0x1358 <LCD_sendCommand+0x84>
		__ticks = 1;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	98 ab       	std	Y+48, r25	; 0x30
    1354:	8f a7       	std	Y+47, r24	; 0x2f
    1356:	3f c0       	rjmp	.+126    	; 0x13d6 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1358:	69 a9       	ldd	r22, Y+49	; 0x31
    135a:	7a a9       	ldd	r23, Y+50	; 0x32
    135c:	8b a9       	ldd	r24, Y+51	; 0x33
    135e:	9c a9       	ldd	r25, Y+52	; 0x34
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	3f ef       	ldi	r19, 0xFF	; 255
    1364:	4f e7       	ldi	r20, 0x7F	; 127
    1366:	57 e4       	ldi	r21, 0x47	; 71
    1368:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    136c:	18 16       	cp	r1, r24
    136e:	4c f5       	brge	.+82     	; 0x13c2 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1370:	6d a9       	ldd	r22, Y+53	; 0x35
    1372:	7e a9       	ldd	r23, Y+54	; 0x36
    1374:	8f a9       	ldd	r24, Y+55	; 0x37
    1376:	98 ad       	ldd	r25, Y+56	; 0x38
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e2       	ldi	r20, 0x20	; 32
    137e:	51 e4       	ldi	r21, 0x41	; 65
    1380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	bc 01       	movw	r22, r24
    138a:	cd 01       	movw	r24, r26
    138c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	98 ab       	std	Y+48, r25	; 0x30
    1396:	8f a7       	std	Y+47, r24	; 0x2f
    1398:	0f c0       	rjmp	.+30     	; 0x13b8 <LCD_sendCommand+0xe4>
    139a:	88 ec       	ldi	r24, 0xC8	; 200
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9e a7       	std	Y+46, r25	; 0x2e
    13a0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    13a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <LCD_sendCommand+0xd2>
    13aa:	9e a7       	std	Y+46, r25	; 0x2e
    13ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b0:	98 a9       	ldd	r25, Y+48	; 0x30
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	98 ab       	std	Y+48, r25	; 0x30
    13b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ba:	98 a9       	ldd	r25, Y+48	; 0x30
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	69 f7       	brne	.-38     	; 0x139a <LCD_sendCommand+0xc6>
    13c0:	14 c0       	rjmp	.+40     	; 0x13ea <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c2:	69 a9       	ldd	r22, Y+49	; 0x31
    13c4:	7a a9       	ldd	r23, Y+50	; 0x32
    13c6:	8b a9       	ldd	r24, Y+51	; 0x33
    13c8:	9c a9       	ldd	r25, Y+52	; 0x34
    13ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	98 ab       	std	Y+48, r25	; 0x30
    13d4:	8f a7       	std	Y+47, r24	; 0x2f
    13d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13d8:	98 a9       	ldd	r25, Y+48	; 0x30
    13da:	9c a7       	std	Y+44, r25	; 0x2c
    13dc:	8b a7       	std	Y+43, r24	; 0x2b
    13de:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <LCD_sendCommand+0x10e>
    13e6:	9c a7       	std	Y+44, r25	; 0x2c
    13e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_EN_Reg,LCD_EN_Bit);
    13ea:	a2 e3       	ldi	r26, 0x32	; 50
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e2 e3       	ldi	r30, 0x32	; 50
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	80 64       	ori	r24, 0x40	; 64
    13f6:	8c 93       	st	X, r24
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a0 e8       	ldi	r26, 0x80	; 128
    13fe:	bf e3       	ldi	r27, 0x3F	; 63
    1400:	8f a3       	std	Y+39, r24	; 0x27
    1402:	98 a7       	std	Y+40, r25	; 0x28
    1404:	a9 a7       	std	Y+41, r26	; 0x29
    1406:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1408:	6f a1       	ldd	r22, Y+39	; 0x27
    140a:	78 a5       	ldd	r23, Y+40	; 0x28
    140c:	89 a5       	ldd	r24, Y+41	; 0x29
    140e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a ef       	ldi	r20, 0xFA	; 250
    1416:	54 e4       	ldi	r21, 0x44	; 68
    1418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	8b a3       	std	Y+35, r24	; 0x23
    1422:	9c a3       	std	Y+36, r25	; 0x24
    1424:	ad a3       	std	Y+37, r26	; 0x25
    1426:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1428:	6b a1       	ldd	r22, Y+35	; 0x23
    142a:	7c a1       	ldd	r23, Y+36	; 0x24
    142c:	8d a1       	ldd	r24, Y+37	; 0x25
    142e:	9e a1       	ldd	r25, Y+38	; 0x26
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143c:	88 23       	and	r24, r24
    143e:	2c f4       	brge	.+10     	; 0x144a <LCD_sendCommand+0x176>
		__ticks = 1;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	9a a3       	std	Y+34, r25	; 0x22
    1446:	89 a3       	std	Y+33, r24	; 0x21
    1448:	3f c0       	rjmp	.+126    	; 0x14c8 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    144a:	6b a1       	ldd	r22, Y+35	; 0x23
    144c:	7c a1       	ldd	r23, Y+36	; 0x24
    144e:	8d a1       	ldd	r24, Y+37	; 0x25
    1450:	9e a1       	ldd	r25, Y+38	; 0x26
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	3f ef       	ldi	r19, 0xFF	; 255
    1456:	4f e7       	ldi	r20, 0x7F	; 127
    1458:	57 e4       	ldi	r21, 0x47	; 71
    145a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    145e:	18 16       	cp	r1, r24
    1460:	4c f5       	brge	.+82     	; 0x14b4 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1462:	6f a1       	ldd	r22, Y+39	; 0x27
    1464:	78 a5       	ldd	r23, Y+40	; 0x28
    1466:	89 a5       	ldd	r24, Y+41	; 0x29
    1468:	9a a5       	ldd	r25, Y+42	; 0x2a
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e2       	ldi	r20, 0x20	; 32
    1470:	51 e4       	ldi	r21, 0x41	; 65
    1472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	bc 01       	movw	r22, r24
    147c:	cd 01       	movw	r24, r26
    147e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	9a a3       	std	Y+34, r25	; 0x22
    1488:	89 a3       	std	Y+33, r24	; 0x21
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <LCD_sendCommand+0x1d6>
    148c:	88 ec       	ldi	r24, 0xC8	; 200
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	98 a3       	std	Y+32, r25	; 0x20
    1492:	8f 8f       	std	Y+31, r24	; 0x1f
    1494:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1496:	98 a1       	ldd	r25, Y+32	; 0x20
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <LCD_sendCommand+0x1c4>
    149c:	98 a3       	std	Y+32, r25	; 0x20
    149e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a0:	89 a1       	ldd	r24, Y+33	; 0x21
    14a2:	9a a1       	ldd	r25, Y+34	; 0x22
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	9a a3       	std	Y+34, r25	; 0x22
    14a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14aa:	89 a1       	ldd	r24, Y+33	; 0x21
    14ac:	9a a1       	ldd	r25, Y+34	; 0x22
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	69 f7       	brne	.-38     	; 0x148c <LCD_sendCommand+0x1b8>
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b4:	6b a1       	ldd	r22, Y+35	; 0x23
    14b6:	7c a1       	ldd	r23, Y+36	; 0x24
    14b8:	8d a1       	ldd	r24, Y+37	; 0x25
    14ba:	9e a1       	ldd	r25, Y+38	; 0x26
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	9a a3       	std	Y+34, r25	; 0x22
    14c6:	89 a3       	std	Y+33, r24	; 0x21
    14c8:	89 a1       	ldd	r24, Y+33	; 0x21
    14ca:	9a a1       	ldd	r25, Y+34	; 0x22
    14cc:	9e 8f       	std	Y+30, r25	; 0x1e
    14ce:	8d 8f       	std	Y+29, r24	; 0x1d
    14d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <LCD_sendCommand+0x200>
    14d8:	9e 8f       	std	Y+30, r25	; 0x1e
    14da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_dataPort = command;
    14dc:	e5 e3       	ldi	r30, 0x35	; 53
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	89 ad       	ldd	r24, Y+57	; 0x39
    14e2:	80 83       	st	Z, r24
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	a0 e8       	ldi	r26, 0x80	; 128
    14ea:	bf e3       	ldi	r27, 0x3F	; 63
    14ec:	89 8f       	std	Y+25, r24	; 0x19
    14ee:	9a 8f       	std	Y+26, r25	; 0x1a
    14f0:	ab 8f       	std	Y+27, r26	; 0x1b
    14f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f4:	69 8d       	ldd	r22, Y+25	; 0x19
    14f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	4a ef       	ldi	r20, 0xFA	; 250
    1502:	54 e4       	ldi	r21, 0x44	; 68
    1504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	8d 8b       	std	Y+21, r24	; 0x15
    150e:	9e 8b       	std	Y+22, r25	; 0x16
    1510:	af 8b       	std	Y+23, r26	; 0x17
    1512:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1514:	6d 89       	ldd	r22, Y+21	; 0x15
    1516:	7e 89       	ldd	r23, Y+22	; 0x16
    1518:	8f 89       	ldd	r24, Y+23	; 0x17
    151a:	98 8d       	ldd	r25, Y+24	; 0x18
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e8       	ldi	r20, 0x80	; 128
    1522:	5f e3       	ldi	r21, 0x3F	; 63
    1524:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1528:	88 23       	and	r24, r24
    152a:	2c f4       	brge	.+10     	; 0x1536 <LCD_sendCommand+0x262>
		__ticks = 1;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	9c 8b       	std	Y+20, r25	; 0x14
    1532:	8b 8b       	std	Y+19, r24	; 0x13
    1534:	3f c0       	rjmp	.+126    	; 0x15b4 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1536:	6d 89       	ldd	r22, Y+21	; 0x15
    1538:	7e 89       	ldd	r23, Y+22	; 0x16
    153a:	8f 89       	ldd	r24, Y+23	; 0x17
    153c:	98 8d       	ldd	r25, Y+24	; 0x18
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	3f ef       	ldi	r19, 0xFF	; 255
    1542:	4f e7       	ldi	r20, 0x7F	; 127
    1544:	57 e4       	ldi	r21, 0x47	; 71
    1546:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    154a:	18 16       	cp	r1, r24
    154c:	4c f5       	brge	.+82     	; 0x15a0 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154e:	69 8d       	ldd	r22, Y+25	; 0x19
    1550:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1552:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1554:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	40 e2       	ldi	r20, 0x20	; 32
    155c:	51 e4       	ldi	r21, 0x41	; 65
    155e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	bc 01       	movw	r22, r24
    1568:	cd 01       	movw	r24, r26
    156a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	9c 8b       	std	Y+20, r25	; 0x14
    1574:	8b 8b       	std	Y+19, r24	; 0x13
    1576:	0f c0       	rjmp	.+30     	; 0x1596 <LCD_sendCommand+0x2c2>
    1578:	88 ec       	ldi	r24, 0xC8	; 200
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9a 8b       	std	Y+18, r25	; 0x12
    157e:	89 8b       	std	Y+17, r24	; 0x11
    1580:	89 89       	ldd	r24, Y+17	; 0x11
    1582:	9a 89       	ldd	r25, Y+18	; 0x12
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <LCD_sendCommand+0x2b0>
    1588:	9a 8b       	std	Y+18, r25	; 0x12
    158a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158c:	8b 89       	ldd	r24, Y+19	; 0x13
    158e:	9c 89       	ldd	r25, Y+20	; 0x14
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	9c 8b       	std	Y+20, r25	; 0x14
    1594:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1596:	8b 89       	ldd	r24, Y+19	; 0x13
    1598:	9c 89       	ldd	r25, Y+20	; 0x14
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	69 f7       	brne	.-38     	; 0x1578 <LCD_sendCommand+0x2a4>
    159e:	14 c0       	rjmp	.+40     	; 0x15c8 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a0:	6d 89       	ldd	r22, Y+21	; 0x15
    15a2:	7e 89       	ldd	r23, Y+22	; 0x16
    15a4:	8f 89       	ldd	r24, Y+23	; 0x17
    15a6:	98 8d       	ldd	r25, Y+24	; 0x18
    15a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	9c 8b       	std	Y+20, r25	; 0x14
    15b2:	8b 8b       	std	Y+19, r24	; 0x13
    15b4:	8b 89       	ldd	r24, Y+19	; 0x13
    15b6:	9c 89       	ldd	r25, Y+20	; 0x14
    15b8:	98 8b       	std	Y+16, r25	; 0x10
    15ba:	8f 87       	std	Y+15, r24	; 0x0f
    15bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15be:	98 89       	ldd	r25, Y+16	; 0x10
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <LCD_sendCommand+0x2ec>
    15c4:	98 8b       	std	Y+16, r25	; 0x10
    15c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_EN_Reg,LCD_EN_Bit);
    15c8:	a2 e3       	ldi	r26, 0x32	; 50
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e2 e3       	ldi	r30, 0x32	; 50
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 7b       	andi	r24, 0xBF	; 191
    15d4:	8c 93       	st	X, r24
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a0 e8       	ldi	r26, 0x80	; 128
    15dc:	bf e3       	ldi	r27, 0x3F	; 63
    15de:	8b 87       	std	Y+11, r24	; 0x0b
    15e0:	9c 87       	std	Y+12, r25	; 0x0c
    15e2:	ad 87       	std	Y+13, r26	; 0x0d
    15e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	4a ef       	ldi	r20, 0xFA	; 250
    15f4:	54 e4       	ldi	r21, 0x44	; 68
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	8f 83       	std	Y+7, r24	; 0x07
    1600:	98 87       	std	Y+8, r25	; 0x08
    1602:	a9 87       	std	Y+9, r26	; 0x09
    1604:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	78 85       	ldd	r23, Y+8	; 0x08
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e8       	ldi	r20, 0x80	; 128
    1614:	5f e3       	ldi	r21, 0x3F	; 63
    1616:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    161a:	88 23       	and	r24, r24
    161c:	2c f4       	brge	.+10     	; 0x1628 <LCD_sendCommand+0x354>
		__ticks = 1;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	3f c0       	rjmp	.+126    	; 0x16a6 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1628:	6f 81       	ldd	r22, Y+7	; 0x07
    162a:	78 85       	ldd	r23, Y+8	; 0x08
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	3f ef       	ldi	r19, 0xFF	; 255
    1634:	4f e7       	ldi	r20, 0x7F	; 127
    1636:	57 e4       	ldi	r21, 0x47	; 71
    1638:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    163c:	18 16       	cp	r1, r24
    163e:	4c f5       	brge	.+82     	; 0x1692 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1640:	6b 85       	ldd	r22, Y+11	; 0x0b
    1642:	7c 85       	ldd	r23, Y+12	; 0x0c
    1644:	8d 85       	ldd	r24, Y+13	; 0x0d
    1646:	9e 85       	ldd	r25, Y+14	; 0x0e
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e2       	ldi	r20, 0x20	; 32
    164e:	51 e4       	ldi	r21, 0x41	; 65
    1650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	bc 01       	movw	r22, r24
    165a:	cd 01       	movw	r24, r26
    165c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	9e 83       	std	Y+6, r25	; 0x06
    1666:	8d 83       	std	Y+5, r24	; 0x05
    1668:	0f c0       	rjmp	.+30     	; 0x1688 <LCD_sendCommand+0x3b4>
    166a:	88 ec       	ldi	r24, 0xC8	; 200
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	8b 83       	std	Y+3, r24	; 0x03
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <LCD_sendCommand+0x3a2>
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	9e 83       	std	Y+6, r25	; 0x06
    1686:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	69 f7       	brne	.-38     	; 0x166a <LCD_sendCommand+0x396>
    1690:	14 c0       	rjmp	.+40     	; 0x16ba <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1692:	6f 81       	ldd	r22, Y+7	; 0x07
    1694:	78 85       	ldd	r23, Y+8	; 0x08
    1696:	89 85       	ldd	r24, Y+9	; 0x09
    1698:	9a 85       	ldd	r25, Y+10	; 0x0a
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	8d 81       	ldd	r24, Y+5	; 0x05
    16a8:	9e 81       	ldd	r25, Y+6	; 0x06
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <LCD_sendCommand+0x3de>
    16b6:	9a 83       	std	Y+2, r25	; 0x02
    16b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    16ba:	e9 96       	adiw	r28, 0x39	; 57
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <LCD_displayCharacter>:
* 			 4-send the character to the LCD , data can only be send within EN pulse
* 			 5-clears the EN bit, end of EN pulse
*
* NOTES :	all delay calls are written to follow the required timing for the LCD
**************************************************************************************/
void LCD_displayCharacter(uint8 data){
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	e9 97       	sbiw	r28, 0x39	; 57
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	89 af       	std	Y+57, r24	; 0x39


	SET_BIT(LCD_RS_Reg,LCD_RS_Bit) ;
    16e2:	a2 e3       	ldi	r26, 0x32	; 50
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e2 e3       	ldi	r30, 0x32	; 50
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	80 61       	ori	r24, 0x10	; 16
    16ee:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_RW_Reg,LCD_RW_Bit);
    16f0:	a2 e3       	ldi	r26, 0x32	; 50
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e2 e3       	ldi	r30, 0x32	; 50
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8f 7d       	andi	r24, 0xDF	; 223
    16fc:	8c 93       	st	X, r24
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a0 e8       	ldi	r26, 0x80	; 128
    1704:	bf e3       	ldi	r27, 0x3F	; 63
    1706:	8d ab       	std	Y+53, r24	; 0x35
    1708:	9e ab       	std	Y+54, r25	; 0x36
    170a:	af ab       	std	Y+55, r26	; 0x37
    170c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170e:	6d a9       	ldd	r22, Y+53	; 0x35
    1710:	7e a9       	ldd	r23, Y+54	; 0x36
    1712:	8f a9       	ldd	r24, Y+55	; 0x37
    1714:	98 ad       	ldd	r25, Y+56	; 0x38
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	4a ef       	ldi	r20, 0xFA	; 250
    171c:	54 e4       	ldi	r21, 0x44	; 68
    171e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	89 ab       	std	Y+49, r24	; 0x31
    1728:	9a ab       	std	Y+50, r25	; 0x32
    172a:	ab ab       	std	Y+51, r26	; 0x33
    172c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    172e:	69 a9       	ldd	r22, Y+49	; 0x31
    1730:	7a a9       	ldd	r23, Y+50	; 0x32
    1732:	8b a9       	ldd	r24, Y+51	; 0x33
    1734:	9c a9       	ldd	r25, Y+52	; 0x34
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e8       	ldi	r20, 0x80	; 128
    173c:	5f e3       	ldi	r21, 0x3F	; 63
    173e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1742:	88 23       	and	r24, r24
    1744:	2c f4       	brge	.+10     	; 0x1750 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	98 ab       	std	Y+48, r25	; 0x30
    174c:	8f a7       	std	Y+47, r24	; 0x2f
    174e:	3f c0       	rjmp	.+126    	; 0x17ce <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1750:	69 a9       	ldd	r22, Y+49	; 0x31
    1752:	7a a9       	ldd	r23, Y+50	; 0x32
    1754:	8b a9       	ldd	r24, Y+51	; 0x33
    1756:	9c a9       	ldd	r25, Y+52	; 0x34
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	3f ef       	ldi	r19, 0xFF	; 255
    175c:	4f e7       	ldi	r20, 0x7F	; 127
    175e:	57 e4       	ldi	r21, 0x47	; 71
    1760:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1764:	18 16       	cp	r1, r24
    1766:	4c f5       	brge	.+82     	; 0x17ba <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1768:	6d a9       	ldd	r22, Y+53	; 0x35
    176a:	7e a9       	ldd	r23, Y+54	; 0x36
    176c:	8f a9       	ldd	r24, Y+55	; 0x37
    176e:	98 ad       	ldd	r25, Y+56	; 0x38
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e2       	ldi	r20, 0x20	; 32
    1776:	51 e4       	ldi	r21, 0x41	; 65
    1778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	98 ab       	std	Y+48, r25	; 0x30
    178e:	8f a7       	std	Y+47, r24	; 0x2f
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <LCD_displayCharacter+0xe4>
    1792:	88 ec       	ldi	r24, 0xC8	; 200
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	9e a7       	std	Y+46, r25	; 0x2e
    1798:	8d a7       	std	Y+45, r24	; 0x2d
    179a:	8d a5       	ldd	r24, Y+45	; 0x2d
    179c:	9e a5       	ldd	r25, Y+46	; 0x2e
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <LCD_displayCharacter+0xd2>
    17a2:	9e a7       	std	Y+46, r25	; 0x2e
    17a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a8:	98 a9       	ldd	r25, Y+48	; 0x30
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	98 ab       	std	Y+48, r25	; 0x30
    17ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17b2:	98 a9       	ldd	r25, Y+48	; 0x30
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	69 f7       	brne	.-38     	; 0x1792 <LCD_displayCharacter+0xc6>
    17b8:	14 c0       	rjmp	.+40     	; 0x17e2 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ba:	69 a9       	ldd	r22, Y+49	; 0x31
    17bc:	7a a9       	ldd	r23, Y+50	; 0x32
    17be:	8b a9       	ldd	r24, Y+51	; 0x33
    17c0:	9c a9       	ldd	r25, Y+52	; 0x34
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	98 ab       	std	Y+48, r25	; 0x30
    17cc:	8f a7       	std	Y+47, r24	; 0x2f
    17ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d0:	98 a9       	ldd	r25, Y+48	; 0x30
    17d2:	9c a7       	std	Y+44, r25	; 0x2c
    17d4:	8b a7       	std	Y+43, r24	; 0x2b
    17d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <LCD_displayCharacter+0x10e>
    17de:	9c a7       	std	Y+44, r25	; 0x2c
    17e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_EN_Reg,LCD_EN_Bit);
    17e2:	a2 e3       	ldi	r26, 0x32	; 50
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e2 e3       	ldi	r30, 0x32	; 50
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 64       	ori	r24, 0x40	; 64
    17ee:	8c 93       	st	X, r24
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a0 e8       	ldi	r26, 0x80	; 128
    17f6:	bf e3       	ldi	r27, 0x3F	; 63
    17f8:	8f a3       	std	Y+39, r24	; 0x27
    17fa:	98 a7       	std	Y+40, r25	; 0x28
    17fc:	a9 a7       	std	Y+41, r26	; 0x29
    17fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1800:	6f a1       	ldd	r22, Y+39	; 0x27
    1802:	78 a5       	ldd	r23, Y+40	; 0x28
    1804:	89 a5       	ldd	r24, Y+41	; 0x29
    1806:	9a a5       	ldd	r25, Y+42	; 0x2a
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	4a ef       	ldi	r20, 0xFA	; 250
    180e:	54 e4       	ldi	r21, 0x44	; 68
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	8b a3       	std	Y+35, r24	; 0x23
    181a:	9c a3       	std	Y+36, r25	; 0x24
    181c:	ad a3       	std	Y+37, r26	; 0x25
    181e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1820:	6b a1       	ldd	r22, Y+35	; 0x23
    1822:	7c a1       	ldd	r23, Y+36	; 0x24
    1824:	8d a1       	ldd	r24, Y+37	; 0x25
    1826:	9e a1       	ldd	r25, Y+38	; 0x26
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e8       	ldi	r20, 0x80	; 128
    182e:	5f e3       	ldi	r21, 0x3F	; 63
    1830:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1834:	88 23       	and	r24, r24
    1836:	2c f4       	brge	.+10     	; 0x1842 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9a a3       	std	Y+34, r25	; 0x22
    183e:	89 a3       	std	Y+33, r24	; 0x21
    1840:	3f c0       	rjmp	.+126    	; 0x18c0 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1842:	6b a1       	ldd	r22, Y+35	; 0x23
    1844:	7c a1       	ldd	r23, Y+36	; 0x24
    1846:	8d a1       	ldd	r24, Y+37	; 0x25
    1848:	9e a1       	ldd	r25, Y+38	; 0x26
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	3f ef       	ldi	r19, 0xFF	; 255
    184e:	4f e7       	ldi	r20, 0x7F	; 127
    1850:	57 e4       	ldi	r21, 0x47	; 71
    1852:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1856:	18 16       	cp	r1, r24
    1858:	4c f5       	brge	.+82     	; 0x18ac <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185a:	6f a1       	ldd	r22, Y+39	; 0x27
    185c:	78 a5       	ldd	r23, Y+40	; 0x28
    185e:	89 a5       	ldd	r24, Y+41	; 0x29
    1860:	9a a5       	ldd	r25, Y+42	; 0x2a
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e2       	ldi	r20, 0x20	; 32
    1868:	51 e4       	ldi	r21, 0x41	; 65
    186a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	9a a3       	std	Y+34, r25	; 0x22
    1880:	89 a3       	std	Y+33, r24	; 0x21
    1882:	0f c0       	rjmp	.+30     	; 0x18a2 <LCD_displayCharacter+0x1d6>
    1884:	88 ec       	ldi	r24, 0xC8	; 200
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	98 a3       	std	Y+32, r25	; 0x20
    188a:	8f 8f       	std	Y+31, r24	; 0x1f
    188c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    188e:	98 a1       	ldd	r25, Y+32	; 0x20
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <LCD_displayCharacter+0x1c4>
    1894:	98 a3       	std	Y+32, r25	; 0x20
    1896:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1898:	89 a1       	ldd	r24, Y+33	; 0x21
    189a:	9a a1       	ldd	r25, Y+34	; 0x22
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	9a a3       	std	Y+34, r25	; 0x22
    18a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a2:	89 a1       	ldd	r24, Y+33	; 0x21
    18a4:	9a a1       	ldd	r25, Y+34	; 0x22
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	69 f7       	brne	.-38     	; 0x1884 <LCD_displayCharacter+0x1b8>
    18aa:	14 c0       	rjmp	.+40     	; 0x18d4 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ac:	6b a1       	ldd	r22, Y+35	; 0x23
    18ae:	7c a1       	ldd	r23, Y+36	; 0x24
    18b0:	8d a1       	ldd	r24, Y+37	; 0x25
    18b2:	9e a1       	ldd	r25, Y+38	; 0x26
    18b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9a a3       	std	Y+34, r25	; 0x22
    18be:	89 a3       	std	Y+33, r24	; 0x21
    18c0:	89 a1       	ldd	r24, Y+33	; 0x21
    18c2:	9a a1       	ldd	r25, Y+34	; 0x22
    18c4:	9e 8f       	std	Y+30, r25	; 0x1e
    18c6:	8d 8f       	std	Y+29, r24	; 0x1d
    18c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <LCD_displayCharacter+0x200>
    18d0:	9e 8f       	std	Y+30, r25	; 0x1e
    18d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_dataPort = data;
    18d4:	e5 e3       	ldi	r30, 0x35	; 53
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	89 ad       	ldd	r24, Y+57	; 0x39
    18da:	80 83       	st	Z, r24
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a0 e8       	ldi	r26, 0x80	; 128
    18e2:	bf e3       	ldi	r27, 0x3F	; 63
    18e4:	89 8f       	std	Y+25, r24	; 0x19
    18e6:	9a 8f       	std	Y+26, r25	; 0x1a
    18e8:	ab 8f       	std	Y+27, r26	; 0x1b
    18ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ec:	69 8d       	ldd	r22, Y+25	; 0x19
    18ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	4a ef       	ldi	r20, 0xFA	; 250
    18fa:	54 e4       	ldi	r21, 0x44	; 68
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	8d 8b       	std	Y+21, r24	; 0x15
    1906:	9e 8b       	std	Y+22, r25	; 0x16
    1908:	af 8b       	std	Y+23, r26	; 0x17
    190a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    190c:	6d 89       	ldd	r22, Y+21	; 0x15
    190e:	7e 89       	ldd	r23, Y+22	; 0x16
    1910:	8f 89       	ldd	r24, Y+23	; 0x17
    1912:	98 8d       	ldd	r25, Y+24	; 0x18
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e8       	ldi	r20, 0x80	; 128
    191a:	5f e3       	ldi	r21, 0x3F	; 63
    191c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1920:	88 23       	and	r24, r24
    1922:	2c f4       	brge	.+10     	; 0x192e <LCD_displayCharacter+0x262>
		__ticks = 1;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
    192c:	3f c0       	rjmp	.+126    	; 0x19ac <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    192e:	6d 89       	ldd	r22, Y+21	; 0x15
    1930:	7e 89       	ldd	r23, Y+22	; 0x16
    1932:	8f 89       	ldd	r24, Y+23	; 0x17
    1934:	98 8d       	ldd	r25, Y+24	; 0x18
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	3f ef       	ldi	r19, 0xFF	; 255
    193a:	4f e7       	ldi	r20, 0x7F	; 127
    193c:	57 e4       	ldi	r21, 0x47	; 71
    193e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1942:	18 16       	cp	r1, r24
    1944:	4c f5       	brge	.+82     	; 0x1998 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1946:	69 8d       	ldd	r22, Y+25	; 0x19
    1948:	7a 8d       	ldd	r23, Y+26	; 0x1a
    194a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    194c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e2       	ldi	r20, 0x20	; 32
    1954:	51 e4       	ldi	r21, 0x41	; 65
    1956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	bc 01       	movw	r22, r24
    1960:	cd 01       	movw	r24, r26
    1962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	9c 8b       	std	Y+20, r25	; 0x14
    196c:	8b 8b       	std	Y+19, r24	; 0x13
    196e:	0f c0       	rjmp	.+30     	; 0x198e <LCD_displayCharacter+0x2c2>
    1970:	88 ec       	ldi	r24, 0xC8	; 200
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	9a 8b       	std	Y+18, r25	; 0x12
    1976:	89 8b       	std	Y+17, r24	; 0x11
    1978:	89 89       	ldd	r24, Y+17	; 0x11
    197a:	9a 89       	ldd	r25, Y+18	; 0x12
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <LCD_displayCharacter+0x2b0>
    1980:	9a 8b       	std	Y+18, r25	; 0x12
    1982:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1984:	8b 89       	ldd	r24, Y+19	; 0x13
    1986:	9c 89       	ldd	r25, Y+20	; 0x14
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	9c 8b       	std	Y+20, r25	; 0x14
    198c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198e:	8b 89       	ldd	r24, Y+19	; 0x13
    1990:	9c 89       	ldd	r25, Y+20	; 0x14
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	69 f7       	brne	.-38     	; 0x1970 <LCD_displayCharacter+0x2a4>
    1996:	14 c0       	rjmp	.+40     	; 0x19c0 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1998:	6d 89       	ldd	r22, Y+21	; 0x15
    199a:	7e 89       	ldd	r23, Y+22	; 0x16
    199c:	8f 89       	ldd	r24, Y+23	; 0x17
    199e:	98 8d       	ldd	r25, Y+24	; 0x18
    19a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	9c 8b       	std	Y+20, r25	; 0x14
    19aa:	8b 8b       	std	Y+19, r24	; 0x13
    19ac:	8b 89       	ldd	r24, Y+19	; 0x13
    19ae:	9c 89       	ldd	r25, Y+20	; 0x14
    19b0:	98 8b       	std	Y+16, r25	; 0x10
    19b2:	8f 87       	std	Y+15, r24	; 0x0f
    19b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b6:	98 89       	ldd	r25, Y+16	; 0x10
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <LCD_displayCharacter+0x2ec>
    19bc:	98 8b       	std	Y+16, r25	; 0x10
    19be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_EN_Reg,LCD_EN_Bit);
    19c0:	a2 e3       	ldi	r26, 0x32	; 50
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e2 e3       	ldi	r30, 0x32	; 50
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8f 7b       	andi	r24, 0xBF	; 191
    19cc:	8c 93       	st	X, r24
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 e8       	ldi	r26, 0x80	; 128
    19d4:	bf e3       	ldi	r27, 0x3F	; 63
    19d6:	8b 87       	std	Y+11, r24	; 0x0b
    19d8:	9c 87       	std	Y+12, r25	; 0x0c
    19da:	ad 87       	std	Y+13, r26	; 0x0d
    19dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	4a ef       	ldi	r20, 0xFA	; 250
    19ec:	54 e4       	ldi	r21, 0x44	; 68
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	8f 83       	std	Y+7, r24	; 0x07
    19f8:	98 87       	std	Y+8, r25	; 0x08
    19fa:	a9 87       	std	Y+9, r26	; 0x09
    19fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a34:	18 16       	cp	r1, r24
    1a36:	4c f5       	brge	.+82     	; 0x1a8a <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <LCD_displayCharacter+0x3b4>
    1a62:	88 ec       	ldi	r24, 0xC8	; 200
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9c 83       	std	Y+4, r25	; 0x04
    1a68:	8b 83       	std	Y+3, r24	; 0x03
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_displayCharacter+0x3a2>
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <LCD_displayCharacter+0x396>
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8c:	78 85       	ldd	r23, Y+8	; 0x08
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_displayCharacter+0x3de>
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
	if(cursorPos == 32){
		LCD_goToRowColumn(0,0);
		cursorPos = 0;
	}*/

}
    1ab2:	e9 96       	adiw	r28, 0x39	; 57
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <LCD_displayString>:
* 			   the current char is'nt \0
*
* NOTES :	Str++ is possible because it is not a constant pointer
* 			 like the name of an array
**************************************************************************************/
void LCD_displayString(char *Str){
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <LCD_displayString+0x6>
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	0a c0       	rjmp	.+20     	; 0x1ae8 <LCD_displayString+0x24>

	while(*Str != '\0'){

		LCD_displayCharacter(*Str);
    1ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad8:	80 81       	ld	r24, Z
    1ada:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_displayCharacter>
		Str++;
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01
* NOTES :	Str++ is possible because it is not a constant pointer
* 			 like the name of an array
**************************************************************************************/
void LCD_displayString(char *Str){

	while(*Str != '\0'){
    1ae8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aea:	fa 81       	ldd	r31, Y+2	; 0x02
    1aec:	80 81       	ld	r24, Z
    1aee:	88 23       	and	r24, r24
    1af0:	89 f7       	brne	.-30     	; 0x1ad4 <LCD_displayString+0x10>
		LCD_displayCharacter(*Str);
		Str++;

	}

}
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <LCD_clearScreen>:
* 			 1-Uses LCD_sendCommand to send the clear screen command to the LCD
*
*
* NOTES :	none
**************************************************************************************/
void LCD_clearScreen(void){
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62

	LCD_sendCommand(LCD_CLEAR_SCREEN_COMMAND);
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <LCD_sendCommand>

}
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <LCD_displayInterger>:
* 			Ex: try to write 512 after writing  1023
* 				after displaying the LCD will show 5123 instead of 512
* 				because the new number is only 3 digits long
* 				 so the 3 won't be overwritten
**************************************************************************************/
void LCD_displayInterger(int int_value){
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	63 97       	sbiw	r28, 0x13	; 19
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	9b 8b       	std	Y+19, r25	; 0x13
    1b2a:	8a 8b       	std	Y+18, r24	; 0x12

	   char buff[16]; /* String to hold the ascii result */
	   itoa(int_value,buff,10); /* 10 for decimal */
    1b2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b2e:	9b 89       	ldd	r25, Y+19	; 0x13
    1b30:	9e 01       	movw	r18, r28
    1b32:	2e 5f       	subi	r18, 0xFE	; 254
    1b34:	3f 4f       	sbci	r19, 0xFF	; 255
    1b36:	b9 01       	movw	r22, r18
    1b38:	4a e0       	ldi	r20, 0x0A	; 10
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	0e 94 67 17 	call	0x2ece	; 0x2ece <itoa>

		   strcat(buff," ");
		   break;
	   }
	   */
	   for(i = 0; i<(4-(strlen(buff)));i++){ /* the 4 in here is the maximum number of digits */
    1b40:	19 82       	std	Y+1, r1	; 0x01
    1b42:	13 c0       	rjmp	.+38     	; 0x1b6a <LCD_displayInterger+0x5a>
		   	   	   	   	   	   	   	   	   	 /* in our case is 4 digits with value of 1023 */
		   strcat(buff," ");
    1b44:	8e 01       	movw	r16, r28
    1b46:	0e 5f       	subi	r16, 0xFE	; 254
    1b48:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	02 96       	adiw	r24, 0x02	; 2
    1b4e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <strlen>
    1b52:	80 0f       	add	r24, r16
    1b54:	91 1f       	adc	r25, r17
    1b56:	20 e6       	ldi	r18, 0x60	; 96
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	b9 01       	movw	r22, r18
    1b5c:	42 e0       	ldi	r20, 0x02	; 2
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <memcpy>

		   strcat(buff," ");
		   break;
	   }
	   */
	   for(i = 0; i<(4-(strlen(buff)));i++){ /* the 4 in here is the maximum number of digits */
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	08 2f       	mov	r16, r24
    1b6e:	10 e0       	ldi	r17, 0x00	; 0
    1b70:	ce 01       	movw	r24, r28
    1b72:	02 96       	adiw	r24, 0x02	; 2
    1b74:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <strlen>
    1b78:	9c 01       	movw	r18, r24
    1b7a:	84 e0       	ldi	r24, 0x04	; 4
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	82 1b       	sub	r24, r18
    1b80:	93 0b       	sbc	r25, r19
    1b82:	08 17       	cp	r16, r24
    1b84:	19 07       	cpc	r17, r25
    1b86:	f0 f2       	brcs	.-68     	; 0x1b44 <LCD_displayInterger+0x34>
		   	   	   	   	   	   	   	   	   	 /* in our case is 4 digits with value of 1023 */
		   strcat(buff," ");

	   }
	   LCD_displayString(buff);
    1b88:	ce 01       	movw	r24, r28
    1b8a:	02 96       	adiw	r24, 0x02	; 2
    1b8c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>

}
    1b90:	63 96       	adiw	r28, 0x13	; 19
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	08 95       	ret

00001ba6 <LCD_goToRowColumn>:
* 			 2-sends the final position command to the LCD using LCD_sendCommand
*
*
* NOTES :	none
**************************************************************************************/
void LCD_goToRowColumn(uint8 row,uint8 column){
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <LCD_goToRowColumn+0x6>
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <LCD_goToRowColumn+0x8>
    1bae:	0f 92       	push	r0
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	8a 83       	std	Y+2, r24	; 0x02
    1bb6:	6b 83       	std	Y+3, r22	; 0x03


	uint8 Location;

	switch(row)
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	3d 83       	std	Y+5, r19	; 0x05
    1bc0:	2c 83       	std	Y+4, r18	; 0x04
    1bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc6:	81 30       	cpi	r24, 0x01	; 1
    1bc8:	91 05       	cpc	r25, r1
    1bca:	c1 f0       	breq	.+48     	; 0x1bfc <LCD_goToRowColumn+0x56>
    1bcc:	2c 81       	ldd	r18, Y+4	; 0x04
    1bce:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd0:	22 30       	cpi	r18, 0x02	; 2
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	2c f4       	brge	.+10     	; 0x1be0 <LCD_goToRowColumn+0x3a>
    1bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	61 f0       	breq	.+24     	; 0x1bf6 <LCD_goToRowColumn+0x50>
    1bde:	19 c0       	rjmp	.+50     	; 0x1c12 <LCD_goToRowColumn+0x6c>
    1be0:	2c 81       	ldd	r18, Y+4	; 0x04
    1be2:	3d 81       	ldd	r19, Y+5	; 0x05
    1be4:	22 30       	cpi	r18, 0x02	; 2
    1be6:	31 05       	cpc	r19, r1
    1be8:	69 f0       	breq	.+26     	; 0x1c04 <LCD_goToRowColumn+0x5e>
    1bea:	8c 81       	ldd	r24, Y+4	; 0x04
    1bec:	9d 81       	ldd	r25, Y+5	; 0x05
    1bee:	83 30       	cpi	r24, 0x03	; 3
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	61 f0       	breq	.+24     	; 0x1c0c <LCD_goToRowColumn+0x66>
    1bf4:	0e c0       	rjmp	.+28     	; 0x1c12 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Location=column;
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	0b c0       	rjmp	.+22     	; 0x1c12 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Location=column+0x40;
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	80 5c       	subi	r24, 0xC0	; 192
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	07 c0       	rjmp	.+14     	; 0x1c12 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Location=column+0x10;
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	80 5f       	subi	r24, 0xF0	; 240
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	03 c0       	rjmp	.+6      	; 0x1c12 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Location=column+0x50;
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	80 5b       	subi	r24, 0xB0	; 176
    1c10:	89 83       	std	Y+1, r24	; 0x01
				break;
	}


	LCD_sendCommand(Location | SET_CURSOR_LOCATION_COMMAND);
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	80 68       	ori	r24, 0x80	; 128
    1c16:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <LCD_sendCommand>

}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <LCD_init>:
* 			 	and other options
*
*
* NOTES :	none
**************************************************************************************/
void LCD_init(void){
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62

	LCD_CNTR_DIR_REG = (1<<LCD_RS_Bit)|(1<<LCD_RW_Bit)|(1<<LCD_EN_Bit);
    1c32:	e1 e3       	ldi	r30, 0x31	; 49
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 e7       	ldi	r24, 0x70	; 112
    1c38:	80 83       	st	Z, r24
	LCD_DATA_DIR_REG = 0xFF;
    1c3a:	e4 e3       	ldi	r30, 0x34	; 52
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	8f ef       	ldi	r24, 0xFF	; 255
    1c40:	80 83       	st	Z, r24
	LCD_sendCommand(LCD_2x4_INIT_COMMAND);
    1c42:	88 e3       	ldi	r24, 0x38	; 56
    1c44:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CUR_OFF_COMMAND);
    1c48:	8c e0       	ldi	r24, 0x0C	; 12
    1c4a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN_COMMAND);
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <LCD_sendCommand>

}
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <main>:


uint8 instruction = 1; // 0 means open door  , 1 means change password remeber to remove magic numbers


int main(void){
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	eb 97       	sbiw	r28, 0x3b	; 59
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
	/* creat the UART_config struct */
	UART_configType UART_config = {Odd_Parity,_2bit,_8bit,115200};
    1c6e:	9e 01       	movw	r18, r28
    1c70:	24 5d       	subi	r18, 0xD4	; 212
    1c72:	3f 4f       	sbci	r19, 0xFF	; 255
    1c74:	38 af       	std	Y+56, r19	; 0x38
    1c76:	2f ab       	std	Y+55, r18	; 0x37
    1c78:	87 e2       	ldi	r24, 0x27	; 39
    1c7a:	91 e0       	ldi	r25, 0x01	; 1
    1c7c:	9a af       	std	Y+58, r25	; 0x3a
    1c7e:	89 af       	std	Y+57, r24	; 0x39
    1c80:	97 e0       	ldi	r25, 0x07	; 7
    1c82:	9b af       	std	Y+59, r25	; 0x3b
    1c84:	e9 ad       	ldd	r30, Y+57	; 0x39
    1c86:	fa ad       	ldd	r31, Y+58	; 0x3a
    1c88:	00 80       	ld	r0, Z
    1c8a:	29 ad       	ldd	r18, Y+57	; 0x39
    1c8c:	3a ad       	ldd	r19, Y+58	; 0x3a
    1c8e:	2f 5f       	subi	r18, 0xFF	; 255
    1c90:	3f 4f       	sbci	r19, 0xFF	; 255
    1c92:	3a af       	std	Y+58, r19	; 0x3a
    1c94:	29 af       	std	Y+57, r18	; 0x39
    1c96:	ef a9       	ldd	r30, Y+55	; 0x37
    1c98:	f8 ad       	ldd	r31, Y+56	; 0x38
    1c9a:	00 82       	st	Z, r0
    1c9c:	2f a9       	ldd	r18, Y+55	; 0x37
    1c9e:	38 ad       	ldd	r19, Y+56	; 0x38
    1ca0:	2f 5f       	subi	r18, 0xFF	; 255
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	38 af       	std	Y+56, r19	; 0x38
    1ca6:	2f ab       	std	Y+55, r18	; 0x37
    1ca8:	3b ad       	ldd	r19, Y+59	; 0x3b
    1caa:	31 50       	subi	r19, 0x01	; 1
    1cac:	3b af       	std	Y+59, r19	; 0x3b
    1cae:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cb0:	88 23       	and	r24, r24
    1cb2:	41 f7       	brne	.-48     	; 0x1c84 <main+0x2a>

	/* UART init passing the config struct by address */
	UART_init(&UART_config);
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	8c 96       	adiw	r24, 0x2c	; 44
    1cb8:	0e 94 38 16 	call	0x2c70	; 0x2c70 <UART_init>

	LCD_init();
    1cbc:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_init>

	Keypad_init();
    1cc0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Keypad_init>

	uint8 MCU2_command = 0;
    1cc4:	1b a6       	std	Y+43, r1	; 0x2b


	MCU2_command =UART_receiveByte();
    1cc6:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <UART_receiveByte>
    1cca:	8b a7       	std	Y+43, r24	; 0x2b
	switch (MCU2_command){
    1ccc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cce:	e8 2f       	mov	r30, r24
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	fe ab       	std	Y+54, r31	; 0x36
    1cd4:	ed ab       	std	Y+53, r30	; 0x35
    1cd6:	2d a9       	ldd	r18, Y+53	; 0x35
    1cd8:	3e a9       	ldd	r19, Y+54	; 0x36
    1cda:	21 30       	cpi	r18, 0x01	; 1
    1cdc:	31 05       	cpc	r19, r1
    1cde:	31 f0       	breq	.+12     	; 0x1cec <main+0x92>
    1ce0:	8d a9       	ldd	r24, Y+53	; 0x35
    1ce2:	9e a9       	ldd	r25, Y+54	; 0x36
    1ce4:	82 30       	cpi	r24, 0x02	; 2
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	21 f0       	breq	.+8      	; 0x1cf2 <main+0x98>
    1cea:	06 c0       	rjmp	.+12     	; 0x1cf8 <main+0x9e>

	case NEW_USER:

		state = ENTERPASS;
    1cec:	10 92 39 01 	sts	0x0139, r1
    1cf0:	03 c0       	rjmp	.+6      	; 0x1cf8 <main+0x9e>
		break;
	case OLD_USER:
		state = SHOWMAIN;
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	80 93 39 01 	sts	0x0139, r24
	}

	while(1){


		switch(state){
    1cf8:	80 91 39 01 	lds	r24, 0x0139
    1cfc:	e8 2f       	mov	r30, r24
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	fc ab       	std	Y+52, r31	; 0x34
    1d02:	eb ab       	std	Y+51, r30	; 0x33
    1d04:	2b a9       	ldd	r18, Y+51	; 0x33
    1d06:	3c a9       	ldd	r19, Y+52	; 0x34
    1d08:	22 30       	cpi	r18, 0x02	; 2
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <main+0xb6>
    1d0e:	98 c1       	rjmp	.+816    	; 0x2040 <main+0x3e6>
    1d10:	8b a9       	ldd	r24, Y+51	; 0x33
    1d12:	9c a9       	ldd	r25, Y+52	; 0x34
    1d14:	83 30       	cpi	r24, 0x03	; 3
    1d16:	91 05       	cpc	r25, r1
    1d18:	5c f4       	brge	.+22     	; 0x1d30 <main+0xd6>
    1d1a:	eb a9       	ldd	r30, Y+51	; 0x33
    1d1c:	fc a9       	ldd	r31, Y+52	; 0x34
    1d1e:	30 97       	sbiw	r30, 0x00	; 0
    1d20:	a1 f0       	breq	.+40     	; 0x1d4a <main+0xf0>
    1d22:	2b a9       	ldd	r18, Y+51	; 0x33
    1d24:	3c a9       	ldd	r19, Y+52	; 0x34
    1d26:	21 30       	cpi	r18, 0x01	; 1
    1d28:	31 05       	cpc	r19, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <main+0xd4>
    1d2c:	87 c0       	rjmp	.+270    	; 0x1e3c <main+0x1e2>
    1d2e:	e4 cf       	rjmp	.-56     	; 0x1cf8 <main+0x9e>
    1d30:	8b a9       	ldd	r24, Y+51	; 0x33
    1d32:	9c a9       	ldd	r25, Y+52	; 0x34
    1d34:	83 30       	cpi	r24, 0x03	; 3
    1d36:	91 05       	cpc	r25, r1
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <main+0xe2>
    1d3a:	85 c1       	rjmp	.+778    	; 0x2046 <main+0x3ec>
    1d3c:	eb a9       	ldd	r30, Y+51	; 0x33
    1d3e:	fc a9       	ldd	r31, Y+52	; 0x34
    1d40:	e4 30       	cpi	r30, 0x04	; 4
    1d42:	f1 05       	cpc	r31, r1
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <main+0xee>
    1d46:	82 c1       	rjmp	.+772    	; 0x204c <main+0x3f2>
    1d48:	d7 cf       	rjmp	.-82     	; 0x1cf8 <main+0x9e>

		case ENTERPASS:

			state = REENTERPASS;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	80 93 39 01 	sts	0x0139, r24
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a8 ec       	ldi	r26, 0xC8	; 200
    1d56:	b1 e4       	ldi	r27, 0x41	; 65
    1d58:	8f a3       	std	Y+39, r24	; 0x27
    1d5a:	98 a7       	std	Y+40, r25	; 0x28
    1d5c:	a9 a7       	std	Y+41, r26	; 0x29
    1d5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d60:	6f a1       	ldd	r22, Y+39	; 0x27
    1d62:	78 a5       	ldd	r23, Y+40	; 0x28
    1d64:	89 a5       	ldd	r24, Y+41	; 0x29
    1d66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4a ef       	ldi	r20, 0xFA	; 250
    1d6e:	54 e4       	ldi	r21, 0x44	; 68
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	8b a3       	std	Y+35, r24	; 0x23
    1d7a:	9c a3       	std	Y+36, r25	; 0x24
    1d7c:	ad a3       	std	Y+37, r26	; 0x25
    1d7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d80:	6b a1       	ldd	r22, Y+35	; 0x23
    1d82:	7c a1       	ldd	r23, Y+36	; 0x24
    1d84:	8d a1       	ldd	r24, Y+37	; 0x25
    1d86:	9e a1       	ldd	r25, Y+38	; 0x26
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e8       	ldi	r20, 0x80	; 128
    1d8e:	5f e3       	ldi	r21, 0x3F	; 63
    1d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d94:	88 23       	and	r24, r24
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <main+0x148>
		__ticks = 1;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9a a3       	std	Y+34, r25	; 0x22
    1d9e:	89 a3       	std	Y+33, r24	; 0x21
    1da0:	3f c0       	rjmp	.+126    	; 0x1e20 <main+0x1c6>
	else if (__tmp > 65535)
    1da2:	6b a1       	ldd	r22, Y+35	; 0x23
    1da4:	7c a1       	ldd	r23, Y+36	; 0x24
    1da6:	8d a1       	ldd	r24, Y+37	; 0x25
    1da8:	9e a1       	ldd	r25, Y+38	; 0x26
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	3f ef       	ldi	r19, 0xFF	; 255
    1dae:	4f e7       	ldi	r20, 0x7F	; 127
    1db0:	57 e4       	ldi	r21, 0x47	; 71
    1db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db6:	18 16       	cp	r1, r24
    1db8:	4c f5       	brge	.+82     	; 0x1e0c <main+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dba:	6f a1       	ldd	r22, Y+39	; 0x27
    1dbc:	78 a5       	ldd	r23, Y+40	; 0x28
    1dbe:	89 a5       	ldd	r24, Y+41	; 0x29
    1dc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e2       	ldi	r20, 0x20	; 32
    1dc8:	51 e4       	ldi	r21, 0x41	; 65
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	cd 01       	movw	r24, r26
    1dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9a a3       	std	Y+34, r25	; 0x22
    1de0:	89 a3       	std	Y+33, r24	; 0x21
    1de2:	0f c0       	rjmp	.+30     	; 0x1e02 <main+0x1a8>
    1de4:	88 ec       	ldi	r24, 0xC8	; 200
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	98 a3       	std	Y+32, r25	; 0x20
    1dea:	8f 8f       	std	Y+31, r24	; 0x1f
    1dec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dee:	98 a1       	ldd	r25, Y+32	; 0x20
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <main+0x196>
    1df4:	98 a3       	std	Y+32, r25	; 0x20
    1df6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dfa:	9a a1       	ldd	r25, Y+34	; 0x22
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	9a a3       	std	Y+34, r25	; 0x22
    1e00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e02:	89 a1       	ldd	r24, Y+33	; 0x21
    1e04:	9a a1       	ldd	r25, Y+34	; 0x22
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	69 f7       	brne	.-38     	; 0x1de4 <main+0x18a>
    1e0a:	14 c0       	rjmp	.+40     	; 0x1e34 <main+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e10:	8d a1       	ldd	r24, Y+37	; 0x25
    1e12:	9e a1       	ldd	r25, Y+38	; 0x26
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9a a3       	std	Y+34, r25	; 0x22
    1e1e:	89 a3       	std	Y+33, r24	; 0x21
    1e20:	89 a1       	ldd	r24, Y+33	; 0x21
    1e22:	9a a1       	ldd	r25, Y+34	; 0x22
    1e24:	9e 8f       	std	Y+30, r25	; 0x1e
    1e26:	8d 8f       	std	Y+29, r24	; 0x1d
    1e28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <main+0x1d2>
    1e30:	9e 8f       	std	Y+30, r25	; 0x1e
    1e32:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(25);
			getPasswordScreen(ENTER_PASSWORD_SCREEN);    // enter password
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	0e 94 3f 10 	call	0x207e	; 0x207e <getPasswordScreen>
    1e3a:	5e cf       	rjmp	.-324    	; 0x1cf8 <main+0x9e>



			break;
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a8 ec       	ldi	r26, 0xC8	; 200
    1e42:	b2 e4       	ldi	r27, 0x42	; 66
    1e44:	89 8f       	std	Y+25, r24	; 0x19
    1e46:	9a 8f       	std	Y+26, r25	; 0x1a
    1e48:	ab 8f       	std	Y+27, r26	; 0x1b
    1e4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a ef       	ldi	r20, 0xFA	; 250
    1e5a:	54 e4       	ldi	r21, 0x44	; 68
    1e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	8d 8b       	std	Y+21, r24	; 0x15
    1e66:	9e 8b       	std	Y+22, r25	; 0x16
    1e68:	af 8b       	std	Y+23, r26	; 0x17
    1e6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e70:	8f 89       	ldd	r24, Y+23	; 0x17
    1e72:	98 8d       	ldd	r25, Y+24	; 0x18
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <main+0x234>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9c 8b       	std	Y+20, r25	; 0x14
    1e8a:	8b 8b       	std	Y+19, r24	; 0x13
    1e8c:	3f c0       	rjmp	.+126    	; 0x1f0c <main+0x2b2>
	else if (__tmp > 65535)
    1e8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e90:	7e 89       	ldd	r23, Y+22	; 0x16
    1e92:	8f 89       	ldd	r24, Y+23	; 0x17
    1e94:	98 8d       	ldd	r25, Y+24	; 0x18
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	4c f5       	brge	.+82     	; 0x1ef8 <main+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ea8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9c 8b       	std	Y+20, r25	; 0x14
    1ecc:	8b 8b       	std	Y+19, r24	; 0x13
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <main+0x294>
    1ed0:	88 ec       	ldi	r24, 0xC8	; 200
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9a 8b       	std	Y+18, r25	; 0x12
    1ed6:	89 8b       	std	Y+17, r24	; 0x11
    1ed8:	89 89       	ldd	r24, Y+17	; 0x11
    1eda:	9a 89       	ldd	r25, Y+18	; 0x12
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <main+0x282>
    1ee0:	9a 8b       	std	Y+18, r25	; 0x12
    1ee2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	9c 8b       	std	Y+20, r25	; 0x14
    1eec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <main+0x276>
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <main+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	6d 89       	ldd	r22, Y+21	; 0x15
    1efa:	7e 89       	ldd	r23, Y+22	; 0x16
    1efc:	8f 89       	ldd	r24, Y+23	; 0x17
    1efe:	98 8d       	ldd	r25, Y+24	; 0x18
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9c 8b       	std	Y+20, r25	; 0x14
    1f0a:	8b 8b       	std	Y+19, r24	; 0x13
    1f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f10:	98 8b       	std	Y+16, r25	; 0x10
    1f12:	8f 87       	std	Y+15, r24	; 0x0f
    1f14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f16:	98 89       	ldd	r25, Y+16	; 0x10
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <main+0x2be>
    1f1c:	98 8b       	std	Y+16, r25	; 0x10
    1f1e:	8f 87       	std	Y+15, r24	; 0x0f

		case REENTERPASS:

			_delay_ms(100);
			getPasswordScreen(RE_ENTER_PASSWORD_SCREEN);	// re-enter it
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	0e 94 3f 10 	call	0x207e	; 0x207e <getPasswordScreen>


			if(compare_arrays(password,password_repeated,PASSWORD_LENGTH)){
    1f26:	8f e2       	ldi	r24, 0x2F	; 47
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	24 e3       	ldi	r18, 0x34	; 52
    1f2c:	31 e0       	ldi	r19, 0x01	; 1
    1f2e:	b9 01       	movw	r22, r18
    1f30:	45 e0       	ldi	r20, 0x05	; 5
    1f32:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <compare_arrays>
    1f36:	88 23       	and	r24, r24
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <main+0x2e2>
    1f3a:	7f c0       	rjmp	.+254    	; 0x203a <main+0x3e0>
				UART_sendByte(STORE_PASSWORD);
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <UART_sendByte>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	a0 ea       	ldi	r26, 0xA0	; 160
    1f48:	b1 e4       	ldi	r27, 0x41	; 65
    1f4a:	8b 87       	std	Y+11, r24	; 0x0b
    1f4c:	9c 87       	std	Y+12, r25	; 0x0c
    1f4e:	ad 87       	std	Y+13, r26	; 0x0d
    1f50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	4a ef       	ldi	r20, 0xFA	; 250
    1f60:	54 e4       	ldi	r21, 0x44	; 68
    1f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	8f 83       	std	Y+7, r24	; 0x07
    1f6c:	98 87       	std	Y+8, r25	; 0x08
    1f6e:	a9 87       	std	Y+9, r26	; 0x09
    1f70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f72:	6f 81       	ldd	r22, Y+7	; 0x07
    1f74:	78 85       	ldd	r23, Y+8	; 0x08
    1f76:	89 85       	ldd	r24, Y+9	; 0x09
    1f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e8       	ldi	r20, 0x80	; 128
    1f80:	5f e3       	ldi	r21, 0x3F	; 63
    1f82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f86:	88 23       	and	r24, r24
    1f88:	2c f4       	brge	.+10     	; 0x1f94 <main+0x33a>
		__ticks = 1;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	9e 83       	std	Y+6, r25	; 0x06
    1f90:	8d 83       	std	Y+5, r24	; 0x05
    1f92:	3f c0       	rjmp	.+126    	; 0x2012 <main+0x3b8>
	else if (__tmp > 65535)
    1f94:	6f 81       	ldd	r22, Y+7	; 0x07
    1f96:	78 85       	ldd	r23, Y+8	; 0x08
    1f98:	89 85       	ldd	r24, Y+9	; 0x09
    1f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	3f ef       	ldi	r19, 0xFF	; 255
    1fa0:	4f e7       	ldi	r20, 0x7F	; 127
    1fa2:	57 e4       	ldi	r21, 0x47	; 71
    1fa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa8:	18 16       	cp	r1, r24
    1faa:	4c f5       	brge	.+82     	; 0x1ffe <main+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e2       	ldi	r20, 0x20	; 32
    1fba:	51 e4       	ldi	r21, 0x41	; 65
    1fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	9e 83       	std	Y+6, r25	; 0x06
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
    1fd4:	0f c0       	rjmp	.+30     	; 0x1ff4 <main+0x39a>
    1fd6:	88 ec       	ldi	r24, 0xC8	; 200
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9c 83       	std	Y+4, r25	; 0x04
    1fdc:	8b 83       	std	Y+3, r24	; 0x03
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <main+0x388>
    1fe6:	9c 83       	std	Y+4, r25	; 0x04
    1fe8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	69 f7       	brne	.-38     	; 0x1fd6 <main+0x37c>
    1ffc:	14 c0       	rjmp	.+40     	; 0x2026 <main+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    2000:	78 85       	ldd	r23, Y+8	; 0x08
    2002:	89 85       	ldd	r24, Y+9	; 0x09
    2004:	9a 85       	ldd	r25, Y+10	; 0x0a
    2006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	9e 81       	ldd	r25, Y+6	; 0x06
    2016:	9a 83       	std	Y+2, r25	; 0x02
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	9a 81       	ldd	r25, Y+2	; 0x02
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <main+0x3c4>
    2022:	9a 83       	std	Y+2, r25	; 0x02
    2024:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(20);
				sendPassword();
    2026:	0e 94 69 11 	call	0x22d2	; 0x22d2 <sendPassword>
				state = SHOWMAIN;
    202a:	82 e0       	ldi	r24, 0x02	; 2
    202c:	80 93 39 01 	sts	0x0139, r24
				DIO_WriteChannel(31,1);
    2030:	8f e1       	ldi	r24, 0x1F	; 31
    2032:	61 e0       	ldi	r22, 0x01	; 1
    2034:	0e 94 e6 05 	call	0xbcc	; 0xbcc <DIO_WriteChannel>
    2038:	5f ce       	rjmp	.-834    	; 0x1cf8 <main+0x9e>

			}else{
				state = ENTERPASS;
    203a:	10 92 39 01 	sts	0x0139, r1
    203e:	5c ce       	rjmp	.-840    	; 0x1cf8 <main+0x9e>

			break;

		case SHOWMAIN:

			showMainScreen();
    2040:	0e 94 00 12 	call	0x2400	; 0x2400 <showMainScreen>
    2044:	59 ce       	rjmp	.-846    	; 0x1cf8 <main+0x9e>
			break;


		case ASKFORPASSWORD:

			askForPassword();
    2046:	0e 94 49 12 	call	0x2492	; 0x2492 <askForPassword>
    204a:	56 ce       	rjmp	.-852    	; 0x1cf8 <main+0x9e>
			break;

		case SCREENLOCKED:

			LCD_goToRowColumn(0,0); /* display the number every time at this position */
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	60 e0       	ldi	r22, 0x00	; 0
    2050:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_goToRowColumn>

			LCD_displayString("Screen Locked!  ");
    2054:	82 e6       	ldi	r24, 0x62	; 98
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>

			LCD_goToRowColumn(1,0); /* display the number every time at this position */
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	60 e0       	ldi	r22, 0x00	; 0
    2060:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_goToRowColumn>

			LCD_displayString("               ");
    2064:	83 e7       	ldi	r24, 0x73	; 115
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>

			if(UART_receiveByte() == UNLOCK_SCREEN){
    206c:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <UART_receiveByte>
    2070:	86 30       	cpi	r24, 0x06	; 6
    2072:	09 f0       	breq	.+2      	; 0x2076 <main+0x41c>
    2074:	41 ce       	rjmp	.-894    	; 0x1cf8 <main+0x9e>
				state = SHOWMAIN;
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	80 93 39 01 	sts	0x0139, r24
    207c:	3d ce       	rjmp	.-902    	; 0x1cf8 <main+0x9e>

0000207e <getPasswordScreen>:
 * OUTPUTS :	void
 *
 *
 * NOTES :	none
 ***************************************************************************/
void getPasswordScreen(uint8 re){
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	69 97       	sbiw	r28, 0x19	; 25
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	8b 8b       	std	Y+19, r24	; 0x13

	uint8 prevKey ='0';
    2094:	80 e3       	ldi	r24, 0x30	; 48
    2096:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 key= '0';
    2098:	80 e3       	ldi	r24, 0x30	; 48
    209a:	89 8b       	std	Y+17, r24	; 0x11
	uint8 counter = 0;
    209c:	18 8a       	std	Y+16, r1	; 0x10
	uint8 exitLoop = 0;
    209e:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen(); /* clear LCD at the beginning */
    20a0:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <LCD_clearScreen>
	switch(re){
    20a4:	8b 89       	ldd	r24, Y+19	; 0x13
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	39 8f       	std	Y+25, r19	; 0x19
    20ac:	28 8f       	std	Y+24, r18	; 0x18
    20ae:	88 8d       	ldd	r24, Y+24	; 0x18
    20b0:	99 8d       	ldd	r25, Y+25	; 0x19
    20b2:	81 30       	cpi	r24, 0x01	; 1
    20b4:	91 05       	cpc	r25, r1
    20b6:	71 f0       	breq	.+28     	; 0x20d4 <getPasswordScreen+0x56>
    20b8:	28 8d       	ldd	r18, Y+24	; 0x18
    20ba:	39 8d       	ldd	r19, Y+25	; 0x19
    20bc:	22 30       	cpi	r18, 0x02	; 2
    20be:	31 05       	cpc	r19, r1
    20c0:	71 f0       	breq	.+28     	; 0x20de <getPasswordScreen+0x60>
    20c2:	88 8d       	ldd	r24, Y+24	; 0x18
    20c4:	99 8d       	ldd	r25, Y+25	; 0x19
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	71 f4       	brne	.+28     	; 0x20e6 <getPasswordScreen+0x68>
	case ENTER_PASSWORD_SCREEN:
		LCD_displayString("Enter Password");
    20ca:	83 e8       	ldi	r24, 0x83	; 131
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>
    20d2:	09 c0       	rjmp	.+18     	; 0x20e6 <getPasswordScreen+0x68>
		break;
	case RE_ENTER_PASSWORD_SCREEN:
		LCD_displayString("Enter again");
    20d4:	82 e9       	ldi	r24, 0x92	; 146
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>
    20dc:	04 c0       	rjmp	.+8      	; 0x20e6 <getPasswordScreen+0x68>
		break;
	case VERIFY_PASSWORD_SCREEN:
		LCD_displayString("Verify Password");
    20de:	8e e9       	ldi	r24, 0x9E	; 158
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>
		//LCD_displayInterger(state);
		break;
	}
	LCD_goToRowColumn(1,0); /* display the number every time at this position */
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_goToRowColumn>

	while(1){


		if(exitLoop == 1){
    20ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f0:	81 30       	cpi	r24, 0x01	; 1
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <getPasswordScreen+0x78>
    20f4:	e5 c0       	rjmp	.+458    	; 0x22c0 <getPasswordScreen+0x242>
			break;
		}else{

			key = Keypad_getKey();
    20f6:	0e 94 0a 09 	call	0x1214	; 0x1214 <Keypad_getKey>
    20fa:	89 8b       	std	Y+17, r24	; 0x11
			if((key != prevKey) && key != 'x'){   /*get only the first click of the button*/
    20fc:	99 89       	ldd	r25, Y+17	; 0x11
    20fe:	8a 89       	ldd	r24, Y+18	; 0x12
    2100:	98 17       	cp	r25, r24
    2102:	09 f4       	brne	.+2      	; 0x2106 <getPasswordScreen+0x88>
    2104:	da c0       	rjmp	.+436    	; 0x22ba <getPasswordScreen+0x23c>
    2106:	89 89       	ldd	r24, Y+17	; 0x11
    2108:	88 37       	cpi	r24, 0x78	; 120
    210a:	09 f4       	brne	.+2      	; 0x210e <getPasswordScreen+0x90>
    210c:	d6 c0       	rjmp	.+428    	; 0x22ba <getPasswordScreen+0x23c>


				switch(key){
    210e:	89 89       	ldd	r24, Y+17	; 0x11
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	3f 8b       	std	Y+23, r19	; 0x17
    2116:	2e 8b       	std	Y+22, r18	; 0x16
    2118:	8e 89       	ldd	r24, Y+22	; 0x16
    211a:	9f 89       	ldd	r25, Y+23	; 0x17
    211c:	80 33       	cpi	r24, 0x30	; 48
    211e:	91 05       	cpc	r25, r1
    2120:	0c f4       	brge	.+2      	; 0x2124 <getPasswordScreen+0xa6>
    2122:	cb c0       	rjmp	.+406    	; 0x22ba <getPasswordScreen+0x23c>
    2124:	2e 89       	ldd	r18, Y+22	; 0x16
    2126:	3f 89       	ldd	r19, Y+23	; 0x17
    2128:	2a 33       	cpi	r18, 0x3A	; 58
    212a:	31 05       	cpc	r19, r1
    212c:	3c f0       	brlt	.+14     	; 0x213c <getPasswordScreen+0xbe>
    212e:	8e 89       	ldd	r24, Y+22	; 0x16
    2130:	9f 89       	ldd	r25, Y+23	; 0x17
    2132:	8d 33       	cpi	r24, 0x3D	; 61
    2134:	91 05       	cpc	r25, r1
    2136:	09 f4       	brne	.+2      	; 0x213a <getPasswordScreen+0xbc>
    2138:	4c c0       	rjmp	.+152    	; 0x21d2 <getPasswordScreen+0x154>
    213a:	bf c0       	rjmp	.+382    	; 0x22ba <getPasswordScreen+0x23c>
				case '6':
				case '7':
				case '8':
				case '9':

					if(counter >4){
    213c:	88 89       	ldd	r24, Y+16	; 0x10
    213e:	85 30       	cpi	r24, 0x05	; 5
    2140:	38 f0       	brcs	.+14     	; 0x2150 <getPasswordScreen+0xd2>

						//	LCD_goToRowColumn(0,0); /* display the number every time at this position */
						LCD_clearScreen(); /* clear LCD at the beginning */
    2142:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <LCD_clearScreen>
						LCD_displayString("Maximum!");
    2146:	8e ea       	ldi	r24, 0xAE	; 174
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>
    214e:	b5 c0       	rjmp	.+362    	; 0x22ba <getPasswordScreen+0x23c>

					}else{

						switch(re){
    2150:	8b 89       	ldd	r24, Y+19	; 0x13
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	3d 8b       	std	Y+21, r19	; 0x15
    2158:	2c 8b       	std	Y+20, r18	; 0x14
    215a:	8c 89       	ldd	r24, Y+20	; 0x14
    215c:	9d 89       	ldd	r25, Y+21	; 0x15
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	91 05       	cpc	r25, r1
    2162:	c9 f0       	breq	.+50     	; 0x2196 <getPasswordScreen+0x118>
    2164:	2c 89       	ldd	r18, Y+20	; 0x14
    2166:	3d 89       	ldd	r19, Y+21	; 0x15
    2168:	22 30       	cpi	r18, 0x02	; 2
    216a:	31 05       	cpc	r19, r1
    216c:	19 f1       	breq	.+70     	; 0x21b4 <getPasswordScreen+0x136>
    216e:	8c 89       	ldd	r24, Y+20	; 0x14
    2170:	9d 89       	ldd	r25, Y+21	; 0x15
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	09 f0       	breq	.+2      	; 0x2178 <getPasswordScreen+0xfa>
    2176:	a1 c0       	rjmp	.+322    	; 0x22ba <getPasswordScreen+0x23c>
						case 0:
							LCD_displayCharacter('*');
    2178:	8a e2       	ldi	r24, 0x2A	; 42
    217a:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_displayCharacter>
							password[counter] = key;
    217e:	88 89       	ldd	r24, Y+16	; 0x10
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	fc 01       	movw	r30, r24
    2186:	e1 5d       	subi	r30, 0xD1	; 209
    2188:	fe 4f       	sbci	r31, 0xFE	; 254
    218a:	89 89       	ldd	r24, Y+17	; 0x11
    218c:	80 83       	st	Z, r24
							counter++;
    218e:	88 89       	ldd	r24, Y+16	; 0x10
    2190:	8f 5f       	subi	r24, 0xFF	; 255
    2192:	88 8b       	std	Y+16, r24	; 0x10
    2194:	92 c0       	rjmp	.+292    	; 0x22ba <getPasswordScreen+0x23c>
							break;
						case 1:
							LCD_displayCharacter('*');
    2196:	8a e2       	ldi	r24, 0x2A	; 42
    2198:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_displayCharacter>
							password_repeated[counter] = key;
    219c:	88 89       	ldd	r24, Y+16	; 0x10
    219e:	88 2f       	mov	r24, r24
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	fc 01       	movw	r30, r24
    21a4:	ec 5c       	subi	r30, 0xCC	; 204
    21a6:	fe 4f       	sbci	r31, 0xFE	; 254
    21a8:	89 89       	ldd	r24, Y+17	; 0x11
    21aa:	80 83       	st	Z, r24
							counter++;
    21ac:	88 89       	ldd	r24, Y+16	; 0x10
    21ae:	8f 5f       	subi	r24, 0xFF	; 255
    21b0:	88 8b       	std	Y+16, r24	; 0x10
    21b2:	83 c0       	rjmp	.+262    	; 0x22ba <getPasswordScreen+0x23c>
							break;
						case 2:
							LCD_displayCharacter('*');
    21b4:	8a e2       	ldi	r24, 0x2A	; 42
    21b6:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_displayCharacter>
							password[counter] = key;
    21ba:	88 89       	ldd	r24, Y+16	; 0x10
    21bc:	88 2f       	mov	r24, r24
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	fc 01       	movw	r30, r24
    21c2:	e1 5d       	subi	r30, 0xD1	; 209
    21c4:	fe 4f       	sbci	r31, 0xFE	; 254
    21c6:	89 89       	ldd	r24, Y+17	; 0x11
    21c8:	80 83       	st	Z, r24
							counter++;
    21ca:	88 89       	ldd	r24, Y+16	; 0x10
    21cc:	8f 5f       	subi	r24, 0xFF	; 255
    21ce:	88 8b       	std	Y+16, r24	; 0x10
    21d0:	74 c0       	rjmp	.+232    	; 0x22ba <getPasswordScreen+0x23c>

					}

					break;
				case '=':
					exitLoop = 1;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	8f 87       	std	Y+15, r24	; 0x0f
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a6 e1       	ldi	r26, 0x16	; 22
    21dc:	b3 e4       	ldi	r27, 0x43	; 67
    21de:	8b 87       	std	Y+11, r24	; 0x0b
    21e0:	9c 87       	std	Y+12, r25	; 0x0c
    21e2:	ad 87       	std	Y+13, r26	; 0x0d
    21e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	4a ef       	ldi	r20, 0xFA	; 250
    21f4:	54 e4       	ldi	r21, 0x44	; 68
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	8f 83       	std	Y+7, r24	; 0x07
    2200:	98 87       	std	Y+8, r25	; 0x08
    2202:	a9 87       	std	Y+9, r26	; 0x09
    2204:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2206:	6f 81       	ldd	r22, Y+7	; 0x07
    2208:	78 85       	ldd	r23, Y+8	; 0x08
    220a:	89 85       	ldd	r24, Y+9	; 0x09
    220c:	9a 85       	ldd	r25, Y+10	; 0x0a
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e8       	ldi	r20, 0x80	; 128
    2214:	5f e3       	ldi	r21, 0x3F	; 63
    2216:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    221a:	88 23       	and	r24, r24
    221c:	2c f4       	brge	.+10     	; 0x2228 <getPasswordScreen+0x1aa>
		__ticks = 1;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	8d 83       	std	Y+5, r24	; 0x05
    2226:	3f c0       	rjmp	.+126    	; 0x22a6 <getPasswordScreen+0x228>
	else if (__tmp > 65535)
    2228:	6f 81       	ldd	r22, Y+7	; 0x07
    222a:	78 85       	ldd	r23, Y+8	; 0x08
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	3f ef       	ldi	r19, 0xFF	; 255
    2234:	4f e7       	ldi	r20, 0x7F	; 127
    2236:	57 e4       	ldi	r21, 0x47	; 71
    2238:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    223c:	18 16       	cp	r1, r24
    223e:	4c f5       	brge	.+82     	; 0x2292 <getPasswordScreen+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2240:	6b 85       	ldd	r22, Y+11	; 0x0b
    2242:	7c 85       	ldd	r23, Y+12	; 0x0c
    2244:	8d 85       	ldd	r24, Y+13	; 0x0d
    2246:	9e 85       	ldd	r25, Y+14	; 0x0e
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e2       	ldi	r20, 0x20	; 32
    224e:	51 e4       	ldi	r21, 0x41	; 65
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	0f c0       	rjmp	.+30     	; 0x2288 <getPasswordScreen+0x20a>
    226a:	88 ec       	ldi	r24, 0xC8	; 200
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	9c 83       	std	Y+4, r25	; 0x04
    2270:	8b 83       	std	Y+3, r24	; 0x03
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <getPasswordScreen+0x1f8>
    227a:	9c 83       	std	Y+4, r25	; 0x04
    227c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227e:	8d 81       	ldd	r24, Y+5	; 0x05
    2280:	9e 81       	ldd	r25, Y+6	; 0x06
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	9e 83       	std	Y+6, r25	; 0x06
    2286:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	9e 81       	ldd	r25, Y+6	; 0x06
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	69 f7       	brne	.-38     	; 0x226a <getPasswordScreen+0x1ec>
    2290:	14 c0       	rjmp	.+40     	; 0x22ba <getPasswordScreen+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2292:	6f 81       	ldd	r22, Y+7	; 0x07
    2294:	78 85       	ldd	r23, Y+8	; 0x08
    2296:	89 85       	ldd	r24, Y+9	; 0x09
    2298:	9a 85       	ldd	r25, Y+10	; 0x0a
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	9a 83       	std	Y+2, r25	; 0x02
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	9a 81       	ldd	r25, Y+2	; 0x02
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <getPasswordScreen+0x234>
    22b6:	9a 83       	std	Y+2, r25	; 0x02
    22b8:	89 83       	std	Y+1, r24	; 0x01
					break;
				}


			}
			prevKey = key;
    22ba:	89 89       	ldd	r24, Y+17	; 0x11
    22bc:	8a 8b       	std	Y+18, r24	; 0x12
    22be:	17 cf       	rjmp	.-466    	; 0x20ee <getPasswordScreen+0x70>
		}



	}
}
    22c0:	69 96       	adiw	r28, 0x19	; 25
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <sendPassword>:
 * OUTPUTS :	void
 *
 *
 * NOTES :	delay is for safety regarding protues simulation
 ***************************************************************************/
void sendPassword(void){
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	2f 97       	sbiw	r28, 0x0f	; 15
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61

	uint8 i;
	for(i =0; i<PASSWORD_LENGTH;i++){
    22e6:	1f 86       	std	Y+15, r1	; 0x0f
    22e8:	7e c0       	rjmp	.+252    	; 0x23e6 <sendPassword+0x114>

		UART_sendByte(password[i]);
    22ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ec:	88 2f       	mov	r24, r24
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	fc 01       	movw	r30, r24
    22f2:	e1 5d       	subi	r30, 0xD1	; 209
    22f4:	fe 4f       	sbci	r31, 0xFE	; 254
    22f6:	80 81       	ld	r24, Z
    22f8:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <UART_sendByte>
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	a0 ef       	ldi	r26, 0xF0	; 240
    2302:	b1 e4       	ldi	r27, 0x41	; 65
    2304:	8b 87       	std	Y+11, r24	; 0x0b
    2306:	9c 87       	std	Y+12, r25	; 0x0c
    2308:	ad 87       	std	Y+13, r26	; 0x0d
    230a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230c:	6b 85       	ldd	r22, Y+11	; 0x0b
    230e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2310:	8d 85       	ldd	r24, Y+13	; 0x0d
    2312:	9e 85       	ldd	r25, Y+14	; 0x0e
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	4a ef       	ldi	r20, 0xFA	; 250
    231a:	54 e4       	ldi	r21, 0x44	; 68
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	8f 83       	std	Y+7, r24	; 0x07
    2326:	98 87       	std	Y+8, r25	; 0x08
    2328:	a9 87       	std	Y+9, r26	; 0x09
    232a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    232c:	6f 81       	ldd	r22, Y+7	; 0x07
    232e:	78 85       	ldd	r23, Y+8	; 0x08
    2330:	89 85       	ldd	r24, Y+9	; 0x09
    2332:	9a 85       	ldd	r25, Y+10	; 0x0a
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e8       	ldi	r20, 0x80	; 128
    233a:	5f e3       	ldi	r21, 0x3F	; 63
    233c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2340:	88 23       	and	r24, r24
    2342:	2c f4       	brge	.+10     	; 0x234e <sendPassword+0x7c>
		__ticks = 1;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9e 83       	std	Y+6, r25	; 0x06
    234a:	8d 83       	std	Y+5, r24	; 0x05
    234c:	3f c0       	rjmp	.+126    	; 0x23cc <sendPassword+0xfa>
	else if (__tmp > 65535)
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	3f ef       	ldi	r19, 0xFF	; 255
    235a:	4f e7       	ldi	r20, 0x7F	; 127
    235c:	57 e4       	ldi	r21, 0x47	; 71
    235e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2362:	18 16       	cp	r1, r24
    2364:	4c f5       	brge	.+82     	; 0x23b8 <sendPassword+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2366:	6b 85       	ldd	r22, Y+11	; 0x0b
    2368:	7c 85       	ldd	r23, Y+12	; 0x0c
    236a:	8d 85       	ldd	r24, Y+13	; 0x0d
    236c:	9e 85       	ldd	r25, Y+14	; 0x0e
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e2       	ldi	r20, 0x20	; 32
    2374:	51 e4       	ldi	r21, 0x41	; 65
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	9e 83       	std	Y+6, r25	; 0x06
    238c:	8d 83       	std	Y+5, r24	; 0x05
    238e:	0f c0       	rjmp	.+30     	; 0x23ae <sendPassword+0xdc>
    2390:	88 ec       	ldi	r24, 0xC8	; 200
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9c 83       	std	Y+4, r25	; 0x04
    2396:	8b 83       	std	Y+3, r24	; 0x03
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <sendPassword+0xca>
    23a0:	9c 83       	std	Y+4, r25	; 0x04
    23a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	9e 83       	std	Y+6, r25	; 0x06
    23ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ae:	8d 81       	ldd	r24, Y+5	; 0x05
    23b0:	9e 81       	ldd	r25, Y+6	; 0x06
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	69 f7       	brne	.-38     	; 0x2390 <sendPassword+0xbe>
    23b6:	14 c0       	rjmp	.+40     	; 0x23e0 <sendPassword+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ba:	78 85       	ldd	r23, Y+8	; 0x08
    23bc:	89 85       	ldd	r24, Y+9	; 0x09
    23be:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	9e 83       	std	Y+6, r25	; 0x06
    23ca:	8d 83       	std	Y+5, r24	; 0x05
    23cc:	8d 81       	ldd	r24, Y+5	; 0x05
    23ce:	9e 81       	ldd	r25, Y+6	; 0x06
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	9a 81       	ldd	r25, Y+2	; 0x02
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <sendPassword+0x106>
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	89 83       	std	Y+1, r24	; 0x01
 * NOTES :	delay is for safety regarding protues simulation
 ***************************************************************************/
void sendPassword(void){

	uint8 i;
	for(i =0; i<PASSWORD_LENGTH;i++){
    23e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e2:	8f 5f       	subi	r24, 0xFF	; 255
    23e4:	8f 87       	std	Y+15, r24	; 0x0f
    23e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e8:	85 30       	cpi	r24, 0x05	; 5
    23ea:	08 f4       	brcc	.+2      	; 0x23ee <sendPassword+0x11c>
    23ec:	7e cf       	rjmp	.-260    	; 0x22ea <sendPassword+0x18>
		UART_sendByte(password[i]);
		_delay_ms(30);

	}

}
    23ee:	2f 96       	adiw	r28, 0x0f	; 15
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <showMainScreen>:
 * OUTPUTS :	void
 *
 *
 * NOTES :	the option selection is done by pressing + for open door or - for change password
 ***************************************************************************/
void showMainScreen(void){
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	00 d0       	rcall	.+0      	; 0x2406 <showMainScreen+0x6>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <showMainScreen+0x8>
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62


	LCD_goToRowColumn(0,0); /* display the number every time at this position */
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_goToRowColumn>

	LCD_displayString("+ : Open door    ");
    2414:	87 eb       	ldi	r24, 0xB7	; 183
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>

	LCD_goToRowColumn(1,0); /* display the number every time at this position */
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_goToRowColumn>

	LCD_displayString("- : Change PW    ");
    2424:	89 ec       	ldi	r24, 0xC9	; 201
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>

	uint8 prevKey ='0';
    242c:	80 e3       	ldi	r24, 0x30	; 48
    242e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 key= '0';
    2430:	80 e3       	ldi	r24, 0x30	; 48
    2432:	89 83       	std	Y+1, r24	; 0x01



	key = Keypad_getKey();
    2434:	0e 94 0a 09 	call	0x1214	; 0x1214 <Keypad_getKey>
    2438:	89 83       	std	Y+1, r24	; 0x01
	if((key != prevKey) && key != 'x'){   /*get only the first click of the button*/
    243a:	99 81       	ldd	r25, Y+1	; 0x01
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	98 17       	cp	r25, r24
    2440:	f9 f0       	breq	.+62     	; 0x2480 <showMainScreen+0x80>
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	88 37       	cpi	r24, 0x78	; 120
    2446:	e1 f0       	breq	.+56     	; 0x2480 <showMainScreen+0x80>


		switch(key){
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	3c 83       	std	Y+4, r19	; 0x04
    2450:	2b 83       	std	Y+3, r18	; 0x03
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	9c 81       	ldd	r25, Y+4	; 0x04
    2456:	8b 32       	cpi	r24, 0x2B	; 43
    2458:	91 05       	cpc	r25, r1
    245a:	31 f0       	breq	.+12     	; 0x2468 <showMainScreen+0x68>
    245c:	2b 81       	ldd	r18, Y+3	; 0x03
    245e:	3c 81       	ldd	r19, Y+4	; 0x04
    2460:	2d 32       	cpi	r18, 0x2D	; 45
    2462:	31 05       	cpc	r19, r1
    2464:	39 f0       	breq	.+14     	; 0x2474 <showMainScreen+0x74>
    2466:	0c c0       	rjmp	.+24     	; 0x2480 <showMainScreen+0x80>

		case '+':

			instruction = 0;
    2468:	10 92 26 01 	sts	0x0126, r1
			state = ASKFORPASSWORD;
    246c:	83 e0       	ldi	r24, 0x03	; 3
    246e:	80 93 39 01 	sts	0x0139, r24
    2472:	06 c0       	rjmp	.+12     	; 0x2480 <showMainScreen+0x80>


			break;
		case '-':

			instruction = 1;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	80 93 26 01 	sts	0x0126, r24
			state = ASKFORPASSWORD;
    247a:	83 e0       	ldi	r24, 0x03	; 3
    247c:	80 93 39 01 	sts	0x0139, r24
			break;
		}


	}
	prevKey = key;
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	8a 83       	std	Y+2, r24	; 0x02

}
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <askForPassword>:
 *
 *
 * NOTES :	error handling part of the function is not done yet
 * 			false counter warning triggers on the 5th iteration
 ***************************************************************************/
uint8 askForPassword(void){
    2492:	0f 93       	push	r16
    2494:	1f 93       	push	r17
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	c7 55       	subi	r28, 0x57	; 87
    24a0:	d0 40       	sbci	r29, 0x00	; 0
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61

	static uint8 falseCounter = 0;
	uint8 message = 0;
    24ac:	fe 01       	movw	r30, r28
    24ae:	eb 5a       	subi	r30, 0xAB	; 171
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	10 82       	st	Z, r1
	getPasswordScreen(VERIFY_PASSWORD_SCREEN);
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	0e 94 3f 10 	call	0x207e	; 0x207e <getPasswordScreen>

	UART_sendByte(VERIFY_PASSWORD);
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <UART_sendByte>
    24c0:	fe 01       	movw	r30, r28
    24c2:	ef 5a       	subi	r30, 0xAF	; 175
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 ea       	ldi	r26, 0xA0	; 160
    24cc:	b1 e4       	ldi	r27, 0x41	; 65
    24ce:	80 83       	st	Z, r24
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	a2 83       	std	Z+2, r26	; 0x02
    24d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d6:	8e 01       	movw	r16, r28
    24d8:	03 5b       	subi	r16, 0xB3	; 179
    24da:	1f 4f       	sbci	r17, 0xFF	; 255
    24dc:	fe 01       	movw	r30, r28
    24de:	ef 5a       	subi	r30, 0xAF	; 175
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	4a ef       	ldi	r20, 0xFA	; 250
    24f0:	54 e4       	ldi	r21, 0x44	; 68
    24f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	f8 01       	movw	r30, r16
    24fc:	80 83       	st	Z, r24
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	a2 83       	std	Z+2, r26	; 0x02
    2502:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2504:	fe 01       	movw	r30, r28
    2506:	e3 5b       	subi	r30, 0xB3	; 179
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	60 81       	ld	r22, Z
    250c:	71 81       	ldd	r23, Z+1	; 0x01
    250e:	82 81       	ldd	r24, Z+2	; 0x02
    2510:	93 81       	ldd	r25, Z+3	; 0x03
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	44 f4       	brge	.+16     	; 0x2532 <askForPassword+0xa0>
		__ticks = 1;
    2522:	fe 01       	movw	r30, r28
    2524:	e5 5b       	subi	r30, 0xB5	; 181
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	80 83       	st	Z, r24
    2530:	64 c0       	rjmp	.+200    	; 0x25fa <askForPassword+0x168>
	else if (__tmp > 65535)
    2532:	fe 01       	movw	r30, r28
    2534:	e3 5b       	subi	r30, 0xB3	; 179
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	3f ef       	ldi	r19, 0xFF	; 255
    2544:	4f e7       	ldi	r20, 0x7F	; 127
    2546:	57 e4       	ldi	r21, 0x47	; 71
    2548:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    254c:	18 16       	cp	r1, r24
    254e:	0c f0       	brlt	.+2      	; 0x2552 <askForPassword+0xc0>
    2550:	43 c0       	rjmp	.+134    	; 0x25d8 <askForPassword+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2552:	fe 01       	movw	r30, r28
    2554:	ef 5a       	subi	r30, 0xAF	; 175
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	60 81       	ld	r22, Z
    255a:	71 81       	ldd	r23, Z+1	; 0x01
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	93 81       	ldd	r25, Z+3	; 0x03
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e2       	ldi	r20, 0x20	; 32
    2566:	51 e4       	ldi	r21, 0x41	; 65
    2568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	8e 01       	movw	r16, r28
    2572:	05 5b       	subi	r16, 0xB5	; 181
    2574:	1f 4f       	sbci	r17, 0xFF	; 255
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	f8 01       	movw	r30, r16
    2584:	91 83       	std	Z+1, r25	; 0x01
    2586:	80 83       	st	Z, r24
    2588:	1f c0       	rjmp	.+62     	; 0x25c8 <askForPassword+0x136>
    258a:	fe 01       	movw	r30, r28
    258c:	e7 5b       	subi	r30, 0xB7	; 183
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	88 ec       	ldi	r24, 0xC8	; 200
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	80 83       	st	Z, r24
    2598:	fe 01       	movw	r30, r28
    259a:	e7 5b       	subi	r30, 0xB7	; 183
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 81       	ld	r24, Z
    25a0:	91 81       	ldd	r25, Z+1	; 0x01
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <askForPassword+0x110>
    25a6:	fe 01       	movw	r30, r28
    25a8:	e7 5b       	subi	r30, 0xB7	; 183
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b0:	de 01       	movw	r26, r28
    25b2:	a5 5b       	subi	r26, 0xB5	; 181
    25b4:	bf 4f       	sbci	r27, 0xFF	; 255
    25b6:	fe 01       	movw	r30, r28
    25b8:	e5 5b       	subi	r30, 0xB5	; 181
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	91 81       	ldd	r25, Z+1	; 0x01
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	11 96       	adiw	r26, 0x01	; 1
    25c4:	9c 93       	st	X, r25
    25c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c8:	fe 01       	movw	r30, r28
    25ca:	e5 5b       	subi	r30, 0xB5	; 181
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	d1 f6       	brne	.-76     	; 0x258a <askForPassword+0xf8>
    25d6:	27 c0       	rjmp	.+78     	; 0x2626 <askForPassword+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d8:	8e 01       	movw	r16, r28
    25da:	05 5b       	subi	r16, 0xB5	; 181
    25dc:	1f 4f       	sbci	r17, 0xFF	; 255
    25de:	fe 01       	movw	r30, r28
    25e0:	e3 5b       	subi	r30, 0xB3	; 179
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	60 81       	ld	r22, Z
    25e6:	71 81       	ldd	r23, Z+1	; 0x01
    25e8:	82 81       	ldd	r24, Z+2	; 0x02
    25ea:	93 81       	ldd	r25, Z+3	; 0x03
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	f8 01       	movw	r30, r16
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	80 83       	st	Z, r24
    25fa:	de 01       	movw	r26, r28
    25fc:	a9 5b       	subi	r26, 0xB9	; 185
    25fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2600:	fe 01       	movw	r30, r28
    2602:	e5 5b       	subi	r30, 0xB5	; 181
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	80 81       	ld	r24, Z
    2608:	91 81       	ldd	r25, Z+1	; 0x01
    260a:	8d 93       	st	X+, r24
    260c:	9c 93       	st	X, r25
    260e:	fe 01       	movw	r30, r28
    2610:	e9 5b       	subi	r30, 0xB9	; 185
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <askForPassword+0x186>
    261c:	fe 01       	movw	r30, r28
    261e:	e9 5b       	subi	r30, 0xB9	; 185
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	80 83       	st	Z, r24


	_delay_ms(20);
	sendPassword();
    2626:	0e 94 69 11 	call	0x22d2	; 0x22d2 <sendPassword>

	message = UART_receiveByte();
    262a:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <UART_receiveByte>
    262e:	fe 01       	movw	r30, r28
    2630:	eb 5a       	subi	r30, 0xAB	; 171
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 83       	st	Z, r24
	//UART send to match the passwords
	if(message == PASSWORD_MATCH){				/* password matches EEPROM */
    2636:	fe 01       	movw	r30, r28
    2638:	eb 5a       	subi	r30, 0xAB	; 171
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 81       	ld	r24, Z
    263e:	84 30       	cpi	r24, 0x04	; 4
    2640:	09 f0       	breq	.+2      	; 0x2644 <askForPassword+0x1b2>
    2642:	b4 c2       	rjmp	.+1384   	; 0x2bac <askForPassword+0x71a>


		falseCounter = 0;
    2644:	10 92 3a 01 	sts	0x013A, r1

		switch (instruction){
    2648:	80 91 26 01 	lds	r24, 0x0126
    264c:	28 2f       	mov	r18, r24
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	68 96       	adiw	r28, 0x18	; 24
    2652:	3f af       	std	Y+63, r19	; 0x3f
    2654:	2e af       	std	Y+62, r18	; 0x3e
    2656:	68 97       	sbiw	r28, 0x18	; 24
    2658:	68 96       	adiw	r28, 0x18	; 24
    265a:	8e ad       	ldd	r24, Y+62	; 0x3e
    265c:	9f ad       	ldd	r25, Y+63	; 0x3f
    265e:	68 97       	sbiw	r28, 0x18	; 24
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	49 f0       	breq	.+18     	; 0x2676 <askForPassword+0x1e4>
    2664:	68 96       	adiw	r28, 0x18	; 24
    2666:	ee ad       	ldd	r30, Y+62	; 0x3e
    2668:	ff ad       	ldd	r31, Y+63	; 0x3f
    266a:	68 97       	sbiw	r28, 0x18	; 24
    266c:	e1 30       	cpi	r30, 0x01	; 1
    266e:	f1 05       	cpc	r31, r1
    2670:	09 f4       	brne	.+2      	; 0x2674 <askForPassword+0x1e2>
    2672:	27 c2       	rjmp	.+1102   	; 0x2ac2 <askForPassword+0x630>
    2674:	b6 c2       	rjmp	.+1388   	; 0x2be2 <askForPassword+0x750>

		case 0:
			UART_sendByte(OPEN_DOOR);	// UART send to open the door
    2676:	83 e0       	ldi	r24, 0x03	; 3
    2678:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <UART_sendByte>
			if(UART_receiveByte() == DOOR_IS_OPENING){	//show opening door
    267c:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <UART_receiveByte>
    2680:	87 30       	cpi	r24, 0x07	; 7
    2682:	09 f0       	breq	.+2      	; 0x2686 <askForPassword+0x1f4>
    2684:	95 c0       	rjmp	.+298    	; 0x27b0 <askForPassword+0x31e>
				LCD_goToRowColumn(0,0); /* display the number every time at this position */
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	60 e0       	ldi	r22, 0x00	; 0
    268a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_goToRowColumn>

				LCD_displayString("Door is opening!");
    268e:	8b ed       	ldi	r24, 0xDB	; 219
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>

				LCD_goToRowColumn(1,0); /* display the number every time at this position */
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	60 e0       	ldi	r22, 0x00	; 0
    269a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_goToRowColumn>

				LCD_displayString("               ");
    269e:	83 e7       	ldi	r24, 0x73	; 115
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>
    26a6:	fe 01       	movw	r30, r28
    26a8:	ed 5b       	subi	r30, 0xBD	; 189
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	a0 e7       	ldi	r26, 0x70	; 112
    26b2:	b1 e4       	ldi	r27, 0x41	; 65
    26b4:	80 83       	st	Z, r24
    26b6:	91 83       	std	Z+1, r25	; 0x01
    26b8:	a2 83       	std	Z+2, r26	; 0x02
    26ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26bc:	8e 01       	movw	r16, r28
    26be:	01 5c       	subi	r16, 0xC1	; 193
    26c0:	1f 4f       	sbci	r17, 0xFF	; 255
    26c2:	fe 01       	movw	r30, r28
    26c4:	ed 5b       	subi	r30, 0xBD	; 189
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	60 81       	ld	r22, Z
    26ca:	71 81       	ldd	r23, Z+1	; 0x01
    26cc:	82 81       	ldd	r24, Z+2	; 0x02
    26ce:	93 81       	ldd	r25, Z+3	; 0x03
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	4a ef       	ldi	r20, 0xFA	; 250
    26d6:	54 e4       	ldi	r21, 0x44	; 68
    26d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	f8 01       	movw	r30, r16
    26e2:	80 83       	st	Z, r24
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	a2 83       	std	Z+2, r26	; 0x02
    26e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ea:	fe 01       	movw	r30, r28
    26ec:	ff 96       	adiw	r30, 0x3f	; 63
    26ee:	60 81       	ld	r22, Z
    26f0:	71 81       	ldd	r23, Z+1	; 0x01
    26f2:	82 81       	ldd	r24, Z+2	; 0x02
    26f4:	93 81       	ldd	r25, Z+3	; 0x03
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e8       	ldi	r20, 0x80	; 128
    26fc:	5f e3       	ldi	r21, 0x3F	; 63
    26fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2702:	88 23       	and	r24, r24
    2704:	2c f4       	brge	.+10     	; 0x2710 <askForPassword+0x27e>
		__ticks = 1;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	9e af       	std	Y+62, r25	; 0x3e
    270c:	8d af       	std	Y+61, r24	; 0x3d
    270e:	46 c0       	rjmp	.+140    	; 0x279c <askForPassword+0x30a>
	else if (__tmp > 65535)
    2710:	fe 01       	movw	r30, r28
    2712:	ff 96       	adiw	r30, 0x3f	; 63
    2714:	60 81       	ld	r22, Z
    2716:	71 81       	ldd	r23, Z+1	; 0x01
    2718:	82 81       	ldd	r24, Z+2	; 0x02
    271a:	93 81       	ldd	r25, Z+3	; 0x03
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	3f ef       	ldi	r19, 0xFF	; 255
    2720:	4f e7       	ldi	r20, 0x7F	; 127
    2722:	57 e4       	ldi	r21, 0x47	; 71
    2724:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2728:	18 16       	cp	r1, r24
    272a:	64 f5       	brge	.+88     	; 0x2784 <askForPassword+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272c:	fe 01       	movw	r30, r28
    272e:	ed 5b       	subi	r30, 0xBD	; 189
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	60 81       	ld	r22, Z
    2734:	71 81       	ldd	r23, Z+1	; 0x01
    2736:	82 81       	ldd	r24, Z+2	; 0x02
    2738:	93 81       	ldd	r25, Z+3	; 0x03
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e2       	ldi	r20, 0x20	; 32
    2740:	51 e4       	ldi	r21, 0x41	; 65
    2742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	9e af       	std	Y+62, r25	; 0x3e
    2758:	8d af       	std	Y+61, r24	; 0x3d
    275a:	0f c0       	rjmp	.+30     	; 0x277a <askForPassword+0x2e8>
    275c:	88 ec       	ldi	r24, 0xC8	; 200
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	9c af       	std	Y+60, r25	; 0x3c
    2762:	8b af       	std	Y+59, r24	; 0x3b
    2764:	8b ad       	ldd	r24, Y+59	; 0x3b
    2766:	9c ad       	ldd	r25, Y+60	; 0x3c
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <askForPassword+0x2d6>
    276c:	9c af       	std	Y+60, r25	; 0x3c
    276e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2770:	8d ad       	ldd	r24, Y+61	; 0x3d
    2772:	9e ad       	ldd	r25, Y+62	; 0x3e
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	9e af       	std	Y+62, r25	; 0x3e
    2778:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277a:	8d ad       	ldd	r24, Y+61	; 0x3d
    277c:	9e ad       	ldd	r25, Y+62	; 0x3e
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	69 f7       	brne	.-38     	; 0x275c <askForPassword+0x2ca>
    2782:	16 c0       	rjmp	.+44     	; 0x27b0 <askForPassword+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2784:	fe 01       	movw	r30, r28
    2786:	ff 96       	adiw	r30, 0x3f	; 63
    2788:	60 81       	ld	r22, Z
    278a:	71 81       	ldd	r23, Z+1	; 0x01
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	9e af       	std	Y+62, r25	; 0x3e
    279a:	8d af       	std	Y+61, r24	; 0x3d
    279c:	8d ad       	ldd	r24, Y+61	; 0x3d
    279e:	9e ad       	ldd	r25, Y+62	; 0x3e
    27a0:	9a af       	std	Y+58, r25	; 0x3a
    27a2:	89 af       	std	Y+57, r24	; 0x39
    27a4:	89 ad       	ldd	r24, Y+57	; 0x39
    27a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <askForPassword+0x316>
    27ac:	9a af       	std	Y+58, r25	; 0x3a
    27ae:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(15);
			}
			if(UART_receiveByte() == DOOR_IS_OPEN){
    27b0:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <UART_receiveByte>
    27b4:	88 30       	cpi	r24, 0x08	; 8
    27b6:	09 f0       	breq	.+2      	; 0x27ba <askForPassword+0x328>
    27b8:	82 c0       	rjmp	.+260    	; 0x28be <askForPassword+0x42c>

				LCD_goToRowColumn(0,0); /* display the number every time at this position */
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_goToRowColumn>

				LCD_displayString("Door is open!   ");
    27c2:	8c ee       	ldi	r24, 0xEC	; 236
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>

				LCD_goToRowColumn(1,0); /* display the number every time at this position */
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_goToRowColumn>

				LCD_displayString("               ");
    27d2:	83 e7       	ldi	r24, 0x73	; 115
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	a0 e7       	ldi	r26, 0x70	; 112
    27e0:	b1 e4       	ldi	r27, 0x41	; 65
    27e2:	8d ab       	std	Y+53, r24	; 0x35
    27e4:	9e ab       	std	Y+54, r25	; 0x36
    27e6:	af ab       	std	Y+55, r26	; 0x37
    27e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ea:	6d a9       	ldd	r22, Y+53	; 0x35
    27ec:	7e a9       	ldd	r23, Y+54	; 0x36
    27ee:	8f a9       	ldd	r24, Y+55	; 0x37
    27f0:	98 ad       	ldd	r25, Y+56	; 0x38
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	4a ef       	ldi	r20, 0xFA	; 250
    27f8:	54 e4       	ldi	r21, 0x44	; 68
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	89 ab       	std	Y+49, r24	; 0x31
    2804:	9a ab       	std	Y+50, r25	; 0x32
    2806:	ab ab       	std	Y+51, r26	; 0x33
    2808:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    280a:	69 a9       	ldd	r22, Y+49	; 0x31
    280c:	7a a9       	ldd	r23, Y+50	; 0x32
    280e:	8b a9       	ldd	r24, Y+51	; 0x33
    2810:	9c a9       	ldd	r25, Y+52	; 0x34
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	5f e3       	ldi	r21, 0x3F	; 63
    281a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    281e:	88 23       	and	r24, r24
    2820:	2c f4       	brge	.+10     	; 0x282c <askForPassword+0x39a>
		__ticks = 1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	98 ab       	std	Y+48, r25	; 0x30
    2828:	8f a7       	std	Y+47, r24	; 0x2f
    282a:	3f c0       	rjmp	.+126    	; 0x28aa <askForPassword+0x418>
	else if (__tmp > 65535)
    282c:	69 a9       	ldd	r22, Y+49	; 0x31
    282e:	7a a9       	ldd	r23, Y+50	; 0x32
    2830:	8b a9       	ldd	r24, Y+51	; 0x33
    2832:	9c a9       	ldd	r25, Y+52	; 0x34
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	4f e7       	ldi	r20, 0x7F	; 127
    283a:	57 e4       	ldi	r21, 0x47	; 71
    283c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2840:	18 16       	cp	r1, r24
    2842:	4c f5       	brge	.+82     	; 0x2896 <askForPassword+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2844:	6d a9       	ldd	r22, Y+53	; 0x35
    2846:	7e a9       	ldd	r23, Y+54	; 0x36
    2848:	8f a9       	ldd	r24, Y+55	; 0x37
    284a:	98 ad       	ldd	r25, Y+56	; 0x38
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e2       	ldi	r20, 0x20	; 32
    2852:	51 e4       	ldi	r21, 0x41	; 65
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	98 ab       	std	Y+48, r25	; 0x30
    286a:	8f a7       	std	Y+47, r24	; 0x2f
    286c:	0f c0       	rjmp	.+30     	; 0x288c <askForPassword+0x3fa>
    286e:	88 ec       	ldi	r24, 0xC8	; 200
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9e a7       	std	Y+46, r25	; 0x2e
    2874:	8d a7       	std	Y+45, r24	; 0x2d
    2876:	8d a5       	ldd	r24, Y+45	; 0x2d
    2878:	9e a5       	ldd	r25, Y+46	; 0x2e
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <askForPassword+0x3e8>
    287e:	9e a7       	std	Y+46, r25	; 0x2e
    2880:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2882:	8f a5       	ldd	r24, Y+47	; 0x2f
    2884:	98 a9       	ldd	r25, Y+48	; 0x30
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	98 ab       	std	Y+48, r25	; 0x30
    288a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288c:	8f a5       	ldd	r24, Y+47	; 0x2f
    288e:	98 a9       	ldd	r25, Y+48	; 0x30
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	69 f7       	brne	.-38     	; 0x286e <askForPassword+0x3dc>
    2894:	14 c0       	rjmp	.+40     	; 0x28be <askForPassword+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2896:	69 a9       	ldd	r22, Y+49	; 0x31
    2898:	7a a9       	ldd	r23, Y+50	; 0x32
    289a:	8b a9       	ldd	r24, Y+51	; 0x33
    289c:	9c a9       	ldd	r25, Y+52	; 0x34
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	98 ab       	std	Y+48, r25	; 0x30
    28a8:	8f a7       	std	Y+47, r24	; 0x2f
    28aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ac:	98 a9       	ldd	r25, Y+48	; 0x30
    28ae:	9c a7       	std	Y+44, r25	; 0x2c
    28b0:	8b a7       	std	Y+43, r24	; 0x2b
    28b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    28b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <askForPassword+0x424>
    28ba:	9c a7       	std	Y+44, r25	; 0x2c
    28bc:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(15);

			}
			if(UART_receiveByte() == DOOR_IS_CLOSING){
    28be:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <UART_receiveByte>
    28c2:	89 30       	cpi	r24, 0x09	; 9
    28c4:	09 f0       	breq	.+2      	; 0x28c8 <askForPassword+0x436>
    28c6:	82 c0       	rjmp	.+260    	; 0x29cc <askForPassword+0x53a>

				LCD_goToRowColumn(0,0); /* display the number every time at this position */
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	60 e0       	ldi	r22, 0x00	; 0
    28cc:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_goToRowColumn>

				LCD_displayString("Door is closing!");
    28d0:	8d ef       	ldi	r24, 0xFD	; 253
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>

				LCD_goToRowColumn(1,0); /* display the number every time at this position */
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_goToRowColumn>

				LCD_displayString("               ");
    28e0:	83 e7       	ldi	r24, 0x73	; 115
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_displayString>
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	a0 e7       	ldi	r26, 0x70	; 112
    28ee:	b1 e4       	ldi	r27, 0x41	; 65
    28f0:	8f a3       	std	Y+39, r24	; 0x27
    28f2:	98 a7       	std	Y+40, r25	; 0x28
    28f4:	a9 a7       	std	Y+41, r26	; 0x29
    28f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f8:	6f a1       	ldd	r22, Y+39	; 0x27
    28fa:	78 a5       	ldd	r23, Y+40	; 0x28
    28fc:	89 a5       	ldd	r24, Y+41	; 0x29
    28fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	4a ef       	ldi	r20, 0xFA	; 250
    2906:	54 e4       	ldi	r21, 0x44	; 68
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	8b a3       	std	Y+35, r24	; 0x23
    2912:	9c a3       	std	Y+36, r25	; 0x24
    2914:	ad a3       	std	Y+37, r26	; 0x25
    2916:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2918:	6b a1       	ldd	r22, Y+35	; 0x23
    291a:	7c a1       	ldd	r23, Y+36	; 0x24
    291c:	8d a1       	ldd	r24, Y+37	; 0x25
    291e:	9e a1       	ldd	r25, Y+38	; 0x26
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	2c f4       	brge	.+10     	; 0x293a <askForPassword+0x4a8>
		__ticks = 1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9a a3       	std	Y+34, r25	; 0x22
    2936:	89 a3       	std	Y+33, r24	; 0x21
    2938:	3f c0       	rjmp	.+126    	; 0x29b8 <askForPassword+0x526>
	else if (__tmp > 65535)
    293a:	6b a1       	ldd	r22, Y+35	; 0x23
    293c:	7c a1       	ldd	r23, Y+36	; 0x24
    293e:	8d a1       	ldd	r24, Y+37	; 0x25
    2940:	9e a1       	ldd	r25, Y+38	; 0x26
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	3f ef       	ldi	r19, 0xFF	; 255
    2946:	4f e7       	ldi	r20, 0x7F	; 127
    2948:	57 e4       	ldi	r21, 0x47	; 71
    294a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    294e:	18 16       	cp	r1, r24
    2950:	4c f5       	brge	.+82     	; 0x29a4 <askForPassword+0x512>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2952:	6f a1       	ldd	r22, Y+39	; 0x27
    2954:	78 a5       	ldd	r23, Y+40	; 0x28
    2956:	89 a5       	ldd	r24, Y+41	; 0x29
    2958:	9a a5       	ldd	r25, Y+42	; 0x2a
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e2       	ldi	r20, 0x20	; 32
    2960:	51 e4       	ldi	r21, 0x41	; 65
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9a a3       	std	Y+34, r25	; 0x22
    2978:	89 a3       	std	Y+33, r24	; 0x21
    297a:	0f c0       	rjmp	.+30     	; 0x299a <askForPassword+0x508>
    297c:	88 ec       	ldi	r24, 0xC8	; 200
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	98 a3       	std	Y+32, r25	; 0x20
    2982:	8f 8f       	std	Y+31, r24	; 0x1f
    2984:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2986:	98 a1       	ldd	r25, Y+32	; 0x20
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <askForPassword+0x4f6>
    298c:	98 a3       	std	Y+32, r25	; 0x20
    298e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2990:	89 a1       	ldd	r24, Y+33	; 0x21
    2992:	9a a1       	ldd	r25, Y+34	; 0x22
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	9a a3       	std	Y+34, r25	; 0x22
    2998:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299a:	89 a1       	ldd	r24, Y+33	; 0x21
    299c:	9a a1       	ldd	r25, Y+34	; 0x22
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	69 f7       	brne	.-38     	; 0x297c <askForPassword+0x4ea>
    29a2:	14 c0       	rjmp	.+40     	; 0x29cc <askForPassword+0x53a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a4:	6b a1       	ldd	r22, Y+35	; 0x23
    29a6:	7c a1       	ldd	r23, Y+36	; 0x24
    29a8:	8d a1       	ldd	r24, Y+37	; 0x25
    29aa:	9e a1       	ldd	r25, Y+38	; 0x26
    29ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	9a a3       	std	Y+34, r25	; 0x22
    29b6:	89 a3       	std	Y+33, r24	; 0x21
    29b8:	89 a1       	ldd	r24, Y+33	; 0x21
    29ba:	9a a1       	ldd	r25, Y+34	; 0x22
    29bc:	9e 8f       	std	Y+30, r25	; 0x1e
    29be:	8d 8f       	std	Y+29, r24	; 0x1d
    29c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <askForPassword+0x532>
    29c8:	9e 8f       	std	Y+30, r25	; 0x1e
    29ca:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(15);

			}
			if(UART_receiveByte() == DOOR_IS_CLOSE){
    29cc:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <UART_receiveByte>
    29d0:	80 31       	cpi	r24, 0x10	; 16
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <askForPassword+0x544>
    29d4:	06 c1       	rjmp	.+524    	; 0x2be2 <askForPassword+0x750>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	a0 e7       	ldi	r26, 0x70	; 112
    29dc:	b1 e4       	ldi	r27, 0x41	; 65
    29de:	89 8f       	std	Y+25, r24	; 0x19
    29e0:	9a 8f       	std	Y+26, r25	; 0x1a
    29e2:	ab 8f       	std	Y+27, r26	; 0x1b
    29e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e6:	69 8d       	ldd	r22, Y+25	; 0x19
    29e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	4a ef       	ldi	r20, 0xFA	; 250
    29f4:	54 e4       	ldi	r21, 0x44	; 68
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	8d 8b       	std	Y+21, r24	; 0x15
    2a00:	9e 8b       	std	Y+22, r25	; 0x16
    2a02:	af 8b       	std	Y+23, r26	; 0x17
    2a04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a06:	6d 89       	ldd	r22, Y+21	; 0x15
    2a08:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e8       	ldi	r20, 0x80	; 128
    2a14:	5f e3       	ldi	r21, 0x3F	; 63
    2a16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a1a:	88 23       	and	r24, r24
    2a1c:	2c f4       	brge	.+10     	; 0x2a28 <askForPassword+0x596>
		__ticks = 1;
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	9c 8b       	std	Y+20, r25	; 0x14
    2a24:	8b 8b       	std	Y+19, r24	; 0x13
    2a26:	3f c0       	rjmp	.+126    	; 0x2aa6 <askForPassword+0x614>
	else if (__tmp > 65535)
    2a28:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	3f ef       	ldi	r19, 0xFF	; 255
    2a34:	4f e7       	ldi	r20, 0x7F	; 127
    2a36:	57 e4       	ldi	r21, 0x47	; 71
    2a38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a3c:	18 16       	cp	r1, r24
    2a3e:	4c f5       	brge	.+82     	; 0x2a92 <askForPassword+0x600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a40:	69 8d       	ldd	r22, Y+25	; 0x19
    2a42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 e2       	ldi	r20, 0x20	; 32
    2a4e:	51 e4       	ldi	r21, 0x41	; 65
    2a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	bc 01       	movw	r22, r24
    2a5a:	cd 01       	movw	r24, r26
    2a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	9c 8b       	std	Y+20, r25	; 0x14
    2a66:	8b 8b       	std	Y+19, r24	; 0x13
    2a68:	0f c0       	rjmp	.+30     	; 0x2a88 <askForPassword+0x5f6>
    2a6a:	88 ec       	ldi	r24, 0xC8	; 200
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	9a 8b       	std	Y+18, r25	; 0x12
    2a70:	89 8b       	std	Y+17, r24	; 0x11
    2a72:	89 89       	ldd	r24, Y+17	; 0x11
    2a74:	9a 89       	ldd	r25, Y+18	; 0x12
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <askForPassword+0x5e4>
    2a7a:	9a 8b       	std	Y+18, r25	; 0x12
    2a7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a80:	9c 89       	ldd	r25, Y+20	; 0x14
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	9c 8b       	std	Y+20, r25	; 0x14
    2a86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a88:	8b 89       	ldd	r24, Y+19	; 0x13
    2a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	69 f7       	brne	.-38     	; 0x2a6a <askForPassword+0x5d8>
    2a90:	14 c0       	rjmp	.+40     	; 0x2aba <askForPassword+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a92:	6d 89       	ldd	r22, Y+21	; 0x15
    2a94:	7e 89       	ldd	r23, Y+22	; 0x16
    2a96:	8f 89       	ldd	r24, Y+23	; 0x17
    2a98:	98 8d       	ldd	r25, Y+24	; 0x18
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	9c 8b       	std	Y+20, r25	; 0x14
    2aa4:	8b 8b       	std	Y+19, r24	; 0x13
    2aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aaa:	98 8b       	std	Y+16, r25	; 0x10
    2aac:	8f 87       	std	Y+15, r24	; 0x0f
    2aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab0:	98 89       	ldd	r25, Y+16	; 0x10
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <askForPassword+0x620>
    2ab6:	98 8b       	std	Y+16, r25	; 0x10
    2ab8:	8f 87       	std	Y+15, r24	; 0x0f

				_delay_ms(15);
				state = SHOWMAIN; // UART receive to go to main screen again
    2aba:	82 e0       	ldi	r24, 0x02	; 2
    2abc:	80 93 39 01 	sts	0x0139, r24
    2ac0:	90 c0       	rjmp	.+288    	; 0x2be2 <askForPassword+0x750>


			break;
		case 1:

			state = ENTERPASS;
    2ac2:	10 92 39 01 	sts	0x0139, r1
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a0 ef       	ldi	r26, 0xF0	; 240
    2acc:	b1 e4       	ldi	r27, 0x41	; 65
    2ace:	8b 87       	std	Y+11, r24	; 0x0b
    2ad0:	9c 87       	std	Y+12, r25	; 0x0c
    2ad2:	ad 87       	std	Y+13, r26	; 0x0d
    2ad4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    2adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	4a ef       	ldi	r20, 0xFA	; 250
    2ae4:	54 e4       	ldi	r21, 0x44	; 68
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	8f 83       	std	Y+7, r24	; 0x07
    2af0:	98 87       	std	Y+8, r25	; 0x08
    2af2:	a9 87       	std	Y+9, r26	; 0x09
    2af4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2af6:	6f 81       	ldd	r22, Y+7	; 0x07
    2af8:	78 85       	ldd	r23, Y+8	; 0x08
    2afa:	89 85       	ldd	r24, Y+9	; 0x09
    2afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e8       	ldi	r20, 0x80	; 128
    2b04:	5f e3       	ldi	r21, 0x3F	; 63
    2b06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b0a:	88 23       	and	r24, r24
    2b0c:	2c f4       	brge	.+10     	; 0x2b18 <askForPassword+0x686>
		__ticks = 1;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9e 83       	std	Y+6, r25	; 0x06
    2b14:	8d 83       	std	Y+5, r24	; 0x05
    2b16:	3f c0       	rjmp	.+126    	; 0x2b96 <askForPassword+0x704>
	else if (__tmp > 65535)
    2b18:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1a:	78 85       	ldd	r23, Y+8	; 0x08
    2b1c:	89 85       	ldd	r24, Y+9	; 0x09
    2b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	3f ef       	ldi	r19, 0xFF	; 255
    2b24:	4f e7       	ldi	r20, 0x7F	; 127
    2b26:	57 e4       	ldi	r21, 0x47	; 71
    2b28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b2c:	18 16       	cp	r1, r24
    2b2e:	4c f5       	brge	.+82     	; 0x2b82 <askForPassword+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e2       	ldi	r20, 0x20	; 32
    2b3e:	51 e4       	ldi	r21, 0x41	; 65
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	9e 83       	std	Y+6, r25	; 0x06
    2b56:	8d 83       	std	Y+5, r24	; 0x05
    2b58:	0f c0       	rjmp	.+30     	; 0x2b78 <askForPassword+0x6e6>
    2b5a:	88 ec       	ldi	r24, 0xC8	; 200
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9c 83       	std	Y+4, r25	; 0x04
    2b60:	8b 83       	std	Y+3, r24	; 0x03
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	9c 81       	ldd	r25, Y+4	; 0x04
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <askForPassword+0x6d4>
    2b6a:	9c 83       	std	Y+4, r25	; 0x04
    2b6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b70:	9e 81       	ldd	r25, Y+6	; 0x06
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	9e 83       	std	Y+6, r25	; 0x06
    2b76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b78:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7c:	00 97       	sbiw	r24, 0x00	; 0
    2b7e:	69 f7       	brne	.-38     	; 0x2b5a <askForPassword+0x6c8>
    2b80:	30 c0       	rjmp	.+96     	; 0x2be2 <askForPassword+0x750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b82:	6f 81       	ldd	r22, Y+7	; 0x07
    2b84:	78 85       	ldd	r23, Y+8	; 0x08
    2b86:	89 85       	ldd	r24, Y+9	; 0x09
    2b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	9e 83       	std	Y+6, r25	; 0x06
    2b94:	8d 83       	std	Y+5, r24	; 0x05
    2b96:	8d 81       	ldd	r24, Y+5	; 0x05
    2b98:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9a:	9a 83       	std	Y+2, r25	; 0x02
    2b9c:	89 83       	std	Y+1, r24	; 0x01
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <askForPassword+0x710>
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	1b c0       	rjmp	.+54     	; 0x2be2 <askForPassword+0x750>

		}

	}
	//_delay_ms(500);
	else if (message == PASSWORD_DOESNT_MATCH){  // it doesn't
    2bac:	fe 01       	movw	r30, r28
    2bae:	eb 5a       	subi	r30, 0xAB	; 171
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	85 30       	cpi	r24, 0x05	; 5
    2bb6:	a9 f4       	brne	.+42     	; 0x2be2 <askForPassword+0x750>




		if(falseCounter >2){
    2bb8:	80 91 3a 01 	lds	r24, 0x013A
    2bbc:	83 30       	cpi	r24, 0x03	; 3
    2bbe:	48 f0       	brcs	.+18     	; 0x2bd2 <askForPassword+0x740>


			UART_sendByte(BUZZER_ON);
    2bc0:	82 e0       	ldi	r24, 0x02	; 2
    2bc2:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <UART_sendByte>
			state = SCREENLOCKED;//LOCK screen
    2bc6:	84 e0       	ldi	r24, 0x04	; 4
    2bc8:	80 93 39 01 	sts	0x0139, r24
			falseCounter = 0;
    2bcc:	10 92 3a 01 	sts	0x013A, r1
    2bd0:	08 c0       	rjmp	.+16     	; 0x2be2 <askForPassword+0x750>
			//UART send to turn on the buzzer
		}else{
			falseCounter++;
    2bd2:	80 91 3a 01 	lds	r24, 0x013A
    2bd6:	8f 5f       	subi	r24, 0xFF	; 255
    2bd8:	80 93 3a 01 	sts	0x013A, r24
			state = ASKFORPASSWORD; // go to the next iteration there is no need for this line
    2bdc:	83 e0       	ldi	r24, 0x03	; 3
    2bde:	80 93 39 01 	sts	0x0139, r24
			// as the state is already ASKFORPASSOWRD and nothing changed it
		}
	}

	return 0;
    2be2:	80 e0       	ldi	r24, 0x00	; 0
}
    2be4:	c9 5a       	subi	r28, 0xA9	; 169
    2be6:	df 4f       	sbci	r29, 0xFF	; 255
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	1f 91       	pop	r17
    2bf8:	0f 91       	pop	r16
    2bfa:	08 95       	ret

00002bfc <compare_arrays>:
 * OUTPUTS :	boolean
 *
 *
 * NOTES :	none
 ***************************************************************************/
bool compare_arrays(uint8 *Arr1 , uint8 *Arr2, uint8 size){
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	27 97       	sbiw	r28, 0x07	; 7
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	9b 83       	std	Y+3, r25	; 0x03
    2c12:	8a 83       	std	Y+2, r24	; 0x02
    2c14:	7d 83       	std	Y+5, r23	; 0x05
    2c16:	6c 83       	std	Y+4, r22	; 0x04
    2c18:	4e 83       	std	Y+6, r20	; 0x06

	uint8 i;
	for(i =0;i<size;i++){
    2c1a:	19 82       	std	Y+1, r1	; 0x01
    2c1c:	19 c0       	rjmp	.+50     	; 0x2c50 <compare_arrays+0x54>

		if(Arr1[i] == Arr2[i]){
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	9b 81       	ldd	r25, Y+3	; 0x03
    2c28:	fc 01       	movw	r30, r24
    2c2a:	e2 0f       	add	r30, r18
    2c2c:	f3 1f       	adc	r31, r19
    2c2e:	40 81       	ld	r20, Z
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	28 2f       	mov	r18, r24
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	8c 81       	ldd	r24, Y+4	; 0x04
    2c38:	9d 81       	ldd	r25, Y+5	; 0x05
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	e2 0f       	add	r30, r18
    2c3e:	f3 1f       	adc	r31, r19
    2c40:	80 81       	ld	r24, Z
    2c42:	48 17       	cp	r20, r24
    2c44:	11 f0       	breq	.+4      	; 0x2c4a <compare_arrays+0x4e>

		}else{
			return 0;
    2c46:	1f 82       	std	Y+7, r1	; 0x07
    2c48:	09 c0       	rjmp	.+18     	; 0x2c5c <compare_arrays+0x60>
 * NOTES :	none
 ***************************************************************************/
bool compare_arrays(uint8 *Arr1 , uint8 *Arr2, uint8 size){

	uint8 i;
	for(i =0;i<size;i++){
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	8f 5f       	subi	r24, 0xFF	; 255
    2c4e:	89 83       	std	Y+1, r24	; 0x01
    2c50:	99 81       	ldd	r25, Y+1	; 0x01
    2c52:	8e 81       	ldd	r24, Y+6	; 0x06
    2c54:	98 17       	cp	r25, r24
    2c56:	18 f3       	brcs	.-58     	; 0x2c1e <compare_arrays+0x22>
		}


	}

	return 1;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	8f 83       	std	Y+7, r24	; 0x07
    2c5c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2c5e:	27 96       	adiw	r28, 0x07	; 7
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	f8 94       	cli
    2c64:	de bf       	out	0x3e, r29	; 62
    2c66:	0f be       	out	0x3f, r0	; 63
    2c68:	cd bf       	out	0x3d, r28	; 61
    2c6a:	cf 91       	pop	r28
    2c6c:	df 91       	pop	r29
    2c6e:	08 95       	ret

00002c70 <UART_init>:
 *  Created on: Nov 27, 2020
 *      Author: Mostafa
 */
#include "UART.h"

void UART_init(const UART_configType * UART_Config_Ptr){
    2c70:	df 93       	push	r29
    2c72:	cf 93       	push	r28
    2c74:	00 d0       	rcall	.+0      	; 0x2c76 <UART_init+0x6>
    2c76:	00 d0       	rcall	.+0      	; 0x2c78 <UART_init+0x8>
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	9c 83       	std	Y+4, r25	; 0x04
    2c7e:	8b 83       	std	Y+3, r24	; 0x03


	uint16 BuadPrescaler = ((F_CPU / (UART_Config_Ptr->buadRate)) - 1);
    2c80:	eb 81       	ldd	r30, Y+3	; 0x03
    2c82:	fc 81       	ldd	r31, Y+4	; 0x04
    2c84:	23 81       	ldd	r18, Z+3	; 0x03
    2c86:	34 81       	ldd	r19, Z+4	; 0x04
    2c88:	45 81       	ldd	r20, Z+5	; 0x05
    2c8a:	56 81       	ldd	r21, Z+6	; 0x06
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	92 e1       	ldi	r25, 0x12	; 18
    2c90:	aa e7       	ldi	r26, 0x7A	; 122
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	bc 01       	movw	r22, r24
    2c96:	cd 01       	movw	r24, r26
    2c98:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__udivmodsi4>
    2c9c:	da 01       	movw	r26, r20
    2c9e:	c9 01       	movw	r24, r18
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	9a 83       	std	Y+2, r25	; 0x02
    2ca4:	89 83       	std	Y+1, r24	; 0x01
	/* use double speed mode */
	SET_BIT(UCSRA,U2X);
    2ca6:	ab e2       	ldi	r26, 0x2B	; 43
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	eb e2       	ldi	r30, 0x2B	; 43
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	82 60       	ori	r24, 0x02	; 2
    2cb2:	8c 93       	st	X, r24

	/* enable the rx and tx */
	SET_BIT(UCSRB,RXEN);
    2cb4:	aa e2       	ldi	r26, 0x2A	; 42
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	ea e2       	ldi	r30, 0x2A	; 42
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	80 61       	ori	r24, 0x10	; 16
    2cc0:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    2cc2:	aa e2       	ldi	r26, 0x2A	; 42
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	ea e2       	ldi	r30, 0x2A	; 42
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	88 60       	ori	r24, 0x08	; 8
    2cce:	8c 93       	st	X, r24

	/* URSEL must be 1 while writing to UCSRC */
	SET_BIT(UCSRC,URSEL);
    2cd0:	a0 e4       	ldi	r26, 0x40	; 64
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	e0 e4       	ldi	r30, 0x40	; 64
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	80 68       	ori	r24, 0x80	; 128
    2cdc:	8c 93       	st	X, r24

	/* selecting Async mode */
	CLEAR_BIT(UCSRC,UMSEL);
    2cde:	a0 e4       	ldi	r26, 0x40	; 64
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e0 e4       	ldi	r30, 0x40	; 64
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	8f 7b       	andi	r24, 0xBF	; 191
    2cea:	8c 93       	st	X, r24

	/* selecting frame options */
	UCSRC = 0;
    2cec:	e0 e4       	ldi	r30, 0x40	; 64
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	10 82       	st	Z, r1
		/*selecting Parity */
	UCSRC = (UCSRC & 0xCF) | ( (UART_Config_Ptr->parity) << UPM0 ); // UPM0 is bit 4
    2cf2:	a0 e4       	ldi	r26, 0x40	; 64
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	e0 e4       	ldi	r30, 0x40	; 64
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	2f 7c       	andi	r18, 0xCF	; 207
    2d00:	eb 81       	ldd	r30, Y+3	; 0x03
    2d02:	fc 81       	ldd	r31, Y+4	; 0x04
    2d04:	80 81       	ld	r24, Z
    2d06:	88 2f       	mov	r24, r24
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	82 95       	swap	r24
    2d0c:	92 95       	swap	r25
    2d0e:	90 7f       	andi	r25, 0xF0	; 240
    2d10:	98 27       	eor	r25, r24
    2d12:	80 7f       	andi	r24, 0xF0	; 240
    2d14:	98 27       	eor	r25, r24
    2d16:	82 2b       	or	r24, r18
    2d18:	8c 93       	st	X, r24
	/*selecting Data length */
		/* Not a 9bit data mode */
	CLEAR_BIT(UCSRB,UCSZ2);
    2d1a:	aa e2       	ldi	r26, 0x2A	; 42
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	ea e2       	ldi	r30, 0x2A	; 42
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	8b 7f       	andi	r24, 0xFB	; 251
    2d26:	8c 93       	st	X, r24
	/* 5,6,7 or 8 data length mode */
	UCSRC = (UCSRC & 0xF9) | ( (UART_Config_Ptr->dataSize) << UCSZ0 ); //UCSZ0 is bit 1
    2d28:	a0 e4       	ldi	r26, 0x40	; 64
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	e0 e4       	ldi	r30, 0x40	; 64
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	28 2f       	mov	r18, r24
    2d34:	29 7f       	andi	r18, 0xF9	; 249
    2d36:	eb 81       	ldd	r30, Y+3	; 0x03
    2d38:	fc 81       	ldd	r31, Y+4	; 0x04
    2d3a:	82 81       	ldd	r24, Z+2	; 0x02
    2d3c:	88 2f       	mov	r24, r24
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	88 0f       	add	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	82 2b       	or	r24, r18
    2d46:	8c 93       	st	X, r24
	/*selecting stop bits */
	UCSRC = (UCSRC & 0xF7) | ( (UART_Config_Ptr->stopBit) << USBS ); //USBS is bit 3
    2d48:	a0 e4       	ldi	r26, 0x40	; 64
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	e0 e4       	ldi	r30, 0x40	; 64
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	28 2f       	mov	r18, r24
    2d54:	27 7f       	andi	r18, 0xF7	; 247
    2d56:	eb 81       	ldd	r30, Y+3	; 0x03
    2d58:	fc 81       	ldd	r31, Y+4	; 0x04
    2d5a:	81 81       	ldd	r24, Z+1	; 0x01
    2d5c:	88 2f       	mov	r24, r24
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	88 0f       	add	r24, r24
    2d6a:	99 1f       	adc	r25, r25
    2d6c:	82 2b       	or	r24, r18
    2d6e:	8c 93       	st	X, r24


	/* URSEL must be 0 while writing to UBRR */
	//CLEAR_BIT(UCSRC,URSEL);
	/*Selecting BuadRate : datasheet example on page 150*/
	UBRRH = BuadPrescaler>>8;
    2d70:	e0 e4       	ldi	r30, 0x40	; 64
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	9a 81       	ldd	r25, Y+2	; 0x02
    2d78:	89 2f       	mov	r24, r25
    2d7a:	99 27       	eor	r25, r25
    2d7c:	80 83       	st	Z, r24
	UBRRL = BuadPrescaler;
    2d7e:	e9 e2       	ldi	r30, 0x29	; 41
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	80 83       	st	Z, r24
}
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	cf 91       	pop	r28
    2d90:	df 91       	pop	r29
    2d92:	08 95       	ret

00002d94 <UART_sendByte>:

void UART_sendByte(const uint8 Byte){
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	0f 92       	push	r0
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	89 83       	std	Y+1, r24	; 0x01

	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2da0:	eb e2       	ldi	r30, 0x2B	; 43
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	88 2f       	mov	r24, r24
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	80 72       	andi	r24, 0x20	; 32
    2dac:	90 70       	andi	r25, 0x00	; 0
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	b9 f3       	breq	.-18     	; 0x2da0 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = Byte;
    2db2:	ec e2       	ldi	r30, 0x2C	; 44
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	80 83       	st	Z, r24

}
    2dba:	0f 90       	pop	r0
    2dbc:	cf 91       	pop	r28
    2dbe:	df 91       	pop	r29
    2dc0:	08 95       	ret

00002dc2 <UART_receiveByte>:

uint8 UART_receiveByte(void){
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62


	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2dca:	eb e2       	ldi	r30, 0x2B	; 43
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	88 23       	and	r24, r24
    2dd2:	dc f7       	brge	.-10     	; 0x2dca <UART_receiveByte+0x8>

    return UDR;
    2dd4:	ec e2       	ldi	r30, 0x2C	; 44
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
}
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	08 95       	ret

00002de0 <__udivmodqi4>:
    2de0:	99 1b       	sub	r25, r25
    2de2:	79 e0       	ldi	r23, 0x09	; 9
    2de4:	04 c0       	rjmp	.+8      	; 0x2dee <__udivmodqi4_ep>

00002de6 <__udivmodqi4_loop>:
    2de6:	99 1f       	adc	r25, r25
    2de8:	96 17       	cp	r25, r22
    2dea:	08 f0       	brcs	.+2      	; 0x2dee <__udivmodqi4_ep>
    2dec:	96 1b       	sub	r25, r22

00002dee <__udivmodqi4_ep>:
    2dee:	88 1f       	adc	r24, r24
    2df0:	7a 95       	dec	r23
    2df2:	c9 f7       	brne	.-14     	; 0x2de6 <__udivmodqi4_loop>
    2df4:	80 95       	com	r24
    2df6:	08 95       	ret

00002df8 <__udivmodsi4>:
    2df8:	a1 e2       	ldi	r26, 0x21	; 33
    2dfa:	1a 2e       	mov	r1, r26
    2dfc:	aa 1b       	sub	r26, r26
    2dfe:	bb 1b       	sub	r27, r27
    2e00:	fd 01       	movw	r30, r26
    2e02:	0d c0       	rjmp	.+26     	; 0x2e1e <__udivmodsi4_ep>

00002e04 <__udivmodsi4_loop>:
    2e04:	aa 1f       	adc	r26, r26
    2e06:	bb 1f       	adc	r27, r27
    2e08:	ee 1f       	adc	r30, r30
    2e0a:	ff 1f       	adc	r31, r31
    2e0c:	a2 17       	cp	r26, r18
    2e0e:	b3 07       	cpc	r27, r19
    2e10:	e4 07       	cpc	r30, r20
    2e12:	f5 07       	cpc	r31, r21
    2e14:	20 f0       	brcs	.+8      	; 0x2e1e <__udivmodsi4_ep>
    2e16:	a2 1b       	sub	r26, r18
    2e18:	b3 0b       	sbc	r27, r19
    2e1a:	e4 0b       	sbc	r30, r20
    2e1c:	f5 0b       	sbc	r31, r21

00002e1e <__udivmodsi4_ep>:
    2e1e:	66 1f       	adc	r22, r22
    2e20:	77 1f       	adc	r23, r23
    2e22:	88 1f       	adc	r24, r24
    2e24:	99 1f       	adc	r25, r25
    2e26:	1a 94       	dec	r1
    2e28:	69 f7       	brne	.-38     	; 0x2e04 <__udivmodsi4_loop>
    2e2a:	60 95       	com	r22
    2e2c:	70 95       	com	r23
    2e2e:	80 95       	com	r24
    2e30:	90 95       	com	r25
    2e32:	9b 01       	movw	r18, r22
    2e34:	ac 01       	movw	r20, r24
    2e36:	bd 01       	movw	r22, r26
    2e38:	cf 01       	movw	r24, r30
    2e3a:	08 95       	ret

00002e3c <__prologue_saves__>:
    2e3c:	2f 92       	push	r2
    2e3e:	3f 92       	push	r3
    2e40:	4f 92       	push	r4
    2e42:	5f 92       	push	r5
    2e44:	6f 92       	push	r6
    2e46:	7f 92       	push	r7
    2e48:	8f 92       	push	r8
    2e4a:	9f 92       	push	r9
    2e4c:	af 92       	push	r10
    2e4e:	bf 92       	push	r11
    2e50:	cf 92       	push	r12
    2e52:	df 92       	push	r13
    2e54:	ef 92       	push	r14
    2e56:	ff 92       	push	r15
    2e58:	0f 93       	push	r16
    2e5a:	1f 93       	push	r17
    2e5c:	cf 93       	push	r28
    2e5e:	df 93       	push	r29
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
    2e64:	ca 1b       	sub	r28, r26
    2e66:	db 0b       	sbc	r29, r27
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	cd bf       	out	0x3d, r28	; 61
    2e72:	09 94       	ijmp

00002e74 <__epilogue_restores__>:
    2e74:	2a 88       	ldd	r2, Y+18	; 0x12
    2e76:	39 88       	ldd	r3, Y+17	; 0x11
    2e78:	48 88       	ldd	r4, Y+16	; 0x10
    2e7a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e7c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e7e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e80:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e82:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e84:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e86:	b9 84       	ldd	r11, Y+9	; 0x09
    2e88:	c8 84       	ldd	r12, Y+8	; 0x08
    2e8a:	df 80       	ldd	r13, Y+7	; 0x07
    2e8c:	ee 80       	ldd	r14, Y+6	; 0x06
    2e8e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e90:	0c 81       	ldd	r16, Y+4	; 0x04
    2e92:	1b 81       	ldd	r17, Y+3	; 0x03
    2e94:	aa 81       	ldd	r26, Y+2	; 0x02
    2e96:	b9 81       	ldd	r27, Y+1	; 0x01
    2e98:	ce 0f       	add	r28, r30
    2e9a:	d1 1d       	adc	r29, r1
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	f8 94       	cli
    2ea0:	de bf       	out	0x3e, r29	; 62
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	cd bf       	out	0x3d, r28	; 61
    2ea6:	ed 01       	movw	r28, r26
    2ea8:	08 95       	ret

00002eaa <memcpy>:
    2eaa:	fb 01       	movw	r30, r22
    2eac:	dc 01       	movw	r26, r24
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <memcpy+0xa>
    2eb0:	01 90       	ld	r0, Z+
    2eb2:	0d 92       	st	X+, r0
    2eb4:	41 50       	subi	r20, 0x01	; 1
    2eb6:	50 40       	sbci	r21, 0x00	; 0
    2eb8:	d8 f7       	brcc	.-10     	; 0x2eb0 <memcpy+0x6>
    2eba:	08 95       	ret

00002ebc <strlen>:
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	01 90       	ld	r0, Z+
    2ec0:	00 20       	and	r0, r0
    2ec2:	e9 f7       	brne	.-6      	; 0x2ebe <strlen+0x2>
    2ec4:	80 95       	com	r24
    2ec6:	90 95       	com	r25
    2ec8:	8e 0f       	add	r24, r30
    2eca:	9f 1f       	adc	r25, r31
    2ecc:	08 95       	ret

00002ece <itoa>:
    2ece:	fb 01       	movw	r30, r22
    2ed0:	9f 01       	movw	r18, r30
    2ed2:	e8 94       	clt
    2ed4:	42 30       	cpi	r20, 0x02	; 2
    2ed6:	c4 f0       	brlt	.+48     	; 0x2f08 <itoa+0x3a>
    2ed8:	45 32       	cpi	r20, 0x25	; 37
    2eda:	b4 f4       	brge	.+44     	; 0x2f08 <itoa+0x3a>
    2edc:	4a 30       	cpi	r20, 0x0A	; 10
    2ede:	29 f4       	brne	.+10     	; 0x2eea <itoa+0x1c>
    2ee0:	97 fb       	bst	r25, 7
    2ee2:	1e f4       	brtc	.+6      	; 0x2eea <itoa+0x1c>
    2ee4:	90 95       	com	r25
    2ee6:	81 95       	neg	r24
    2ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eea:	64 2f       	mov	r22, r20
    2eec:	77 27       	eor	r23, r23
    2eee:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__udivmodhi4>
    2ef2:	80 5d       	subi	r24, 0xD0	; 208
    2ef4:	8a 33       	cpi	r24, 0x3A	; 58
    2ef6:	0c f0       	brlt	.+2      	; 0x2efa <itoa+0x2c>
    2ef8:	89 5d       	subi	r24, 0xD9	; 217
    2efa:	81 93       	st	Z+, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	a1 f7       	brne	.-24     	; 0x2eea <itoa+0x1c>
    2f02:	16 f4       	brtc	.+4      	; 0x2f08 <itoa+0x3a>
    2f04:	5d e2       	ldi	r21, 0x2D	; 45
    2f06:	51 93       	st	Z+, r21
    2f08:	10 82       	st	Z, r1
    2f0a:	c9 01       	movw	r24, r18
    2f0c:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <strrev>

00002f10 <strrev>:
    2f10:	dc 01       	movw	r26, r24
    2f12:	fc 01       	movw	r30, r24
    2f14:	67 2f       	mov	r22, r23
    2f16:	71 91       	ld	r23, Z+
    2f18:	77 23       	and	r23, r23
    2f1a:	e1 f7       	brne	.-8      	; 0x2f14 <strrev+0x4>
    2f1c:	32 97       	sbiw	r30, 0x02	; 2
    2f1e:	04 c0       	rjmp	.+8      	; 0x2f28 <strrev+0x18>
    2f20:	7c 91       	ld	r23, X
    2f22:	6d 93       	st	X+, r22
    2f24:	70 83       	st	Z, r23
    2f26:	62 91       	ld	r22, -Z
    2f28:	ae 17       	cp	r26, r30
    2f2a:	bf 07       	cpc	r27, r31
    2f2c:	c8 f3       	brcs	.-14     	; 0x2f20 <strrev+0x10>
    2f2e:	08 95       	ret

00002f30 <__udivmodhi4>:
    2f30:	aa 1b       	sub	r26, r26
    2f32:	bb 1b       	sub	r27, r27
    2f34:	51 e1       	ldi	r21, 0x11	; 17
    2f36:	07 c0       	rjmp	.+14     	; 0x2f46 <__udivmodhi4_ep>

00002f38 <__udivmodhi4_loop>:
    2f38:	aa 1f       	adc	r26, r26
    2f3a:	bb 1f       	adc	r27, r27
    2f3c:	a6 17       	cp	r26, r22
    2f3e:	b7 07       	cpc	r27, r23
    2f40:	10 f0       	brcs	.+4      	; 0x2f46 <__udivmodhi4_ep>
    2f42:	a6 1b       	sub	r26, r22
    2f44:	b7 0b       	sbc	r27, r23

00002f46 <__udivmodhi4_ep>:
    2f46:	88 1f       	adc	r24, r24
    2f48:	99 1f       	adc	r25, r25
    2f4a:	5a 95       	dec	r21
    2f4c:	a9 f7       	brne	.-22     	; 0x2f38 <__udivmodhi4_loop>
    2f4e:	80 95       	com	r24
    2f50:	90 95       	com	r25
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	08 95       	ret

00002f58 <_exit>:
    2f58:	f8 94       	cli

00002f5a <__stop_program>:
    2f5a:	ff cf       	rjmp	.-2      	; 0x2f5a <__stop_program>
